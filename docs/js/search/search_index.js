var COMPODOC_SEARCH_INDEX = {
  index: {
    version: "2.3.9",
    fields: ["title", "body"],
    fieldVectors: [
      ["title/guards/AccessTokenGuard.html", [0, 2.285, 1, 1.904]],
      [
        "body/guards/AccessTokenGuard.html",
        [
          0, 2.55, 1, 2.126, 2, 1.925, 3, 0.231, 4, 0.206, 5, 0.206, 6, 4.235,
          7, 2.188, 8, 1.371, 9, 3.229, 10, 3.818, 11, 2.55, 12, 4.366, 13,
          3.229, 14, 3.818, 15, 0.983, 16, 2.55, 17, 5.401, 18, 3.041, 19,
          3.229, 20, 1.961, 21, 3.568, 22, 0.341, 23, 0.505, 24, 2.555, 25,
          1.574, 26, 2.062, 27, 1.467, 28, 1.744, 29, 4.235, 30, 3.818, 31,
          1.688, 32, 2.188, 33, 4.726, 34, 3.837, 35, 4.235, 36, 0.885, 37,
          2.588, 38, 1.524, 39, 0.026, 40, 1.168, 41, 0.651, 42, 1.426, 43,
          3.229, 44, 3.726, 45, 2.588, 46, 2.188, 47, 1.744, 48, 1.467, 49,
          3.818, 50, 2.588, 51, 3.818, 52, 3.818, 53, 4.537, 54, 2.319, 55,
          3.818, 56, 1.473, 57, 3.726, 58, 3.818, 59, 3.03, 60, 0.675, 61,
          1.925, 62, 1.123, 63, 0.623, 64, 1.729, 65, 1.925, 66, 1.572, 67,
          1.925, 68, 1.329, 69, 1.925, 70, 1.925, 71, 2.588, 72, 0.231, 73,
          0.01, 74, 1.925, 75, 1.524, 76, 2.588, 77, 2.188, 78, 1.868, 79,
          2.588, 80, 2.588, 81, 2.588, 82, 2.588, 83, 1.688, 84, 1.572, 85,
          2.188, 86, 1.066, 87, 2.588, 88, 2.588, 89, 1.572, 90, 1.371, 91,
          1.144, 92, 1.329, 93, 2.588, 94, 2.588, 95, 0.014, 96, 0.014,
        ],
      ],
      ["title/modules/AppConfigModule.html", [97, 1.006, 98, 2.077]],
      [
        "body/modules/AppConfigModule.html",
        [
          1, 2.1, 3, 0.337, 4, 0.301, 5, 0.301, 39, 0.026, 60, 0.776, 63, 0.908,
          68, 1.937, 72, 0.337, 73, 0.014, 75, 1.267, 91, 2.713, 95, 0.018, 96,
          0.018, 97, 1.634, 98, 3.827, 99, 1.668, 100, 1.794, 101, 2.1, 102,
          2.1, 103, 1.794, 104, 2.767, 105, 2.1, 106, 3.19, 107, 3.19, 108,
          3.827, 109, 2.767, 110, 2.1, 111, 1.937, 112, 2.1, 113, 3.773, 114,
          2.552, 115, 4.969, 116, 2.806, 117, 3.19, 118, 4.969, 119, 2.52, 120,
          3.773, 121, 3.018, 122, 3.773, 123, 3.773, 124, 2.806, 125, 2.1, 126,
          3.19, 127, 3.19, 128, 3.773, 129, 3.773, 130, 3.19, 131, 3.773, 132,
          3.19, 133, 3.773, 134, 3.773, 135, 3.773, 136, 3.773, 137, 3.773, 138,
          3.19,
        ],
      ],
      ["title/modules/AppModule.html", [97, 1.006, 139, 2.285]],
      [
        "body/modules/AppModule.html",
        [
          3, 0.355, 4, 0.316, 5, 0.316, 39, 0.026, 60, 0.753, 63, 0.954, 66,
          2.408, 72, 0.355, 73, 0.015, 95, 0.019, 96, 0.019, 97, 1.674, 98,
          3.879, 99, 1.753, 100, 1.886, 101, 2.208, 102, 2.208, 103, 1.886, 104,
          2.858, 105, 2.208, 109, 2.858, 110, 2.208, 111, 2.036, 114, 2.636,
          125, 3.557, 126, 3.353, 139, 4.545, 140, 3.353, 141, 3.353, 142,
          3.879, 143, 3.557, 144, 3.965, 145, 3.353, 146, 3.965, 147, 3.965,
          148, 2.208,
        ],
      ],
      ["title/interfaces/AuthUserData.html", [149, 2.077, 150, 1.904]],
      [
        "body/interfaces/AuthUserData.html",
        [
          3, 0.386, 4, 0.344, 5, 0.344, 12, 4.149, 15, 1.647, 22, 0.569, 23,
          1.057, 39, 0.026, 41, 0.778, 56, 1.742, 72, 0.386, 95, 0.02, 96, 0.02,
          149, 2.621, 150, 3.017, 151, 3.21, 152, 3.649, 153, 3.649, 154, 3.353,
          155, 5.253, 156, 5.418, 157, 2.817, 158, 4.582, 159, 2.395, 160,
          5.418, 161, 2.782, 162, 4.582,
        ],
      ],
      [
        "title/controllers/AuthenticationController.html",
        [163, 2.077, 164, 2.285],
      ],
      [
        "body/controllers/AuthenticationController.html",
        [
          3, 0.322, 4, 0.287, 5, 0.287, 22, 0.475, 24, 1.59, 25, 1.513, 26,
          1.983, 27, 1.85, 28, 2.389, 36, 0.94, 38, 1.617, 39, 0.026, 40, 1.239,
          41, 0.691, 42, 1.513, 47, 1.85, 60, 0.751, 63, 0.865, 72, 0.322, 73,
          0.013, 75, 1.208, 86, 1.983, 90, 1.729, 95, 0.018, 96, 0.018, 148,
          2.003, 163, 2.924, 164, 3.216, 165, 3.042, 166, 4.071, 167, 4.071,
          168, 3.042, 169, 3.776, 170, 1.85, 171, 3.598, 172, 3.598, 173, 4.815,
          174, 3.042, 175, 3.193, 176, 3.598, 177, 3.598, 178, 3.042, 179,
          3.042, 180, 2.681, 181, 3.042, 182, 3.042, 183, 2.403, 184, 3.042,
          185, 3.042, 186, 2.185, 187, 3.042, 188, 2.676, 189, 2.185, 190,
          3.042, 191, 3.598, 192, 3.598, 193, 2.403, 194, 3.598, 195, 3.598,
          196, 3.598, 197, 3.598, 198, 3.598, 199, 3.598, 200, 3.598,
        ],
      ],
      ["title/guards/AuthenticationGuard.html", [0, 2.285, 201, 2.285]],
      [
        "body/guards/AuthenticationGuard.html",
        [
          1, 3.368, 2, 3.995, 3, 0.269, 4, 0.24, 5, 0.24, 11, 2.008, 21, 2.842,
          22, 0.397, 23, 0.587, 24, 2.732, 25, 1.942, 26, 2.034, 27, 1.635, 28,
          1.898, 29, 5.116, 31, 1.881, 36, 0.83, 38, 1.429, 39, 0.026, 40,
          1.095, 41, 0.611, 42, 1.337, 43, 3.598, 44, 3.995, 46, 2.543, 47,
          1.155, 48, 1.635, 60, 0.684, 62, 1.251, 63, 0.723, 72, 0.269, 73,
          0.011, 74, 2.237, 75, 1.429, 78, 2.212, 83, 1.329, 86, 1.238, 90,
          1.08, 91, 1.881, 95, 0.016, 96, 0.016, 119, 2.008, 124, 2.237, 186,
          1.826, 187, 2.543, 188, 2.237, 189, 2.584, 190, 2.543, 201, 2.842,
          202, 2.543, 203, 4.256, 204, 4.256, 205, 4.256, 206, 3.007, 207,
          4.976, 208, 3.007, 209, 3.007, 210, 3.166, 211, 3.007, 212, 4.256,
          213, 2.237, 214, 3.007, 215, 3.007, 216, 3.598, 217, 3.007, 218,
          3.007, 219, 3.007, 220, 3.007, 221, 3.007, 222, 2.008, 223, 3.007,
          224, 3.007, 225, 4.541, 226, 3.007, 227, 3.007, 228, 3.007, 229,
          3.007, 230, 3.007, 231, 3.007, 232, 3.007, 233, 3.007, 234, 3.007,
          235, 2.008, 236, 3.007,
        ],
      ],
      ["title/injectables/AuthenticationService.html", [62, 1.006, 180, 1.904]],
      [
        "body/injectables/AuthenticationService.html",
        [
          3, 0.159, 4, 0.142, 5, 0.142, 8, 1.289, 9, 3.476, 11, 1.913, 12,
          2.746, 13, 2.422, 15, 1.612, 16, 3.211, 18, 3.19, 19, 1.508, 20,
          1.843, 21, 2.746, 22, 0.235, 23, 0.559, 24, 2.125, 25, 1.511, 26,
          1.693, 27, 1.58, 28, 1.848, 31, 1.266, 36, 0.802, 38, 1.206, 39,
          0.026, 40, 0.924, 41, 0.515, 42, 1.128, 47, 1.848, 48, 2.019, 54,
          2.496, 60, 0.581, 62, 0.842, 63, 0.429, 72, 0.159, 73, 0.007, 75,
          2.003, 78, 1.854, 83, 1.99, 86, 2.081, 90, 1.029, 92, 1.471, 95,
          0.011, 96, 0.011, 154, 2.698, 159, 0.788, 166, 4.807, 167, 4.066, 168,
          2.422, 169, 2.92, 174, 2.422, 175, 2.595, 180, 1.595, 182, 1.508, 183,
          1.191, 184, 1.508, 185, 1.508, 235, 2.746, 237, 0.916, 238, 1.508,
          239, 2.864, 240, 2.864, 241, 2.864, 242, 2.864, 243, 2.864, 244,
          2.864, 245, 2.422, 246, 3.476, 247, 2.864, 248, 2.864, 249, 2.671,
          250, 2.864, 251, 1.783, 252, 2.289, 253, 2.813, 254, 2.813, 255,
          2.864, 256, 2.864, 257, 1.783, 258, 1.739, 259, 2.131, 260, 2.864,
          261, 2.92, 262, 4.503, 263, 2.422, 264, 2.864, 265, 2.131, 266, 2.422,
          267, 2.92, 268, 2.864, 269, 1.913, 270, 4.111, 271, 4.111, 272, 1.955,
          273, 3.058, 274, 2.746, 275, 2.289, 276, 2.864, 277, 2.864, 278,
          1.783, 279, 2.864, 280, 1.362, 281, 3.058, 282, 3.476, 283, 2.422,
          284, 2.864, 285, 2.131, 286, 1.913, 287, 2.131, 288, 4.111, 289,
          2.289, 290, 2.422, 291, 3.058, 292, 2.864, 293, 2.422, 294, 2.864,
          295, 0.848, 296, 2.864, 297, 1.508, 298, 1.508, 299, 1.783, 300,
          4.111, 301, 1.783, 302, 3.59, 303, 1.783, 304, 1.783, 305, 3.058, 306,
          3.058, 307, 1.326, 308, 1.783, 309, 2.864, 310, 1.783, 311, 1.783,
          312, 1.783, 313, 0.993, 314, 1.783, 315, 1.783, 316, 2.864, 317,
          2.864, 318, 2.864, 319, 1.508, 320, 1.783, 321, 1.783, 322, 1.783,
          323, 1.783,
        ],
      ],
      ["title/classes/BaseTodoDto.html", [73, 0.013, 324, 2.285]],
      [
        "body/classes/BaseTodoDto.html",
        [
          3, 0.358, 4, 0.319, 5, 0.319, 8, 2.053, 15, 1.677, 22, 0.528, 23,
          1.008, 25, 2.096, 36, 1.116, 39, 0.026, 41, 0.898, 56, 1.776, 60,
          0.69, 72, 0.358, 73, 0.021, 95, 0.019, 96, 0.019, 170, 2.197, 324,
          3.449, 325, 1.538, 326, 5.108, 327, 2.673, 328, 4.253, 329, 3.136,
          330, 4.001, 331, 4.001, 332, 3.384, 333, 4.001, 334, 2.055, 335,
          4.253, 336, 3.819, 337, 2.055, 338, 2.43,
        ],
      ],
      ["title/classes/BaseUserDto.html", [73, 0.013, 339, 2.285]],
      [
        "body/classes/BaseUserDto.html",
        [
          3, 0.35, 4, 0.312, 5, 0.312, 22, 0.517, 23, 0.994, 25, 2.088, 36,
          1.104, 39, 0.026, 40, 1.457, 41, 0.892, 56, 1.762, 60, 0.683, 72,
          0.35, 73, 0.021, 91, 2.252, 95, 0.019, 96, 0.019, 154, 2.906, 170,
          2.175, 325, 1.506, 329, 2.379, 335, 4.21, 336, 3.402, 337, 2.012, 338,
          2.379, 339, 3.402, 340, 5.068, 341, 3.313, 342, 3.151, 343, 3.313,
          344, 3.918, 345, 3.918, 346, 2.468, 347, 3.313, 348, 3.918, 349,
          3.313, 350, 5.094, 351, 5.094, 352, 3.918,
        ],
      ],
      ["title/injectables/BcryptProvider.html", [62, 1.006, 353, 1.904]],
      [
        "body/injectables/BcryptProvider.html",
        [
          3, 0.193, 4, 0.172, 5, 0.172, 8, 1.462, 20, 2.09, 21, 2.719, 22,
          0.285, 23, 0.651, 24, 1.799, 25, 1.437, 26, 1.884, 27, 1.282, 28,
          2.006, 31, 0.956, 36, 0.893, 38, 1.367, 39, 0.026, 40, 1.048, 41,
          0.584, 42, 1.279, 47, 1.899, 48, 2.215, 56, 1.914, 60, 0.552, 62,
          0.981, 63, 0.52, 68, 1.111, 72, 0.193, 73, 0.008, 74, 1.609, 75,
          1.536, 78, 1.373, 83, 1.474, 84, 2.025, 86, 1.676, 89, 2.025, 90,
          1.198, 91, 1.474, 92, 2.349, 95, 0.012, 96, 0.012, 159, 0.956, 193,
          1.445, 237, 1.111, 258, 3.17, 261, 3.17, 266, 2.82, 269, 4.001, 272,
          3.096, 275, 2.751, 287, 3.403, 289, 2.547, 290, 2.82, 295, 1.029, 305,
          2.481, 306, 1.609, 307, 4.581, 313, 3.029, 353, 1.857, 354, 1.829,
          355, 5.065, 356, 4.6, 357, 2.163, 358, 3.884, 359, 3.335, 360, 2.82,
          361, 4.456, 362, 2.163, 363, 2.481, 364, 3.335, 365, 3.335, 366, 2.82,
          367, 2.228, 368, 2.82, 369, 2.163, 370, 4.07, 371, 3.442, 372, 3.335,
          373, 2.228, 374, 2.163, 375, 3.028, 376, 3.028, 377, 3.442, 378,
          3.335, 379, 2.163, 380, 2.163, 381, 3.335, 382, 2.163, 383, 4.07, 384,
          2.163, 385, 2.163, 386, 2.163, 387, 3.335, 388, 2.82, 389, 3.335, 390,
          2.82, 391, 2.163, 392, 2.163,
        ],
      ],
      ["title/classes/CreateTodoDto.html", [73, 0.013, 393, 1.904]],
      [
        "body/classes/CreateTodoDto.html",
        [
          3, 0.383, 4, 0.342, 5, 0.342, 8, 1.938, 15, 1.52, 22, 0.566, 23,
          1.053, 25, 2.049, 36, 1.152, 39, 0.025, 41, 0.848, 56, 1.587, 60,
          0.518, 72, 0.383, 73, 0.016, 95, 0.02, 96, 0.02, 170, 2.269, 324,
          4.355, 325, 1.648, 327, 2.864, 328, 4.014, 329, 3.277, 332, 3.626,
          393, 3.004, 394, 3.626, 395, 3.604, 396, 4.993, 397, 4.288, 398,
          4.288, 399, 4.288, 400, 3.626, 401, 2.864,
        ],
      ],
      ["title/modules/DatabaseModule.html", [97, 1.006, 108, 2.077]],
      [
        "body/modules/DatabaseModule.html",
        [
          3, 0.41, 4, 0.365, 5, 0.365, 39, 0.026, 60, 0.766, 61, 3.411, 63,
          1.103, 68, 2.355, 72, 0.41, 73, 0.017, 95, 0.021, 96, 0.021, 97,
          1.654, 99, 2.027, 108, 3.417, 112, 2.553, 114, 2.889, 116, 4.185, 127,
          3.878, 358, 4.185, 402, 4.586, 403, 3.063, 404, 2.355, 405, 4.185,
          406, 4.586, 407, 4.586, 408, 4.586,
        ],
      ],
      ["title/interfaces/HashAlgoInterface.html", [149, 2.077, 373, 2.285]],
      [
        "body/interfaces/HashAlgoInterface.html",
        [
          3, 0.375, 4, 0.334, 5, 0.334, 22, 0.553, 27, 2.044, 36, 1.038, 38,
          1.787, 39, 0.026, 40, 1.369, 41, 0.764, 42, 1.672, 47, 2.044, 48,
          2.362, 56, 1.978, 72, 0.375, 95, 0.02, 96, 0.02, 149, 2.546, 151,
          3.119, 269, 3.903, 272, 2.53, 307, 3.957, 356, 4.499, 360, 4.499, 361,
          4.822, 368, 4.499, 373, 3.553, 409, 4.942, 410, 3.545, 411, 4.192,
          412, 4.192,
        ],
      ],
      ["title/modules/IamModule.html", [97, 1.006, 125, 1.904]],
      [
        "body/modules/IamModule.html",
        [
          1, 2.481, 3, 0.287, 4, 0.256, 5, 0.256, 15, 0.827, 39, 0.026, 60,
          0.81, 63, 0.773, 64, 2.145, 65, 2.389, 66, 1.95, 67, 2.389, 68, 1.649,
          72, 0.287, 73, 0.012, 95, 0.017, 96, 0.017, 97, 1.505, 99, 1.42, 100,
          1.528, 101, 1.788, 102, 1.788, 103, 1.528, 104, 2.85, 105, 2.481, 109,
          2.481, 110, 1.788, 111, 1.649, 114, 2.289, 116, 2.389, 117, 3.769,
          119, 2.145, 124, 2.389, 125, 3.716, 132, 2.716, 143, 3.346, 145,
          2.716, 148, 2.481, 164, 3.418, 180, 3.346, 181, 2.716, 201, 2.977,
          207, 2.716, 249, 2.389, 253, 3.346, 254, 3.346, 297, 2.716, 298,
          2.716, 334, 1.649, 353, 3.346, 403, 2.145, 404, 1.649, 413, 2.716,
          414, 3.212, 415, 2.716, 416, 3.212, 417, 3.212, 418, 3.212, 419,
          3.212, 420, 3.212, 421, 3.212, 422, 2.389, 423, 3.212, 424, 3.212,
          425, 3.212,
        ],
      ],
      ["title/classes/IdDto.html", [73, 0.013, 426, 2.285]],
      [
        "body/classes/IdDto.html",
        [
          3, 0.423, 4, 0.377, 5, 0.377, 22, 0.625, 23, 1.119, 36, 0.924, 39,
          0.025, 41, 0.68, 60, 0.572, 72, 0.423, 73, 0.021, 95, 0.021, 96,
          0.021, 157, 2.729, 161, 3.169, 170, 1.819, 325, 1.819, 337, 2.431,
          426, 3.832, 427, 4.851, 428, 4.003, 429, 4.734, 430, 4.734, 431,
          5.737, 432, 4.267,
        ],
      ],
      ["title/injectables/JwtTokenProvider.html", [62, 1.006, 254, 1.904]],
      [
        "body/injectables/JwtTokenProvider.html",
        [
          3, 0.221, 4, 0.197, 5, 0.197, 8, 0.889, 11, 3.274, 12, 4.23, 15,
          1.612, 18, 2.976, 20, 1.271, 22, 0.327, 23, 0.721, 24, 2.318, 25,
          1.648, 26, 2.018, 27, 1.42, 28, 1.699, 31, 1.633, 32, 2.094, 33,
          4.651, 34, 3.738, 35, 4.145, 36, 0.863, 38, 1.241, 39, 0.026, 40,
          0.951, 41, 0.53, 42, 1.161, 47, 1.42, 48, 2.015, 54, 2.976, 60, 0.664,
          61, 1.842, 62, 1.087, 63, 0.596, 64, 1.654, 65, 1.842, 66, 1.504, 67,
          1.842, 68, 1.271, 72, 0.221, 73, 0.009, 75, 1.484, 77, 2.094, 78,
          1.02, 83, 1.095, 84, 1.504, 86, 1.02, 89, 1.504, 90, 0.889, 92, 1.271,
          95, 0.014, 96, 0.014, 150, 2.057, 154, 2.693, 155, 2.094, 159, 1.095,
          161, 2.517, 237, 1.271, 249, 3.646, 254, 2.057, 258, 2.244, 263,
          3.125, 274, 3.274, 275, 2.057, 287, 2.749, 289, 2.92, 291, 3.288, 295,
          1.178, 313, 2.729, 334, 1.271, 363, 2.749, 371, 3.125, 433, 4.145,
          434, 2.094, 435, 3.695, 436, 3.695, 437, 3.695, 438, 2.476, 439,
          3.695, 440, 2.468, 441, 3.695, 442, 3.695, 443, 3.695, 444, 3.695,
          445, 3.125, 446, 4.421, 447, 3.695, 448, 3.695, 449, 3.695, 450,
          3.695, 451, 4.421, 452, 4.421, 453, 3.695, 454, 3.695, 455, 4.421,
          456, 3.695, 457, 3.695, 458, 3.695, 459, 2.094, 460, 2.094, 461,
          3.695, 462, 2.476, 463, 2.094, 464, 2.476, 465, 2.476, 466, 2.476,
          467, 2.476, 468, 2.476, 469, 2.476, 470, 2.094, 471, 2.476,
        ],
      ],
      ["title/classes/LogInDto.html", [73, 0.013, 169, 2.077]],
      [
        "body/classes/LogInDto.html",
        [
          3, 0.433, 4, 0.386, 5, 0.386, 39, 0.025, 40, 1.496, 60, 0.702, 72,
          0.433, 73, 0.018, 95, 0.022, 96, 0.022, 169, 3.53, 175, 2.484, 183,
          3.232, 222, 3.232, 281, 3.599, 325, 1.859, 342, 3.236, 395, 3.882,
          472, 4.091, 473, 4.091, 474, 5.813, 475, 4.838, 476, 3.599,
        ],
      ],
      ["title/classes/PaginationDto.html", [73, 0.013, 477, 2.077]],
      [
        "body/classes/PaginationDto.html",
        [
          3, 0.324, 4, 0.289, 5, 0.289, 22, 0.479, 23, 0.945, 36, 1.135, 39,
          0.026, 41, 0.913, 42, 1.827, 56, 1.424, 60, 0.585, 72, 0.324, 73,
          0.02, 95, 0.018, 96, 0.018, 157, 2.964, 159, 2.409, 170, 2.234, 295,
          2.882, 325, 1.394, 336, 3.64, 337, 1.863, 338, 2.203, 432, 4.054, 477,
          2.94, 478, 3.067, 479, 4.325, 480, 4.608, 481, 4.507, 482, 5.45, 483,
          4.094, 484, 4.842, 485, 3.627, 486, 5.815, 487, 4.094, 488, 4.842,
          489, 3.627, 490, 4.094, 491, 3.627, 492, 3.627, 493, 6.058, 494,
          3.627,
        ],
      ],
      ["title/classes/PaginationResultDto.html", [73, 0.013, 495, 2.077]],
      [
        "body/classes/PaginationResultDto.html",
        [
          3, 0.333, 4, 0.296, 5, 0.296, 22, 0.491, 23, 0.961, 31, 1.644, 36,
          1.268, 38, 1.249, 39, 0.025, 40, 0.957, 41, 0.933, 42, 1.169, 72,
          0.333, 73, 0.014, 95, 0.018, 96, 0.018, 157, 3.092, 272, 2.625, 319,
          4.966, 325, 1.429, 479, 4.105, 481, 4.105, 495, 2.989, 496, 5.563,
          497, 4.394, 498, 3.145, 499, 4.666, 500, 5.518, 501, 4.666, 502,
          4.666, 503, 4.923, 504, 6.109, 505, 4.923, 506, 4.923, 507, 3.719,
          508, 3.719, 509, 3.719, 510, 3.719, 511, 3.719, 512, 3.719, 513,
          3.719,
        ],
      ],
      ["title/injectables/PasswordService.html", [62, 1.006, 253, 1.904]],
      [
        "body/injectables/PasswordService.html",
        [
          3, 0.31, 4, 0.276, 5, 0.276, 22, 0.457, 23, 0.916, 24, 2.354, 25,
          1.793, 26, 2.35, 27, 1.804, 28, 2.363, 31, 1.532, 36, 1.114, 38,
          1.788, 39, 0.026, 40, 1.37, 41, 0.764, 42, 1.673, 47, 1.804, 48,
          2.193, 56, 1.907, 60, 0.567, 62, 1.381, 63, 0.834, 72, 0.31, 73,
          0.013, 75, 1.577, 86, 1.933, 90, 1.686, 95, 0.017, 96, 0.017, 159,
          1.532, 193, 2.314, 237, 1.779, 253, 2.614, 272, 2.533, 295, 1.648,
          353, 3.424, 361, 4.575, 514, 2.93, 515, 5.325, 516, 4.695, 517, 3.465,
          518, 4.695, 519, 3.465, 520, 4.826, 521, 3.465, 522, 4.695, 523,
          3.465, 524, 4.695, 525, 3.465, 526, 3.465, 527, 3.465,
        ],
      ],
      ["title/classes/SignUpDto.html", [73, 0.013, 175, 1.756]],
      [
        "body/classes/SignUpDto.html",
        [
          3, 0.355, 4, 0.316, 5, 0.316, 22, 0.523, 23, 1.002, 25, 2.093, 36,
          1.175, 39, 0.026, 40, 1.321, 41, 0.864, 56, 1.77, 60, 0.62, 72, 0.355,
          73, 0.019, 91, 1.753, 95, 0.019, 96, 0.019, 154, 2.636, 170, 2.314,
          175, 2.636, 267, 3.457, 325, 1.524, 329, 2.408, 337, 2.036, 339,
          4.267, 342, 2.858, 343, 3.353, 346, 1.633, 347, 3.353, 395, 3.429,
          396, 4.814, 400, 3.353, 528, 4.341, 529, 3.353, 530, 5.693, 531,
          3.965, 532, 3.965, 533, 3.965, 534, 3.965, 535, 3.965,
        ],
      ],
      ["title/entities/Task.html", [280, 1.627, 346, 1.409]],
      [
        "body/entities/Task.html",
        [
          3, 0.33, 4, 0.294, 5, 0.294, 8, 1.973, 15, 1.69, 22, 0.487, 23, 0.955,
          36, 1.222, 39, 0.026, 41, 0.899, 56, 1.721, 60, 0.591, 72, 0.33, 73,
          0.014, 95, 0.018, 96, 0.018, 157, 2.329, 161, 2.822, 170, 2.406, 280,
          1.754, 328, 4.088, 334, 1.894, 346, 2.016, 463, 4.14, 536, 2.463, 537,
          3.119, 538, 4.647, 539, 5.495, 540, 5.854, 541, 5.495, 542, 3.688,
          543, 5.151, 544, 3.688, 545, 4.647, 546, 3.688, 547, 3.688, 548,
          5.495, 549, 3.688, 550, 3.688, 551, 3.688, 552, 4.895, 553, 2.24, 554,
          3.688,
        ],
      ],
      ["title/controllers/TaskController.html", [163, 2.077, 555, 2.285]],
      [
        "body/controllers/TaskController.html",
        [
          3, 0.146, 4, 0.13, 5, 0.13, 8, 1.4, 15, 1.69, 16, 1.778, 20, 2.002,
          22, 0.215, 25, 0.512, 27, 1.023, 28, 2.17, 36, 0.761, 38, 1.309, 39,
          0.026, 40, 1.003, 41, 0.56, 42, 1.225, 47, 1.951, 48, 2.383, 57, 1.98,
          59, 2.255, 60, 0.694, 63, 0.392, 72, 0.146, 73, 0.006, 75, 1.549, 78,
          1.605, 83, 1.723, 86, 2.091, 90, 1.212, 92, 2.899, 95, 0.01, 96, 0.01,
          148, 0.907, 150, 3.365, 161, 2.368, 163, 0.989, 170, 1.498, 178,
          2.854, 179, 2.854, 186, 0.989, 188, 1.212, 189, 0.989, 193, 1.088,
          272, 2.57, 274, 3.391, 275, 2.827, 334, 0.836, 342, 0.907, 346, 2.434,
          393, 2.393, 401, 1.778, 426, 3.509, 440, 1.778, 459, 4.569, 460,
          1.377, 477, 3.19, 495, 0.989, 497, 2.255, 555, 1.778, 556, 1.377, 557,
          1.629, 558, 4.867, 559, 3.376, 560, 3.376, 561, 3.376, 562, 3.376,
          563, 1.629, 564, 1.629, 565, 1.629, 566, 2.251, 567, 4.569, 568,
          5.646, 569, 2.251, 570, 2.251, 571, 1.629, 572, 1.629, 573, 3.296,
          574, 2.251, 575, 3.296, 576, 3.296, 577, 2.251, 578, 2.251, 579,
          1.629, 580, 1.629, 581, 2.251, 582, 2.9, 583, 1.629, 584, 3.281, 585,
          1.629, 586, 1.629, 587, 2.251, 588, 2.854, 589, 2.251, 590, 2.662,
          591, 1.629, 592, 1.629, 593, 3.634, 594, 1.629, 595, 2.251, 596,
          1.629, 597, 1.629, 598, 1.879, 599, 1.377, 600, 3.197, 601, 1.629,
          602, 1.629, 603, 1.629, 604, 1.377, 605, 1.212, 606, 1.377, 607,
          1.629, 608, 1.377, 609, 1.377, 610, 1.377, 611, 1.377, 612, 1.629,
          613, 1.629, 614, 4.297, 615, 2.9, 616, 3.898, 617, 3.898, 618, 3.376,
          619, 1.629, 620, 1.629, 621, 1.629, 622, 1.629, 623, 1.629, 624,
          1.629, 625, 1.629, 626, 1.377, 627, 1.629,
        ],
      ],
      ["title/injectables/TaskService.html", [62, 1.006, 598, 1.904]],
      [
        "body/injectables/TaskService.html",
        [
          3, 0.11, 4, 0.098, 5, 0.098, 8, 1.32, 15, 1.747, 18, 1.281, 20, 2.199,
          22, 0.163, 23, 0.412, 24, 1.625, 25, 1.155, 26, 1.347, 27, 0.811, 28,
          2.108, 31, 0.933, 36, 0.836, 38, 1.346, 39, 0.026, 40, 1.031, 41,
          0.575, 42, 1.259, 47, 1.877, 48, 2.287, 54, 1.987, 59, 2.676, 60,
          0.569, 62, 0.621, 63, 0.297, 72, 0.11, 73, 0.005, 75, 1.736, 78,
          1.763, 83, 1.625, 84, 1.987, 86, 1.763, 89, 1.987, 90, 1.32, 92,
          2.509, 95, 0.008, 96, 0.008, 157, 2.458, 159, 0.546, 161, 3.03, 237,
          0.634, 246, 1.784, 258, 1.281, 259, 1.57, 261, 2.741, 272, 2.147, 273,
          1.57, 275, 2.513, 280, 1.749, 285, 2.434, 286, 3.531, 289, 2.513, 295,
          0.587, 313, 3.055, 334, 0.634, 342, 2.231, 346, 2.69, 363, 1.57, 367,
          1.41, 375, 2.057, 376, 2.735, 377, 3.109, 388, 1.044, 390, 2.338, 393,
          2.047, 401, 1.41, 404, 0.634, 440, 1.41, 445, 2.767, 470, 1.044, 477,
          2.862, 479, 3.185, 480, 1.044, 481, 2.981, 487, 1.044, 490, 1.784,
          495, 1.679, 497, 2.676, 499, 1.044, 501, 1.784, 502, 1.784, 538,
          1.044, 553, 0.749, 566, 1.784, 567, 3.109, 569, 1.784, 570, 3.109,
          573, 1.784, 574, 1.784, 575, 1.784, 576, 3.817, 577, 2.767, 578,
          2.338, 582, 2.434, 584, 2.967, 587, 1.784, 588, 4.258, 589, 1.784,
          593, 2.767, 598, 1.175, 604, 1.044, 605, 0.918, 606, 1.044, 609,
          1.044, 610, 1.044, 611, 1.044, 615, 2.057, 626, 1.044, 628, 1.044,
          629, 2.11, 630, 2.11, 631, 2.11, 632, 2.765, 633, 2.765, 634, 1.234,
          635, 2.338, 636, 2.11, 637, 2.11, 638, 2.11, 639, 1.234, 640, 1.41,
          641, 2.11, 642, 2.057, 643, 2.11, 644, 2.11, 645, 1.234, 646, 4.514,
          647, 4.885, 648, 2.11, 649, 2.11, 650, 2.11, 651, 1.234, 652, 2.765,
          653, 2.11, 654, 1.234, 655, 1.234, 656, 1.784, 657, 2.11, 658, 1.234,
          659, 1.234, 660, 2.11, 661, 2.11, 662, 1.044, 663, 1.234, 664, 1.044,
          665, 1.234, 666, 1.234, 667, 1.234, 668, 1.234, 669, 2.765, 670,
          1.234, 671, 2.11, 672, 2.11, 673, 1.044, 674, 1.234, 675, 1.234, 676,
          1.234, 677, 1.234, 678, 2.11, 679, 1.234, 680, 1.234, 681, 1.234, 682,
          1.234, 683, 1.234, 684, 1.234, 685, 1.234, 686, 1.234,
        ],
      ],
      ["title/modules/TasksModule.html", [97, 1.006, 142, 2.077]],
      [
        "body/modules/TasksModule.html",
        [
          3, 0.374, 4, 0.333, 5, 0.333, 15, 1.076, 39, 0.026, 60, 0.782, 63,
          1.005, 72, 0.374, 73, 0.016, 95, 0.02, 96, 0.02, 97, 1.716, 99, 1.847,
          100, 1.988, 101, 2.327, 102, 2.327, 103, 1.988, 104, 3.249, 105,
          2.327, 109, 2.956, 110, 2.327, 111, 2.146, 114, 2.146, 142, 3.933,
          148, 2.956, 334, 2.146, 346, 1.721, 403, 2.791, 404, 2.146, 422,
          3.109, 555, 3.898, 598, 3.606, 599, 3.534, 605, 3.109, 687, 3.534,
          688, 3.534, 689, 4.179, 690, 4.179, 691, 4.179,
        ],
      ],
      ["title/classes/UpdateTaskDto.html", [73, 0.013, 584, 2.077]],
      [
        "body/classes/UpdateTaskDto.html",
        [
          3, 0.439, 4, 0.391, 5, 0.391, 39, 0.025, 60, 0.708, 72, 0.439, 73,
          0.018, 95, 0.022, 96, 0.022, 222, 3.28, 325, 1.887, 327, 3.28, 393,
          2.734, 395, 3.917, 401, 3.28, 476, 3.653, 584, 3.561, 642, 3.653, 692,
          4.152, 693, 5.864, 694, 4.91,
        ],
      ],
      ["title/entities/User.html", [15, 0.88, 280, 1.627]],
      [
        "body/entities/User.html",
        [
          3, 0.335, 4, 0.298, 5, 0.298, 15, 1.272, 22, 0.493, 23, 0.964, 36,
          1.194, 39, 0.026, 40, 1.424, 41, 0.879, 56, 1.849, 60, 0.597, 72,
          0.335, 73, 0.014, 91, 2.184, 95, 0.018, 96, 0.018, 154, 2.841, 157,
          2.35, 161, 2.841, 170, 2.352, 267, 3.36, 280, 2.35, 342, 3.081, 346,
          2.589, 349, 3.163, 536, 2.498, 543, 5.316, 545, 4.679, 553, 2.271,
          695, 3.163, 696, 3.74, 697, 3.74, 698, 3.74, 699, 3.74, 700, 3.74,
          701, 3.74, 702, 4.941, 703, 4.941, 704, 4.941, 705, 3.74, 706, 4.941,
          707, 3.74,
        ],
      ],
      ["title/modules/UsersModule.html", [97, 1.006, 143, 1.904]],
      [
        "body/modules/UsersModule.html",
        [
          3, 0.379, 4, 0.337, 5, 0.337, 15, 1.089, 39, 0.026, 60, 0.745, 63,
          1.018, 72, 0.379, 73, 0.016, 95, 0.02, 96, 0.02, 97, 1.726, 99, 1.871,
          100, 2.013, 101, 2.357, 102, 2.357, 103, 2.013, 104, 3.268, 105,
          3.268, 109, 2.98, 110, 2.357, 111, 2.173, 114, 2.173, 143, 3.674, 252,
          3.823, 403, 2.827, 404, 2.173, 422, 3.149, 708, 3.579, 709, 3.579,
          710, 3.579, 711, 4.233, 712, 4.233, 713, 3.579,
        ],
      ],
      ["title/injectables/UsersService.html", [62, 1.006, 252, 1.904]],
      [
        "body/injectables/UsersService.html",
        [
          3, 0.197, 4, 0.176, 5, 0.176, 8, 1.215, 15, 1.624, 16, 2.259, 18,
          3.431, 20, 2.371, 22, 0.291, 23, 0.66, 24, 2.041, 25, 1.451, 26,
          1.902, 27, 1.3, 28, 2.021, 31, 1.495, 36, 0.901, 38, 1.382, 39, 0.026,
          40, 1.06, 41, 0.591, 42, 1.294, 47, 1.775, 48, 2.171, 54, 2.054, 56,
          1.546, 59, 2.75, 60, 0.602, 62, 0.995, 63, 0.53, 72, 0.197, 73, 0.008,
          75, 1.898, 78, 0.907, 83, 0.974, 84, 2.054, 86, 1.393, 89, 2.054, 90,
          1.478, 92, 2.114, 95, 0.013, 96, 0.013, 154, 3.037, 159, 0.974, 175,
          2.902, 183, 1.471, 235, 2.259, 237, 1.131, 245, 2.86, 252, 1.883, 258,
          2.054, 259, 3.062, 261, 2.054, 265, 3.062, 267, 3.026, 269, 3.085,
          272, 1.609, 273, 2.516, 274, 3.085, 275, 2.928, 280, 1.609, 281,
          3.435, 282, 3.905, 283, 2.86, 285, 2.516, 286, 3.512, 289, 2.774, 291,
          3.062, 293, 2.86, 295, 1.048, 305, 2.516, 306, 1.639, 313, 2.928, 367,
          2.259, 375, 1.639, 376, 1.639, 404, 1.131, 440, 3.085, 520, 4.213,
          553, 1.338, 582, 2.516, 595, 1.863, 608, 2.86, 615, 3.062, 635, 2.86,
          640, 2.259, 642, 1.639, 662, 1.863, 664, 1.863, 673, 1.863, 713,
          1.863, 714, 1.863, 715, 4.117, 716, 3.382, 717, 2.203, 718, 3.382,
          719, 2.203, 720, 2.203, 721, 3.382, 722, 3.382, 723, 3.382, 724,
          3.382, 725, 3.382, 726, 2.203, 727, 4.618, 728, 3.382, 729, 3.382,
          730, 2.203, 731, 2.203, 732, 2.203, 733, 2.203, 734, 2.203, 735,
          2.203, 736, 2.203,
        ],
      ],
      ["title/classes/ValidateEnv.html", [73, 0.013, 121, 2.077]],
      [
        "body/classes/ValidateEnv.html",
        [
          3, 0.231, 4, 0.206, 5, 0.206, 22, 0.341, 23, 0.745, 26, 1.572, 36,
          1.234, 39, 0.026, 41, 0.908, 56, 1.922, 60, 0.548, 63, 0.623, 72,
          0.341, 73, 0.017, 75, 1.282, 78, 1.868, 83, 1.144, 90, 0.929, 91,
          1.144, 95, 0.017, 96, 0.014, 112, 3.556, 121, 2.319, 130, 3.229, 138,
          2.188, 157, 2.822, 170, 2.43, 213, 1.925, 225, 2.188, 289, 1.441, 313,
          1.441, 325, 0.994, 329, 3.603, 335, 4.506, 336, 4.046, 337, 1.329,
          338, 1.572, 366, 2.188, 432, 3.974, 640, 1.729, 737, 1.925, 738,
          4.537, 739, 4.537, 740, 4.537, 741, 4.537, 742, 4.537, 743, 4.537,
          744, 4.537, 745, 4.537, 746, 4.537, 747, 4.537, 748, 4.537, 749,
          4.537, 750, 5.009, 751, 2.588, 752, 2.588, 753, 2.588, 754, 2.588,
          755, 2.588, 756, 2.588, 757, 2.588, 758, 2.588, 759, 2.588, 760,
          2.588, 761, 2.588, 762, 2.588, 763, 2.588, 764, 5.342, 765, 2.588,
          766, 2.188, 767, 2.588, 768, 3.818, 769, 2.588, 770, 2.188, 771,
          2.588, 772, 2.588, 773, 2.588, 774, 2.188, 775, 2.588, 776, 2.588,
          777, 2.588, 778, 3.818, 779, 2.588, 780, 2.588, 781, 2.588, 782,
          2.588,
        ],
      ],
      ["title/coverage.html", [783, 3.462]],
      [
        "body/coverage.html",
        [
          0, 2.745, 1, 1.594, 5, 0.228, 6, 2.421, 7, 2.421, 15, 1.058, 39,
          0.026, 41, 0.411, 62, 1.703, 70, 2.13, 73, 0.023, 75, 0.962, 95,
          0.015, 96, 0.015, 97, 0.842, 103, 1.362, 112, 2.676, 121, 2.496, 149,
          2.496, 150, 1.594, 152, 2.421, 153, 2.421, 163, 2.496, 164, 1.912,
          165, 2.421, 169, 1.739, 175, 1.47, 180, 1.594, 189, 1.739, 201, 1.912,
          202, 2.421, 210, 2.13, 238, 2.421, 252, 1.594, 253, 1.594, 254, 1.594,
          280, 1.955, 324, 1.912, 326, 2.421, 327, 3.211, 339, 1.912, 340,
          2.421, 341, 2.421, 346, 1.179, 353, 1.594, 354, 2.421, 373, 1.912,
          393, 1.594, 394, 2.421, 405, 2.13, 409, 2.421, 410, 2.421, 426, 1.912,
          427, 2.421, 428, 2.421, 433, 2.421, 434, 2.421, 472, 2.421, 473,
          2.421, 477, 1.739, 478, 2.421, 495, 1.739, 496, 2.421, 497, 1.912,
          498, 2.421, 514, 2.421, 528, 2.421, 529, 2.421, 537, 2.421, 555,
          1.912, 556, 2.421, 584, 1.739, 598, 1.594, 600, 2.13, 628, 2.421, 640,
          2.745, 692, 2.421, 695, 2.421, 714, 2.421, 737, 3.057, 774, 5.783,
          783, 2.13, 784, 2.421, 785, 2.863, 786, 2.863, 787, 2.421, 788, 5.79,
          789, 6.449, 790, 2.863, 791, 2.863, 792, 2.863, 793, 4.807, 794,
          2.863, 795, 2.863, 796, 4.11, 797, 4.11, 798, 4.11, 799, 2.421, 800,
          3.475, 801, 4.11, 802, 4.11, 803, 2.863, 804, 2.421, 805, 2.421, 806,
          2.863, 807, 2.863, 808, 3.057, 809, 4.807, 810, 2.863, 811, 2.863,
          812, 2.863, 813, 2.863, 814, 2.863, 815, 2.863,
        ],
      ],
      ["title/dependencies.html", [100, 1.955, 816, 2.422]],
      [
        "body/dependencies.html",
        [
          39, 0.026, 63, 1.002, 64, 2.782, 68, 2.139, 69, 3.099, 73, 0.02, 95,
          0.02, 96, 0.02, 100, 1.981, 114, 2.139, 119, 2.782, 222, 2.782, 337,
          2.139, 338, 2.53, 355, 3.523, 404, 2.139, 476, 3.099, 553, 2.53, 817,
          4.166, 818, 4.166, 819, 5.827, 820, 4.166, 821, 4.166, 822, 4.166,
          823, 4.166, 824, 4.166, 825, 4.166, 826, 4.166, 827, 4.166, 828,
          4.166, 829, 4.166, 830, 4.166, 831, 5.827, 832, 5.827, 833, 4.166,
          834, 4.166, 835, 4.166, 836, 4.166, 837, 4.166, 838, 4.166, 839,
          4.166, 840, 4.166, 841, 4.166, 842, 3.523, 843, 4.166, 844, 4.166,
          845, 4.166, 846, 4.166, 847, 4.166, 848, 4.166, 849, 4.166, 850,
          4.166,
        ],
      ],
      ["title/miscellaneous/enumerations.html", [851, 1.594, 852, 3.475]],
      [
        "body/miscellaneous/enumerations.html",
        [
          22, 0.689, 39, 0.023, 95, 0.023, 96, 0.023, 186, 3.692, 851, 2.907,
          852, 4.415, 853, 5.221, 854, 6.081, 855, 5.221, 856, 5.221, 857,
          5.221,
        ],
      ],
      ["title/miscellaneous/functions.html", [851, 1.594, 858, 3.475]],
      [
        "body/miscellaneous/functions.html",
        [
          22, 0.66, 38, 1.68, 39, 0.023, 40, 1.288, 41, 0.718, 42, 1.572, 95,
          0.022, 96, 0.022, 103, 3.006, 112, 2.786, 121, 3.601, 213, 4.411, 737,
          3.722, 766, 4.231, 770, 4.231, 808, 3.722, 851, 2.786, 858, 4.231,
          859, 4.231, 860, 5.004,
        ],
      ],
      ["title/index.html", [22, 0.378, 861, 2.422, 862, 2.422]],
      [
        "body/index.html",
        [
          4, 0.312, 8, 1.407, 39, 0.026, 66, 2.379, 95, 0.019, 96, 0.019, 286,
          2.617, 783, 2.915, 842, 5.385, 863, 3.918, 864, 3.918, 865, 5.094,
          866, 3.918, 867, 3.918, 868, 3.918, 869, 3.918, 870, 3.918, 871,
          3.918, 872, 5.66, 873, 3.918, 874, 3.918, 875, 3.918, 876, 5.66, 877,
          6.484, 878, 3.918, 879, 3.918, 880, 3.918, 881, 3.918, 882, 5.094,
          883, 3.918, 884, 3.918, 885, 3.918, 886, 3.918, 887, 5.094, 888,
          5.094, 889, 3.918, 890, 3.918, 891, 3.918, 892, 4.307, 893, 5.094,
          894, 3.918, 895, 3.918, 896, 3.918, 897, 3.918, 898, 3.918, 899,
          3.313, 900, 3.918, 901, 3.918, 902, 3.918, 903, 3.918, 904, 3.918,
          905, 3.918, 906, 3.918, 907, 3.918, 908, 3.918, 909, 3.918, 910,
          3.313, 911, 3.918, 912, 3.918, 913, 3.918, 914, 3.918, 915, 3.918,
          916, 3.918, 917, 2.617,
        ],
      ],
      ["title/license.html", [861, 2.422, 862, 2.422, 917, 1.913]],
      [
        "body/license.html",
        [
          39, 0.019, 69, 2.932, 95, 0.019, 96, 0.019, 111, 2.024, 158, 3.333,
          162, 3.333, 235, 3.415, 261, 2.394, 367, 2.633, 581, 3.333, 656,
          4.324, 784, 3.333, 892, 3.333, 917, 2.633, 918, 5.676, 919, 3.942,
          920, 3.942, 921, 3.942, 922, 3.942, 923, 5.114, 924, 3.942, 925,
          3.942, 926, 3.942, 927, 3.942, 928, 3.942, 929, 5.114, 930, 6.652,
          931, 3.942, 932, 3.942, 933, 5.676, 934, 3.942, 935, 3.942, 936,
          3.942, 937, 3.942, 938, 3.942, 939, 3.942, 940, 3.942, 941, 3.942,
          942, 3.942, 943, 3.942, 944, 5.114, 945, 3.942, 946, 3.942, 947,
          3.942, 948, 3.942, 949, 3.942, 950, 3.942, 951, 5.114, 952, 5.114,
          953, 3.942, 954, 3.942, 955, 3.942, 956, 3.942, 957, 3.942, 958,
          3.942, 959, 3.942, 960, 3.942, 961, 3.942, 962, 3.942, 963, 3.942,
          964, 3.942, 965, 3.942, 966, 3.942, 967, 3.942, 968, 3.942, 969,
          3.942, 970, 3.942, 971, 3.942, 972, 3.942, 973, 3.942, 974, 3.942,
          975, 3.942, 976, 3.942, 977, 3.942, 978, 3.942, 979, 3.942,
        ],
      ],
      ["title/modules.html", [99, 2.057]],
      [
        "body/modules.html",
        [
          39, 0.022, 95, 0.022, 96, 0.022, 98, 2.949, 99, 2.147, 108, 2.949,
          125, 2.704, 139, 3.243, 142, 2.949, 143, 2.704, 899, 5.596, 980,
          6.618, 981, 6.618, 982, 6.719, 983, 4.856, 984, 4.856,
        ],
      ],
      ["title/overview.html", [985, 3.935]],
      [
        "body/overview.html",
        [
          2, 2.751, 39, 0.025, 95, 0.018, 96, 0.018, 97, 1.088, 98, 3.703, 99,
          1.635, 100, 1.759, 101, 2.059, 102, 2.059, 103, 1.759, 104, 2.059,
          105, 2.059, 106, 3.127, 107, 3.127, 108, 3.341, 109, 2.731, 110,
          2.059, 111, 1.899, 125, 3.771, 139, 4.432, 140, 3.127, 141, 3.127,
          142, 3.703, 143, 3.56, 148, 2.059, 151, 2.751, 180, 3.064, 237, 1.899,
          252, 3.56, 253, 3.064, 254, 3.064, 325, 1.421, 353, 3.064, 413, 3.127,
          415, 3.127, 483, 3.127, 536, 2.47, 598, 3.064, 687, 3.127, 688, 3.127,
          708, 3.127, 709, 3.127, 710, 3.127, 985, 3.127, 986, 4.905, 987, 5.86,
        ],
      ],
      ["title/properties.html", [23, 0.802, 816, 2.422]],
      [
        "body/properties.html",
        [
          8, 1.875, 23, 1.019, 39, 0.025, 95, 0.023, 96, 0.023, 910, 4.415, 917,
          3.487, 988, 5.221, 989, 5.221, 990, 5.221,
        ],
      ],
      ["title/miscellaneous/variables.html", [851, 1.594, 991, 3.475]],
      [
        "body/miscellaneous/variables.html",
        [
          15, 1.51, 17, 3.136, 22, 0.489, 28, 1.425, 39, 0.026, 41, 0.842, 44,
          2.759, 48, 1.425, 56, 1.445, 57, 3.655, 70, 3.655, 78, 2.023, 85,
          3.136, 90, 1.332, 91, 1.639, 95, 0.018, 96, 0.018, 97, 1.445, 112,
          2.065, 150, 2.736, 159, 2.698, 186, 2.984, 189, 2.984, 210, 3.655,
          216, 4.155, 265, 2.759, 267, 2.252, 295, 2.903, 346, 1.527, 358,
          3.655, 405, 3.655, 536, 2.477, 600, 3.655, 787, 3.136, 799, 3.136,
          800, 3.136, 804, 3.136, 805, 4.155, 808, 2.759, 851, 2.065, 859,
          3.136, 991, 3.136, 992, 4.914, 993, 3.709, 994, 3.709, 995, 3.709,
          996, 3.709, 997, 3.709, 998, 4.914, 999, 3.709, 1000, 3.709, 1001,
          3.709, 1002, 3.709, 1003, 3.709, 1004, 3.709, 1005, 3.709, 1006,
          3.709, 1007, 3.709, 1008, 3.709, 1009, 3.709, 1010, 3.709, 1011,
          3.709, 1012, 3.709,
        ],
      ],
    ],
    invertedIndex: [
      [
        "",
        {
          _index: 39,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "0",
        {
          _index: 774,
          title: {},
          body: { "classes/ValidateEnv.html": {}, "coverage.html": {} },
        },
      ],
      ["0.0.1", { _index: 989, title: {}, body: { "properties.html": {} } }],
      ["0.14.1", { _index: 827, title: {}, body: { "dependencies.html": {} } }],
      ["0.2.0", { _index: 844, title: {}, body: { "dependencies.html": {} } }],
      ["0.2.2", { _index: 841, title: {}, body: { "dependencies.html": {} } }],
      ["0.3.20", { _index: 847, title: {}, body: { "dependencies.html": {} } }],
      ["0.5.1", { _index: 826, title: {}, body: { "dependencies.html": {} } }],
      ["0/1", { _index: 789, title: {}, body: { "coverage.html": {} } }],
      ["0/13", { _index: 790, title: {}, body: { "coverage.html": {} } }],
      ["0/2", { _index: 791, title: {}, body: { "coverage.html": {} } }],
      ["0/3", { _index: 798, title: {}, body: { "coverage.html": {} } }],
      ["0/4", { _index: 809, title: {}, body: { "coverage.html": {} } }],
      ["0/5", { _index: 793, title: {}, body: { "coverage.html": {} } }],
      ["0/6", { _index: 803, title: {}, body: { "coverage.html": {} } }],
      ["0/9", { _index: 792, title: {}, body: { "coverage.html": {} } }],
      [
        "1",
        {
          _index: 490,
          title: {},
          body: {
            "classes/PaginationDto.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      ["1.1.25", { _index: 818, title: {}, body: { "dependencies.html": {} } }],
      ["1/4", { _index: 807, title: {}, body: { "coverage.html": {} } }],
      [
        "10",
        {
          _index: 483,
          title: {},
          body: { "classes/PaginationDto.html": {}, "overview.html": {} },
        },
      ],
      ["10.0.0", { _index: 819, title: {}, body: { "dependencies.html": {} } }],
      ["10.0.2", { _index: 824, title: {}, body: { "dependencies.html": {} } }],
      ["10.2.0", { _index: 821, title: {}, body: { "dependencies.html": {} } }],
      [
        "12",
        {
          _index: 380,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      ["2", { _index: 987, title: {}, body: { "overview.html": {} } }],
      ["2.0.5", { _index: 822, title: {}, body: { "dependencies.html": {} } }],
      ["2/3", { _index: 795, title: {}, body: { "coverage.html": {} } }],
      ["2/5", { _index: 802, title: {}, body: { "coverage.html": {} } }],
      ["2024", { _index: 920, title: {}, body: { "license.html": {} } }],
      ["25", { _index: 806, title: {}, body: { "coverage.html": {} } }],
      ["3.0.0", { _index: 850, title: {}, body: { "dependencies.html": {} } }],
      ["3.2.3", { _index: 820, title: {}, body: { "dependencies.html": {} } }],
      ["3/5", { _index: 797, title: {}, body: { "coverage.html": {} } }],
      ["4.1.0", { _index: 838, title: {}, body: { "dependencies.html": {} } }],
      ["4/5", { _index: 811, title: {}, body: { "coverage.html": {} } }],
      ["40", { _index: 801, title: {}, body: { "coverage.html": {} } }],
      ["5.1.1", { _index: 825, title: {}, body: { "dependencies.html": {} } }],
      ["5/8", { _index: 813, title: {}, body: { "coverage.html": {} } }],
      ["6", { _index: 986, title: {}, body: { "overview.html": {} } }],
      ["60", { _index: 796, title: {}, body: { "coverage.html": {} } }],
      ["62", { _index: 812, title: {}, body: { "coverage.html": {} } }],
      ["66", { _index: 794, title: {}, body: { "coverage.html": {} } }],
      ["7.8.1", { _index: 846, title: {}, body: { "dependencies.html": {} } }],
      ["8.13.0", { _index: 835, title: {}, body: { "dependencies.html": {} } }],
      ["80", { _index: 810, title: {}, body: { "coverage.html": {} } }],
      ["9.0.2", { _index: 833, title: {}, body: { "dependencies.html": {} } }],
      [
        "_",
        { _index: 93, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      ["above", { _index: 950, title: {}, body: { "license.html": {} } }],
      [
        "access",
        {
          _index: 11,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "accesstoken",
        {
          _index: 461,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "accesstokenguard",
        {
          _index: 1,
          title: { "guards/AccessTokenGuard.html": {} },
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "guards/AuthenticationGuard.html": {},
            "modules/IamModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["action", { _index: 974, title: {}, body: { "license.html": {} } }],
      [
        "additional",
        {
          _index: 448,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "adds",
        { _index: 14, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "against",
        {
          _index: 364,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "algo.interface",
        {
          _index: 374,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "algo.interface.ts",
        {
          _index: 410,
          title: {},
          body: {
            "interfaces/HashAlgoInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "algo.interface.ts:2",
        {
          _index: 412,
          title: {},
          body: { "interfaces/HashAlgoInterface.html": {} },
        },
      ],
      [
        "algo.interface.ts:3",
        {
          _index: 411,
          title: {},
          body: { "interfaces/HashAlgoInterface.html": {} },
        },
      ],
      [
        "already",
        {
          _index: 283,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["amazing", { _index: 900, title: {}, body: { "index.html": {} } }],
      ["and/or", { _index: 942, title: {}, body: { "license.html": {} } }],
      [
        "app",
        {
          _index: 66,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "app_guard",
        {
          _index: 117,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      [
        "app_pipe",
        {
          _index: 118,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "app_port",
        { _index: 738, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "app_prefix",
        { _index: 739, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "appconfigmodule",
        {
          _index: 98,
          title: { "modules/AppConfigModule.html": {} },
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      ["applications", { _index: 871, title: {}, body: { "index.html": {} } }],
      [
        "appmodule",
        {
          _index: 139,
          title: { "modules/AppModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      ["arising", { _index: 977, title: {}, body: { "license.html": {} } }],
      [
        "asc",
        { _index: 486, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "associated",
        {
          _index: 581,
          title: {},
          body: { "controllers/TaskController.html": {}, "license.html": {} },
        },
      ],
      [
        "associates",
        {
          _index: 643,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "async",
        {
          _index: 28,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "asynchronously",
        {
          _index: 258,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "attempts",
        {
          _index: 641,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "audience",
        {
          _index: 451,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "auth",
        {
          _index: 189,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "controllers/TaskController.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "auth(authtype.bearer",
        {
          _index: 612,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "auth(authtype.none",
        {
          _index: 191,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "auth_type_key",
        {
          _index: 210,
          title: {},
          body: {
            "guards/AuthenticationGuard.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "authenticated",
        {
          _index: 459,
          title: {},
          body: {
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
          },
        },
      ],
      [
        "authenticateuser",
        {
          _index: 600,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "authentication",
        {
          _index: 241,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "authentication.service",
        {
          _index: 181,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      [
        "authentication/authentication.controller",
        { _index: 418, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "authentication/guards/access",
        { _index: 420, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "authentication/guards/authentication.guard",
        { _index: 421, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "authenticationcontroller",
        {
          _index: 164,
          title: { "controllers/AuthenticationController.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "modules/IamModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "authenticationguard",
        {
          _index: 201,
          title: { "guards/AuthenticationGuard.html": {} },
          body: {
            "guards/AuthenticationGuard.html": {},
            "modules/IamModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "authenticationguard.defaultauthtype",
        {
          _index: 220,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "authenticationservice",
        {
          _index: 180,
          title: { "injectables/AuthenticationService.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "modules/IamModule.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "author",
        {
          _index: 910,
          title: {},
          body: { "index.html": {}, "properties.html": {} },
        },
      ],
      [
        "authorization",
        { _index: 52, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      ["authors", { _index: 967, title: {}, body: { "license.html": {} } }],
      [
        "authtype",
        {
          _index: 186,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "controllers/TaskController.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "authtype.bearer",
        {
          _index: 212,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "authtype.none",
        {
          _index: 215,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "authtypeguardmap",
        {
          _index: 203,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "authtypes",
        {
          _index: 216,
          title: {},
          body: {
            "guards/AuthenticationGuard.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "authtypes.map((type",
        {
          _index: 223,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "authuserdata",
        {
          _index: 150,
          title: { "interfaces/AuthUserData.html": {} },
          body: {
            "interfaces/AuthUserData.html": {},
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "availability",
        {
          _index: 245,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["available", { _index: 984, title: {}, body: { "modules.html": {} } }],
      [
        "await",
        {
          _index: 86,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["backers", { _index: 901, title: {}, body: { "index.html": {} } }],
      [
        "bad",
        { _index: 82, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "base",
        {
          _index: 400,
          title: {},
          body: {
            "classes/CreateTodoDto.html": {},
            "classes/SignUpDto.html": {},
          },
        },
      ],
      [
        "based",
        {
          _index: 646,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "basetododto",
        {
          _index: 324,
          title: { "classes/BaseTodoDto.html": {} },
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "basetododto:11",
        { _index: 397, title: {}, body: { "classes/CreateTodoDto.html": {} } },
      ],
      [
        "basetododto:13",
        { _index: 399, title: {}, body: { "classes/CreateTodoDto.html": {} } },
      ],
      [
        "basetododto:8",
        { _index: 398, title: {}, body: { "classes/CreateTodoDto.html": {} } },
      ],
      [
        "baseuserdto",
        {
          _index: 339,
          title: { "classes/BaseUserDto.html": {} },
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "baseuserdto:11",
        { _index: 532, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "baseuserdto:14",
        { _index: 534, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "baseuserdto:8",
        { _index: 533, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "bcrypt",
        {
          _index: 355,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "bcrypt.compare(data",
        {
          _index: 392,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "bcrypt.gensalt(saltrounds",
        {
          _index: 384,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "bcrypt.hash(data",
        {
          _index: 386,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "bcrypt.provider",
        {
          _index: 525,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "bcryptprovider",
        {
          _index: 353,
          title: { "injectables/BcryptProvider.html": {} },
          body: {
            "injectables/BcryptProvider.html": {},
            "modules/IamModule.html": {},
            "injectables/PasswordService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "bearer",
        {
          _index: 856,
          title: {},
          body: { "miscellaneous/enumerations.html": {} },
        },
      ],
      [
        "being",
        {
          _index: 657,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "body",
        {
          _index: 178,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "controllers/TaskController.html": {},
          },
        },
      ],
      [
        "boolean",
        {
          _index: 319,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/PaginationResultDto.html": {},
          },
        },
      ],
      [
        "bootstrap",
        {
          _index: 103,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "overview.html": {},
          },
        },
      ],
      ["browse", { _index: 982, title: {}, body: { "modules.html": {} } }],
      ["browser", { _index: 980, title: {}, body: { "modules.html": {} } }],
      [
        "buffer",
        {
          _index: 361,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/PasswordService.html": {},
          },
        },
      ],
      ["building", { _index: 866, title: {}, body: { "index.html": {} } }],
      ["c", { _index: 919, title: {}, body: { "license.html": {} } }],
      [
        "canactivate",
        {
          _index: 29,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
          },
        },
      ],
      [
        "canactivate(context",
        {
          _index: 43,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
          },
        },
      ],
      [
        "cascade",
        { _index: 704, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "catch",
        {
          _index: 89,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "catch((err",
        {
          _index: 229,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      ["charge", { _index: 926, title: {}, body: { "license.html": {} } }],
      [
        "check",
        {
          _index: 727,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "checker",
        { _index: 830, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "checking",
        {
          _index: 244,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "checks",
        {
          _index: 9,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      ["claim", { _index: 970, title: {}, body: { "license.html": {} } }],
      [
        "class",
        {
          _index: 73,
          title: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/IdDto.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/UpdateTaskDto.html": {},
            "classes/ValidateEnv.html": {},
          },
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "classes",
        {
          _index: 325,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/IdDto.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/UpdateTaskDto.html": {},
            "classes/ValidateEnv.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "cluster_appconfigmodule",
        {
          _index: 106,
          title: {},
          body: { "modules/AppConfigModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_appconfigmodule_imports",
        {
          _index: 107,
          title: {},
          body: { "modules/AppConfigModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_appmodule",
        {
          _index: 140,
          title: {},
          body: { "modules/AppModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_appmodule_imports",
        {
          _index: 141,
          title: {},
          body: { "modules/AppModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_iammodule",
        {
          _index: 413,
          title: {},
          body: { "modules/IamModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_iammodule_imports",
        { _index: 414, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "cluster_iammodule_providers",
        {
          _index: 415,
          title: {},
          body: { "modules/IamModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_tasksmodule",
        {
          _index: 687,
          title: {},
          body: { "modules/TasksModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_tasksmodule_providers",
        {
          _index: 688,
          title: {},
          body: { "modules/TasksModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usersmodule",
        {
          _index: 708,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usersmodule_exports",
        {
          _index: 709,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "cluster_usersmodule_providers",
        {
          _index: 710,
          title: {},
          body: { "modules/UsersModule.html": {}, "overview.html": {} },
        },
      ],
      [
        "code",
        {
          _index: 672,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "column",
        {
          _index: 543,
          title: {},
          body: { "entities/Task.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "column({unique",
        { _index: 696, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "common/dto/id",
        {
          _index: 607,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "common/pagination/generic",
        {
          _index: 610,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "common/pagination/pagination.dto",
        {
          _index: 609,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "compare",
        {
          _index: 356,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
          },
        },
      ],
      [
        "compare(data",
        {
          _index: 360,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
          },
        },
      ],
      [
        "comparepassword",
        {
          _index: 515,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "comparepassword(data",
        {
          _index: 519,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "compares",
        {
          _index: 266,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
          },
        },
      ],
      [
        "comparison",
        {
          _index: 391,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "compodoc/compodoc",
        { _index: 817, title: {}, body: { "dependencies.html": {} } },
      ],
      ["conditions", { _index: 949, title: {}, body: { "license.html": {} } }],
      [
        "config/app.config.module",
        { _index: 146, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "config/app.config.module.ts",
        {
          _index: 113,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "config/database/db.config.ts",
        {
          _index: 787,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "config/database/db.module.ts",
        { _index: 402, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "config/environements/validate.env.ts",
        {
          _index: 737,
          title: {},
          body: {
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "config/environements/validate.env.ts:14",
        { _index: 757, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:17",
        { _index: 755, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:20",
        { _index: 753, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:23",
        { _index: 754, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:27",
        { _index: 756, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:30",
        { _index: 751, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:33",
        { _index: 762, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:36",
        { _index: 752, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:40",
        { _index: 758, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:43",
        { _index: 759, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:46",
        { _index: 760, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/environements/validate.env.ts:49",
        { _index: 761, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "config/jwt/jwt.config",
        {
          _index: 67,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "configmodule",
        {
          _index: 116,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      [
        "configmodule.forfeature(jwtconfig",
        { _index: 424, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "configmodule.forroot",
        {
          _index: 127,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/DatabaseModule.html": {},
          },
        },
      ],
      [
        "configservice",
        {
          _index: 358,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "modules/DatabaseModule.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        'configservice.getorthrow("datasource_database',
        {
          _index: 1008,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_host',
        {
          _index: 1005,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_password',
        {
          _index: 1011,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_port',
        {
          _index: 1007,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        'configservice.getorthrow("datasource_username',
        {
          _index: 1010,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "configtype",
        {
          _index: 35,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "configuration",
        {
          _index: 449,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "conflictexception",
        {
          _index: 288,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["connection", { _index: 978, title: {}, body: { "license.html": {} } }],
      [
        'console.log("retrieved',
        {
          _index: 221,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "const",
        {
          _index: 78,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "constants/user.key",
        { _index: 71, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "constructor",
        {
          _index: 31,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "constructor(bcryptprovider",
        {
          _index: 517,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "constructor(configservice",
        {
          _index: 357,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "constructor(jwtservice",
        {
          _index: 32,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "constructor(partial",
        {
          _index: 503,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "constructor(private",
        {
          _index: 193,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
          },
        },
      ],
      [
        "constructor(reflector",
        {
          _index: 206,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "constructor(taskrepository",
        {
          _index: 634,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "constructor(userrepository",
        {
          _index: 717,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "constructor(userservice",
        {
          _index: 251,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "containing",
        {
          _index: 54,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "context",
        {
          _index: 46,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
          },
        },
      ],
      [
        "context.getclass",
        {
          _index: 219,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "context.gethandler",
        {
          _index: 218,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "context.switchtohttp().getrequest",
        { _index: 79, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      ["contract", { _index: 975, title: {}, body: { "license.html": {} } }],
      [
        "controller",
        {
          _index: 163,
          title: {
            "controllers/AuthenticationController.html": {},
            "controllers/TaskController.html": {},
          },
          body: {
            "controllers/AuthenticationController.html": {},
            "controllers/TaskController.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        'controller("todos',
        {
          _index: 613,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "controllers",
        {
          _index: 148,
          title: {},
          body: {
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "modules/IamModule.html": {},
            "controllers/TaskController.html": {},
            "modules/TasksModule.html": {},
            "overview.html": {},
          },
        },
      ],
      ["copies", { _index: 944, title: {}, body: { "license.html": {} } }],
      ["copy", { _index: 929, title: {}, body: { "license.html": {} } }],
      ["copyright", { _index: 918, title: {}, body: { "license.html": {} } }],
      [
        "coverage",
        {
          _index: 783,
          title: { "coverage.html": {} },
          body: { "coverage.html": {}, "index.html": {} },
        },
      ],
      [
        "create",
        {
          _index: 642,
          title: {},
          body: {
            "injectables/TaskService.html": {},
            "classes/UpdateTaskDto.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "createat",
        {
          _index: 538,
          title: {},
          body: {
            "entities/Task.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "created",
        {
          _index: 582,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "createdatecolumn",
        { _index: 541, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "createparamdecorator",
        {
          _index: 997,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "creates",
        {
          _index: 440,
          title: {},
          body: {
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "createtask",
        {
          _index: 629,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "createtask(todo",
        {
          _index: 638,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "createtododto",
        {
          _index: 393,
          title: { "classes/CreateTodoDto.html": {} },
          body: {
            "classes/CreateTodoDto.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "classes/UpdateTaskDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "createuser",
        {
          _index: 715,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "createuser(signupdto",
        {
          _index: 719,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "creating",
        {
          _index: 246,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "creation",
        {
          _index: 673,
          title: {},
          body: {
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "credentials",
        {
          _index: 262,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "ctx",
        {
          _index: 1000,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "ctx.switchtohttp().getrequest",
        {
          _index: 1001,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["damages", { _index: 971, title: {}, body: { "license.html": {} } }],
      [
        "data",
        {
          _index: 272,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "data.interface",
        {
          _index: 460,
          title: {},
          body: {
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
          },
        },
      ],
      [
        "data.interface.ts",
        {
          _index: 153,
          title: {},
          body: { "interfaces/AuthUserData.html": {}, "coverage.html": {} },
        },
      ],
      [
        "database",
        {
          _index: 265,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "database/db.module",
        {
          _index: 120,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "databasemodule",
        {
          _index: 108,
          title: { "modules/DatabaseModule.html": {} },
          body: {
            "modules/AppConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "datasource_database",
        { _index: 740, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "datasource_host",
        { _index: 741, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "datasource_password",
        { _index: 742, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "datasource_port",
        { _index: 743, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "datasource_username",
        { _index: 744, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      ["date", { _index: 540, title: {}, body: { "entities/Task.html": {} } }],
      [
        "db.config",
        { _index: 406, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      ["deal", { _index: 932, title: {}, body: { "license.html": {} } }],
      ["dealings", { _index: 979, title: {}, body: { "license.html": {} } }],
      [
        "declarations",
        {
          _index: 102,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "decorators",
        {
          _index: 170,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/IdDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "entities/User.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "decorators/auth.decorators",
        {
          _index: 190,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
          },
        },
      ],
      [
        "default",
        {
          _index: 295,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationDto.html": {},
            "injectables/PasswordService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "defaultauthtype",
        {
          _index: 205,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "defined",
        {
          _index: 36,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "delete",
        {
          _index: 590,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        'delete(":id',
        {
          _index: 623,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "deleted",
        {
          _index: 570,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "deletes",
        {
          _index: 566,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "deletetask",
        {
          _index: 630,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "deletetask(taskid",
        {
          _index: 644,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "deletetodo",
        {
          _index: 559,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "deletetodo(userpayload",
        {
          _index: 563,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "deletion",
        {
          _index: 649,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "dependencies",
        {
          _index: 100,
          title: { "dependencies.html": {} },
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "dependencies.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "desc",
        {
          _index: 487,
          title: {},
          body: {
            "classes/PaginationDto.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "description",
        {
          _index: 8,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "index.html": {},
            "properties.html": {},
          },
        },
      ],
      [
        "details",
        {
          _index: 576,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      ["development", { _index: 879, title: {}, body: { "index.html": {} } }],
      ["distribute", { _index: 940, title: {}, body: { "license.html": {} } }],
      [
        "documentation",
        {
          _index: 784,
          title: {},
          body: { "coverage.html": {}, "license.html": {} },
        },
      ],
      [
        "dto",
        {
          _index: 608,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "dto.ts",
        {
          _index: 428,
          title: {},
          body: { "classes/IdDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "dto.ts:6",
        { _index: 430, title: {}, body: { "classes/IdDto.html": {} } },
      ],
      [
        "dto/create",
        {
          _index: 604,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "dto/sign",
        {
          _index: 730,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "dto/update",
        {
          _index: 606,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "during",
        {
          _index: 376,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["e2e", { _index: 889, title: {}, body: { "index.html": {} } }],
      [
        "each",
        { _index: 352, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      ["efficient", { _index: 867, title: {}, body: { "index.html": {} } }],
      [
        "email",
        {
          _index: 154,
          title: {},
          body: {
            "interfaces/AuthUserData.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "enableimplicitconversion",
        {
          _index: 138,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "encrypted",
        {
          _index: 269,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "encryptedpassword",
        {
          _index: 520,
          title: {},
          body: {
            "injectables/PasswordService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "entities",
        {
          _index: 536,
          title: {},
          body: {
            "entities/Task.html": {},
            "entities/User.html": {},
            "overview.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "entity",
        {
          _index: 280,
          title: { "entities/Task.html": {}, "entities/User.html": {} },
          body: {
            "injectables/AuthenticationService.html": {},
            "entities/Task.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        'entity("todos',
        { _index: 554, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "entity/task.entity",
        {
          _index: 605,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
          },
        },
      ],
      [
        "entity/user.entity",
        {
          _index: 713,
          title: {},
          body: {
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "enum/auth",
        {
          _index: 187,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
          },
        },
      ],
      [
        "enumerations",
        {
          _index: 852,
          title: { "miscellaneous/enumerations.html": {} },
          body: { "miscellaneous/enumerations.html": {} },
        },
      ],
      [
        "env",
        {
          _index: 130,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "envfilepath",
        {
          _index: 129,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "environements/validate.env",
        {
          _index: 122,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "err",
        {
          _index: 230,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "error",
        {
          _index: 313,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "error.code",
        {
          _index: 390,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "error.message",
        {
          _index: 388,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "errors",
        {
          _index: 225,
          title: {},
          body: {
            "guards/AuthenticationGuard.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "errors.cause",
        {
          _index: 236,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "errors.length",
        { _index: 773, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      ["event", { _index: 966, title: {}, body: { "license.html": {} } }],
      ["example", { _index: 876, title: {}, body: { "index.html": {} } }],
      [
        "executioncontext",
        {
          _index: 44,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "exist",
        {
          _index: 614,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "exists",
        {
          _index: 264,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "expiration",
        {
          _index: 453,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "expiresin",
        {
          _index: 468,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "export",
        {
          _index: 72,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "exports",
        {
          _index: 105,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "express",
        {
          _index: 69,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "dependencies.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "extends",
        {
          _index: 395,
          title: {},
          body: {
            "classes/CreateTodoDto.html": {},
            "classes/LogInDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/UpdateTaskDto.html": {},
          },
        },
      ],
      [
        "externals",
        { _index: 849, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "extracted",
        { _index: 58, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "extracts",
        { _index: 51, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "extracttokenfromheader",
        { _index: 30, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "extracttokenfromheader(request",
        { _index: 49, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "failed",
        {
          _index: 306,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "fails",
        {
          _index: 291,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "false",
        {
          _index: 366,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "field",
        {
          _index: 998,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "file",
        {
          _index: 5,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["files", { _index: 931, title: {}, body: { "license.html": {} } }],
      ["fitness", { _index: 962, title: {}, body: { "license.html": {} } }],
      ["following", { _index: 948, title: {}, body: { "license.html": {} } }],
      [
        "forbidnonwhitelisted",
        {
          _index: 135,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      ["fork", { _index: 828, title: {}, body: { "dependencies.html": {} } }],
      [
        "found",
        {
          _index: 59,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["framework", { _index: 865, title: {}, body: { "index.html": {} } }],
      ["free", { _index: 925, title: {}, body: { "license.html": {} } }],
      [
        "function",
        {
          _index: 640,
          title: {},
          body: {
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "functions",
        {
          _index: 858,
          title: { "miscellaneous/functions.html": {} },
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      ["furnished", { _index: 947, title: {}, body: { "license.html": {} } }],
      [
        "generate",
        {
          _index: 471,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "generated",
        {
          _index: 371,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "generates",
        {
          _index: 287,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "generatetoken",
        {
          _index: 435,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "generatetoken(user",
        {
          _index: 437,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "generating",
        {
          _index: 248,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "generation",
        {
          _index: 455,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "getalltasks",
        {
          _index: 670,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "getalltodos",
        {
          _index: 560,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "getalltodos(userpayload",
        {
          _index: 571,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "getdbconfig",
        {
          _index: 405,
          title: {},
          body: {
            "modules/DatabaseModule.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "getting",
        {
          _index: 861,
          title: { "index.html": {}, "license.html": {} },
          body: {},
        },
      ],
      [
        "gettodos",
        {
          _index: 561,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "gettodos(userpayload",
        {
          _index: 579,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "getuserentity",
        {
          _index: 631,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "getuserentity(userid",
        {
          _index: 650,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "given",
        {
          _index: 439,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "granted",
        {
          _index: 162,
          title: {},
          body: { "interfaces/AuthUserData.html": {}, "license.html": {} },
        },
      ],
      ["graph", { _index: 983, title: {}, body: { "modules.html": {} } }],
      ["grow", { _index: 896, title: {}, body: { "index.html": {} } }],
      [
        "guard",
        {
          _index: 0,
          title: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
          },
          body: { "guards/AccessTokenGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "guards",
        {
          _index: 2,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "handling",
        {
          _index: 240,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "hash",
        {
          _index: 307,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
          },
        },
      ],
      [
        "hash(data",
        {
          _index: 368,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
          },
        },
      ],
      [
        "hashalgointerface",
        {
          _index: 373,
          title: { "interfaces/HashAlgoInterface.html": {} },
          body: {
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "hashed",
        {
          _index: 370,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "hashedpassword",
        {
          _index: 302,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "hashes",
        {
          _index: 284,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "hashing",
        {
          _index: 290,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
          },
        },
      ],
      [
        "hashprovider",
        {
          _index: 387,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "haspassword",
        {
          _index: 516,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "haspassword(data",
        {
          _index: 522,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "header",
        { _index: 53, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "headers",
        { _index: 55, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      ["here", { _index: 907, title: {}, body: { "index.html": {} } }],
      ["hereby", { _index: 924, title: {}, body: { "license.html": {} } }],
      ["holders", { _index: 968, title: {}, body: { "license.html": {} } }],
      [
        "host",
        {
          _index: 1004,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "httpcode",
        {
          _index: 591,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "httpcode(httpstatus.no_content",
        {
          _index: 622,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "httpcode(httpstatus.no_content)@delete(':id",
        {
          _index: 564,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "https://nestjs.com",
        { _index: 914, title: {}, body: { "index.html": {} } },
      ],
      [
        "httpstatus",
        {
          _index: 592,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "i${salt",
        {
          _index: 385,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "i${saltrounds",
        {
          _index: 382,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "iam/authenticated",
        {
          _index: 603,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "iam/authentication/decorators/auth.decorators",
        {
          _index: 596,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "iam/authentication/enum/auth",
        {
          _index: 597,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "iam/authentication/guards/access",
        {
          _index: 123,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "iam/decorator/authenticated",
        {
          _index: 601,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "iam/iam.module",
        {
          _index: 126,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
          },
        },
      ],
      [
        "iammodule",
        {
          _index: 125,
          title: { "modules/IamModule.html": {} },
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "iamservice",
        {
          _index: 194,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "id",
        {
          _index: 161,
          title: {},
          body: {
            "interfaces/AuthUserData.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
          },
        },
      ],
      [
        "iddto",
        {
          _index: 426,
          title: { "classes/IdDto.html": {} },
          body: {
            "classes/IdDto.html": {},
            "controllers/TaskController.html": {},
            "coverage.html": {},
          },
        },
      ],
      ["identifier", { _index: 785, title: {}, body: { "coverage.html": {} } }],
      [
        "ifemailused",
        {
          _index: 716,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "ifemailused(email",
        {
          _index: 725,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "implements",
        {
          _index: 74,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/BcryptProvider.html": {},
          },
        },
      ],
      ["implied", { _index: 958, title: {}, body: { "license.html": {} } }],
      [
        "import",
        {
          _index: 60,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "imports",
        {
          _index: 114,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "in.dto",
        {
          _index: 185,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "in.dto.ts",
        {
          _index: 473,
          title: {},
          body: { "classes/LogInDto.html": {}, "coverage.html": {} },
        },
      ],
      ["included", { _index: 953, title: {}, body: { "license.html": {} } }],
      [
        "includes",
        {
          _index: 447,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "including",
        {
          _index: 656,
          title: {},
          body: { "injectables/TaskService.html": {}, "license.html": {} },
        },
      ],
      [
        "index",
        {
          _index: 22,
          title: { "index.html": {} },
          body: {
            "guards/AccessTokenGuard.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "info",
        {
          _index: 3,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "information",
        {
          _index: 16,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "controllers/TaskController.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "inherited",
        {
          _index: 396,
          title: {},
          body: {
            "classes/CreateTodoDto.html": {},
            "classes/SignUpDto.html": {},
          },
        },
      ],
      [
        "inject",
        {
          _index: 61,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/DatabaseModule.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "inject(jwtconfig.key",
        {
          _index: 77,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "injectable",
        {
          _index: 62,
          title: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "injectables",
        {
          _index: 237,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "injectrepository",
        {
          _index: 662,
          title: {},
          body: {
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "injectrepository(task",
        {
          _index: 663,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "injectrepository(user",
        {
          _index: 664,
          title: {},
          body: {
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["installation", { _index: 875, title: {}, body: { "index.html": {} } }],
      [
        "installrunning",
        { _index: 878, title: {}, body: { "index.html": {} } },
      ],
      [
        "instance",
        {
          _index: 226,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "instance.canactivate(context",
        {
          _index: 228,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "interface",
        {
          _index: 149,
          title: {
            "interfaces/AuthUserData.html": {},
            "interfaces/HashAlgoInterface.html": {},
          },
          body: {
            "interfaces/AuthUserData.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "interfaces",
        {
          _index: 151,
          title: {},
          body: {
            "interfaces/AuthUserData.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "internalservererrorexception",
        {
          _index: 289,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        'internalservererrorexception("database',
        {
          _index: 312,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        'internalservererrorexception("failed',
        {
          _index: 682,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        'internalservererrorexception("validation',
        { _index: 780, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "invalid",
        {
          _index: 19,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "isemail",
        { _index: 350, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "isglobal",
        {
          _index: 128,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      ["isint", { _index: 431, title: {}, body: { "classes/IdDto.html": {} } }],
      [
        "isnotempty",
        {
          _index: 335,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "isnotempty()@isemail",
        {
          _index: 343,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
          },
        },
      ],
      [
        "isnotempty()@isstring",
        {
          _index: 329,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "isnumber",
        { _index: 764, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "isnumber()@ispositive",
        { _index: 750, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "isoptional",
        { _index: 493, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "isoptional()@isstring",
        { _index: 488, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "isoptional()@type(undefined)@ispositive",
        { _index: 484, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "ispositive",
        {
          _index: 432,
          title: {},
          body: {
            "classes/IdDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "ispositive()@isint",
        { _index: 429, title: {}, body: { "classes/IdDto.html": {} } },
      ],
      [
        "issamepassword",
        {
          _index: 318,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "isstring",
        {
          _index: 336,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "isstrongpassword",
        { _index: 530, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "issuer",
        {
          _index: 452,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      ["join", { _index: 903, title: {}, body: { "index.html": {} } }],
      ["jordach", { _index: 921, title: {}, body: { "license.html": {} } }],
      [
        "json",
        {
          _index: 441,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "jwt",
        {
          _index: 249,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "jwt_secret",
        { _index: 745, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "jwt_token_audience",
        { _index: 746, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "jwt_token_issuer",
        { _index: 747, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "jwt_token_ttl",
        { _index: 748, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "jwtconfig",
        {
          _index: 65,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "jwtconfiguration",
        {
          _index: 34,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "jwtmodule",
        { _index: 419, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "jwtmodule.registerasync(jwtconfig.asprovider",
        { _index: 423, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "jwtservice",
        {
          _index: 33,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "jwttokenprovider",
        {
          _index: 254,
          title: { "injectables/JwtTokenProvider.html": {} },
          body: {
            "injectables/AuthenticationService.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      ["kamil", { _index: 911, title: {}, body: { "index.html": {} } }],
      [
        "keyof",
        {
          _index: 999,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["kind", { _index: 957, title: {}, body: { "license.html": {} } }],
      [
        "legend",
        {
          _index: 101,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      ["liability", { _index: 972, title: {}, body: { "license.html": {} } }],
      ["liable", { _index: 969, title: {}, body: { "license.html": {} } }],
      [
        "license",
        {
          _index: 917,
          title: { "license.html": {} },
          body: { "index.html": {}, "license.html": {}, "properties.html": {} },
        },
      ],
      ["licensed", { _index: 893, title: {}, body: { "index.html": {} } }],
      [
        "limit",
        {
          _index: 479,
          title: {},
          body: {
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      ["limitation", { _index: 935, title: {}, body: { "license.html": {} } }],
      ["limited", { _index: 959, title: {}, body: { "license.html": {} } }],
      [
        "logged",
        {
          _index: 456,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "logger",
        {
          _index: 26,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        'logger("accesstokenguard',
        { _index: 76, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        'logger("authenticationcontroller',
        {
          _index: 192,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        'logger("authenticationguard',
        {
          _index: 211,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        'logger("iamhashprovider',
        {
          _index: 372,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        'logger("iamservice',
        {
          _index: 296,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        'logger("jwttokenprovider',
        {
          _index: 458,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        'logger("taskservice',
        {
          _index: 661,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        'logger("usersservice',
        {
          _index: 729,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        'logger("validate',
        { _index: 767, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "logger(passwordservice.name",
        {
          _index: 524,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "logger.debug(`${errors.tostring",
        { _index: 779, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        'logger.log("all',
        { _index: 781, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "logger.log(`${errors.length",
        { _index: 775, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "login",
        {
          _index: 166,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "login(@body",
        {
          _index: 199,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "login(logindto",
        {
          _index: 168,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "logindto",
        {
          _index: 169,
          title: { "classes/LogInDto.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/LogInDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "logindto.password",
        {
          _index: 321,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "logs",
        {
          _index: 259,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["makaya", { _index: 922, title: {}, body: { "license.html": {} } }],
      [
        "manytoone",
        { _index: 552, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "manytoone(undefined",
        { _index: 550, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "matches",
        {
          _index: 365,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "matching",
        {
          _index: 96,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "math.ceil(totalcount",
        {
          _index: 668,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "merchantability",
        { _index: 961, title: {}, body: { "license.html": {} } },
      ],
      ["merge", { _index: 938, title: {}, body: { "license.html": {} } }],
      [
        "message",
        {
          _index: 271,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "metadata",
        { _index: 840, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "method",
        {
          _index: 263,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "methods",
        {
          _index: 27,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "miscellaneous",
        {
          _index: 851,
          title: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
          body: {
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "missing",
        { _index: 776, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "mit",
        {
          _index: 892,
          title: {},
          body: { "index.html": {}, "license.html": {} },
        },
      ],
      ["mode", { _index: 882, title: {}, body: { "index.html": {} } }],
      ["modify", { _index: 937, title: {}, body: { "license.html": {} } }],
      [
        "module",
        {
          _index: 97,
          title: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
          },
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "coverage.html": {},
            "overview.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "modules",
        {
          _index: 99,
          title: { "modules.html": {} },
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      ["more", { _index: 906, title: {}, body: { "index.html": {} } }],
      ["myśliwiec", { _index: 912, title: {}, body: { "index.html": {} } }],
      [
        "name",
        {
          _index: 40,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      ["nest", { _index: 872, title: {}, body: { "index.html": {} } }],
      ["nestframework", { _index: 916, title: {}, body: { "index.html": {} } }],
      [
        "nestjs/common",
        {
          _index: 63,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/config",
        {
          _index: 68,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "injectables/BcryptProvider.html": {},
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/core",
        {
          _index: 119,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "guards/AuthenticationGuard.html": {},
            "modules/IamModule.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/jwt",
        {
          _index: 64,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/mapped",
        {
          _index: 476,
          title: {},
          body: {
            "classes/LogInDto.html": {},
            "classes/UpdateTaskDto.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "nestjs/platform",
        { _index: 823, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "nestjs/typeorm",
        {
          _index: 404,
          title: {},
          body: {
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "new",
        {
          _index: 75,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "newly",
        {
          _index: 293,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "newuser",
        {
          _index: 734,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "nextpage",
        {
          _index: 499,
          title: {},
          body: {
            "classes/PaginationResultDto.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      ["node", { _index: 848, title: {}, body: { "dependencies.html": {} } }],
      ["node.js", { _index: 864, title: {}, body: { "index.html": {} } }],
      [
        "none",
        {
          _index: 857,
          title: {},
          body: { "miscellaneous/enumerations.html": {} },
        },
      ],
      [
        "noninfringement",
        { _index: 965, title: {}, body: { "license.html": {} } },
      ],
      [
        "notfoundexception",
        {
          _index: 593,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        'notfoundexception("user',
        {
          _index: 618,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "notfoundexception(`not",
        {
          _index: 625,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "notfoundexception(`task",
        {
          _index: 680,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      ["notice", { _index: 951, title: {}, body: { "license.html": {} } }],
      [
        "null",
        {
          _index: 615,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "number",
        {
          _index: 157,
          title: {},
          body: {
            "interfaces/AuthUserData.html": {},
            "classes/IdDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "entities/Task.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "object",
        {
          _index: 18,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "object.assign(this",
        {
          _index: 513,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      ["obtaining", { _index: 928, title: {}, body: { "license.html": {} } }],
      [
        "occurred",
        {
          _index: 233,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "occurs",
        {
          _index: 375,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "omittype",
        { _index: 475, title: {}, body: { "classes/LogInDto.html": {} } },
      ],
      [
        "omittype(signupdto",
        { _index: 474, title: {}, body: { "classes/LogInDto.html": {} } },
      ],
      [
        "once",
        {
          _index: 569,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "ondelete",
        { _index: 703, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "onetomany",
        { _index: 706, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "onetomany(undefined",
        { _index: 701, title: {}, body: { "entities/User.html": {} } },
      ],
      ["open", { _index: 894, title: {}, body: { "index.html": {} } }],
      [
        "operation",
        {
          _index: 723,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "operations",
        {
          _index: 242,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "optional",
        {
          _index: 42,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "options",
        {
          _index: 770,
          title: {},
          body: {
            "classes/ValidateEnv.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "order",
        {
          _index: 480,
          title: {},
          body: {
            "classes/PaginationDto.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "organize",
        { _index: 837, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "otherwise",
        {
          _index: 367,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "out",
        {
          _index: 111,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "license.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "overview",
        {
          _index: 985,
          title: { "overview.html": {} },
          body: { "overview.html": {} },
        },
      ],
      [
        "package",
        {
          _index: 816,
          title: { "dependencies.html": {}, "properties.html": {} },
          body: {},
        },
      ],
      [
        "page",
        {
          _index: 481,
          title: {},
          body: {
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "paginated",
        {
          _index: 577,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "paginates",
        {
          _index: 574,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "paginatetasksforuser",
        {
          _index: 632,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "paginatetasksforuser(paginationdto",
        {
          _index: 654,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "pagination",
        {
          _index: 497,
          title: {},
          body: {
            "classes/PaginationResultDto.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "paginationdto",
        {
          _index: 477,
          title: { "classes/PaginationDto.html": {} },
          body: {
            "classes/PaginationDto.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "paginationresultdto",
        {
          _index: 495,
          title: { "classes/PaginationResultDto.html": {} },
          body: {
            "classes/PaginationResultDto.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "param",
        {
          _index: 92,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "parameters",
        {
          _index: 38,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "partial",
        {
          _index: 504,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "partialtype",
        { _index: 694, title: {}, body: { "classes/UpdateTaskDto.html": {} } },
      ],
      [
        "partialtype(createtododto",
        { _index: 693, title: {}, body: { "classes/UpdateTaskDto.html": {} } },
      ],
      ["particular", { _index: 963, title: {}, body: { "license.html": {} } }],
      [
        "password",
        {
          _index: 267,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/SignUpDto.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "password/bcrypt.provider",
        { _index: 417, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "password/password.service",
        {
          _index: 297,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      [
        "passwordservice",
        {
          _index: 253,
          title: { "injectables/PasswordService.html": {} },
          body: {
            "injectables/AuthenticationService.html": {},
            "modules/IamModule.html": {},
            "injectables/PasswordService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "payload",
        {
          _index: 443,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "per",
        { _index: 494, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "performing",
        {
          _index: 660,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      ["permission", { _index: 923, title: {}, body: { "license.html": {} } }],
      ["permit", { _index: 945, title: {}, body: { "license.html": {} } }],
      ["person", { _index: 927, title: {}, body: { "license.html": {} } }],
      ["persons", { _index: 946, title: {}, body: { "license.html": {} } }],
      ["pg", { _index: 834, title: {}, body: { "dependencies.html": {} } }],
      [
        "plaintoinstance",
        { _index: 763, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "plaintoinstance(validateenv",
        { _index: 769, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      ["please", { _index: 904, title: {}, body: { "index.html": {} } }],
      ["plugin", { _index: 832, title: {}, body: { "dependencies.html": {} } }],
      [
        "port",
        {
          _index: 1006,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["portions", { _index: 955, title: {}, body: { "license.html": {} } }],
      [
        "post",
        {
          _index: 179,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "controllers/TaskController.html": {},
          },
        },
      ],
      [
        'post("login',
        {
          _index: 198,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        'post("register',
        {
          _index: 195,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "post('login",
        {
          _index: 171,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "post('register",
        {
          _index: 176,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "postgres",
        {
          _index: 1003,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "prefix",
        {
          _index: 557,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "prettier",
        { _index: 836, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "previouspage",
        {
          _index: 500,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "primarygeneratedcolumn",
        {
          _index: 545,
          title: {},
          body: { "entities/Task.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "private",
        {
          _index: 24,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "process",
        {
          _index: 377,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      ["production", { _index: 884, title: {}, body: { "index.html": {} } }],
      ["progressive", { _index: 863, title: {}, body: { "index.html": {} } }],
      ["project", { _index: 895, title: {}, body: { "index.html": {} } }],
      [
        "promise",
        {
          _index: 48,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "promise.resolve",
        {
          _index: 227,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "proper",
        { _index: 777, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "properties",
        {
          _index: 23,
          title: { "properties.html": {} },
          body: {
            "guards/AccessTokenGuard.html": {},
            "interfaces/AuthUserData.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "properties.html": {},
          },
        },
      ],
      [
        "property",
        {
          _index: 160,
          title: {},
          body: { "interfaces/AuthUserData.html": {} },
        },
      ],
      [
        "provide",
        {
          _index: 132,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      [
        "provided",
        {
          _index: 261,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "provider",
        {
          _index: 308,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "providers",
        {
          _index: 104,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "provides",
        {
          _index: 243,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["publish", { _index: 939, title: {}, body: { "license.html": {} } }],
      ["purpose", { _index: 964, title: {}, body: { "license.html": {} } }],
      [
        "put",
        {
          _index: 594,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        'put(":id',
        {
          _index: 620,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "put(':id",
        {
          _index: 585,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "query",
        {
          _index: 595,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "querying",
        {
          _index: 728,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      ["read", { _index: 905, title: {}, body: { "index.html": {} } }],
      [
        "readonly",
        {
          _index: 25,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "record",
        {
          _index: 213,
          title: {},
          body: {
            "guards/AuthenticationGuard.html": {},
            "classes/ValidateEnv.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "reflect",
        { _index: 839, title: {}, body: { "dependencies.html": {} } },
      ],
      [
        "reflector",
        {
          _index: 207,
          title: {},
          body: {
            "guards/AuthenticationGuard.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      [
        "registered",
        {
          _index: 294,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "registers",
        {
          _index: 279,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "registration",
        {
          _index: 167,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "registration(@body",
        {
          _index: 196,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "registration(signupdto",
        {
          _index: 174,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "repository",
        {
          _index: 286,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "request",
        {
          _index: 17,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "request.headers.authorization?.split",
        { _index: 94, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "request[request_user_key",
        {
          _index: 85,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "request_user_key",
        {
          _index: 70,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "requesting",
        {
          _index: 648,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "reset",
        {
          _index: 110,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "resolves",
        {
          _index: 275,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["restriction", { _index: 934, title: {}, body: { "license.html": {} } }],
      [
        "result",
        {
          _index: 578,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "result.affected",
        {
          _index: 685,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "result.dto",
        {
          _index: 611,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "result.dto.ts",
        {
          _index: 498,
          title: {},
          body: { "classes/PaginationResultDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "result.dto.ts:2",
        {
          _index: 507,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "result.dto.ts:3",
        {
          _index: 510,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "result.dto.ts:4",
        {
          _index: 508,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "result.dto.ts:5",
        {
          _index: 511,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "result.dto.ts:6",
        {
          _index: 512,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "result.dto.ts:7",
        {
          _index: 509,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "result.dto.ts:8",
        {
          _index: 505,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      [
        "results",
        {
          _index: 95,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
            "dependencies.html": {},
            "miscellaneous/enumerations.html": {},
            "miscellaneous/functions.html": {},
            "index.html": {},
            "license.html": {},
            "modules.html": {},
            "overview.html": {},
            "properties.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "retrieve",
        {
          _index: 653,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "retrieves",
        {
          _index: 573,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "return",
        {
          _index: 90,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "returns",
        {
          _index: 47,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/PasswordService.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      ["rights", { _index: 936, title: {}, body: { "license.html": {} } }],
      [
        "run",
        {
          _index: 842,
          title: {},
          body: { "dependencies.html": {}, "index.html": {} },
        },
      ],
      ["rxjs", { _index: 845, title: {}, body: { "dependencies.html": {} } }],
      [
        "salt",
        {
          _index: 383,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "salt_round",
        { _index: 749, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "saltrounds",
        {
          _index: 378,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "save",
        {
          _index: 311,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "saveduser",
        {
          _index: 309,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "saves",
        {
          _index: 285,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "saving",
        {
          _index: 292,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["scalable", { _index: 868, title: {}, body: { "index.html": {} } }],
      ["script", { _index: 843, title: {}, body: { "dependencies.html": {} } }],
      [
        "secret",
        {
          _index: 446,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "security",
        {
          _index: 724,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      ["sell", { _index: 943, title: {}, body: { "license.html": {} } }],
      ["server", { _index: 869, title: {}, body: { "index.html": {} } }],
      [
        "service",
        {
          _index: 239,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "setmetadata(auth_type_key",
        {
          _index: 996,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      ["shall", { _index: 952, title: {}, body: { "license.html": {} } }],
      ["side", { _index: 870, title: {}, body: { "index.html": {} } }],
      [
        "sign",
        {
          _index: 281,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "classes/LogInDto.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "signed",
        {
          _index: 444,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "signin",
        {
          _index: 317,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "signup",
        {
          _index: 316,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "signupdto",
        {
          _index: 175,
          title: { "classes/SignUpDto.html": {} },
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/LogInDto.html": {},
            "classes/SignUpDto.html": {},
            "injectables/UsersService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "signupdto.password",
        {
          _index: 304,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "skip",
        {
          _index: 666,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "skipmissingproperties",
        { _index: 772, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      ["software", { _index: 930, title: {}, body: { "license.html": {} } }],
      [
        "somme",
        {
          _index: 232,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "sortby",
        { _index: 482, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "source",
        {
          _index: 4,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/DatabaseModule.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "modules/IamModule.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/LogInDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "classes/UpdateTaskDto.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "index.html": {},
          },
        },
      ],
      [
        "specific",
        {
          _index: 575,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "specified",
        {
          _index: 445,
          title: {},
          body: {
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      ["sponsors", { _index: 898, title: {}, body: { "index.html": {} } }],
      [
        "src/.../auth",
        {
          _index: 853,
          title: {},
          body: { "miscellaneous/enumerations.html": {} },
        },
      ],
      [
        "src/.../auth.decorators.ts",
        {
          _index: 992,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/.../authenticated",
        {
          _index: 993,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/.../db.config.ts",
        {
          _index: 994,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/.../main.ts",
        {
          _index: 859,
          title: {},
          body: {
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/.../user.key.ts",
        {
          _index: 995,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/.../validate.env.ts",
        {
          _index: 860,
          title: {},
          body: { "miscellaneous/functions.html": {} },
        },
      ],
      [
        "src/app",
        {
          _index: 112,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/DatabaseModule.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/app.module.ts",
        { _index: 144, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "src/common/dto/id",
        {
          _index: 427,
          title: {},
          body: { "classes/IdDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/common/pagination/generic",
        {
          _index: 496,
          title: {},
          body: { "classes/PaginationResultDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/common/pagination/pagination.dto.ts",
        {
          _index: 478,
          title: {},
          body: { "classes/PaginationDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/common/pagination/pagination.dto.ts:12",
        { _index: 485, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "src/common/pagination/pagination.dto.ts:15",
        { _index: 492, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "src/common/pagination/pagination.dto.ts:18",
        { _index: 489, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "src/common/pagination/pagination.dto.ts:8",
        { _index: 491, title: {}, body: { "classes/PaginationDto.html": {} } },
      ],
      [
        "src/iam/authenticated",
        {
          _index: 152,
          title: {},
          body: { "interfaces/AuthUserData.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/iam/authentication.service.ts",
        {
          _index: 238,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/iam/authentication.service.ts:23",
        {
          _index: 255,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "src/iam/authentication.service.ts:40",
        {
          _index: 278,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "src/iam/authentication.service.ts:77",
        {
          _index: 257,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "src/iam/authentication/authentication.controller.ts",
        {
          _index: 165,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/iam/authentication/authentication.controller.ts:15",
        {
          _index: 177,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "src/iam/authentication/authentication.controller.ts:20",
        {
          _index: 172,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "src/iam/authentication/constants/user.key.ts",
        {
          _index: 799,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/iam/authentication/decorators/auth.decorators.ts",
        {
          _index: 800,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/iam/authentication/enum/auth",
        {
          _index: 855,
          title: {},
          body: { "miscellaneous/enumerations.html": {} },
        },
      ],
      [
        "src/iam/authentication/guards/access",
        {
          _index: 6,
          title: {},
          body: { "guards/AccessTokenGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/iam/authentication/guards/authentication.guard.ts",
        {
          _index: 202,
          title: {},
          body: { "guards/AuthenticationGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/iam/authentication/guards/authentication.guard.ts:24",
        {
          _index: 208,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "src/iam/authentication/guards/authentication.guard.ts:30",
        {
          _index: 209,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "src/iam/decorator/authenticated",
        {
          _index: 804,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "src/iam/iam.module.ts",
        { _index: 416, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "src/iam/jwt",
        {
          _index: 433,
          title: {},
          body: {
            "injectables/JwtTokenProvider.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/iam/password/bcrypt.provider.ts",
        {
          _index: 354,
          title: {},
          body: { "injectables/BcryptProvider.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/iam/password/bcrypt.provider.ts:20",
        {
          _index: 359,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "src/iam/password/bcrypt.provider.ts:30",
        {
          _index: 369,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "src/iam/password/bcrypt.provider.ts:53",
        {
          _index: 362,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "src/iam/password/hash",
        {
          _index: 409,
          title: {},
          body: {
            "interfaces/HashAlgoInterface.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "src/iam/password/password.service.ts",
        {
          _index: 514,
          title: {},
          body: { "injectables/PasswordService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/iam/password/password.service.ts:12",
        {
          _index: 521,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "src/iam/password/password.service.ts:6",
        {
          _index: 518,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "src/iam/password/password.service.ts:9",
        {
          _index: 523,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "src/main.ts",
        {
          _index: 808,
          title: {},
          body: {
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "src/tasks/dto/base",
        {
          _index: 326,
          title: {},
          body: { "classes/BaseTodoDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/tasks/dto/create",
        {
          _index: 394,
          title: {},
          body: { "classes/CreateTodoDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/tasks/dto/update",
        {
          _index: 692,
          title: {},
          body: { "classes/UpdateTaskDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/tasks/entity/task.entity.ts",
        {
          _index: 537,
          title: {},
          body: { "entities/Task.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/tasks/entity/task.entity.ts:14",
        { _index: 546, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "src/tasks/entity/task.entity.ts:16",
        { _index: 547, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "src/tasks/entity/task.entity.ts:18",
        { _index: 544, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "src/tasks/entity/task.entity.ts:20",
        { _index: 551, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "src/tasks/entity/task.entity.ts:23",
        { _index: 542, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "src/tasks/entity/task.entity.ts:25",
        { _index: 549, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "src/tasks/task.controller.ts",
        {
          _index: 556,
          title: {},
          body: { "controllers/TaskController.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/tasks/task.controller.ts:110",
        {
          _index: 572,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "src/tasks/task.controller.ts:41",
        {
          _index: 580,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "src/tasks/task.controller.ts:64",
        {
          _index: 586,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "src/tasks/task.controller.ts:88",
        {
          _index: 565,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "src/tasks/task.service.ts",
        {
          _index: 628,
          title: {},
          body: { "injectables/TaskService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/tasks/task.service.ts:111",
        {
          _index: 659,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "src/tasks/task.service.ts:143",
        {
          _index: 645,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "src/tasks/task.service.ts:18",
        {
          _index: 636,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "src/tasks/task.service.ts:32",
        {
          _index: 655,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "src/tasks/task.service.ts:75",
        {
          _index: 639,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "src/tasks/task.service.ts:92",
        {
          _index: 651,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "src/tasks/tasks.module.ts",
        { _index: 689, title: {}, body: { "modules/TasksModule.html": {} } },
      ],
      [
        "src/users/dto/base",
        {
          _index: 340,
          title: {},
          body: { "classes/BaseUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/dto/log",
        {
          _index: 472,
          title: {},
          body: { "classes/LogInDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/dto/sign",
        {
          _index: 528,
          title: {},
          body: { "classes/SignUpDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/entity/user.entity.ts",
        {
          _index: 695,
          title: {},
          body: { "entities/User.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/entity/user.entity.ts:11",
        { _index: 697, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "src/users/entity/user.entity.ts:13",
        { _index: 700, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "src/users/entity/user.entity.ts:15",
        { _index: 705, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "src/users/entity/user.entity.ts:7",
        { _index: 698, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "src/users/entity/user.entity.ts:9",
        { _index: 699, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "src/users/users.module.ts",
        { _index: 711, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      [
        "src/users/users.service.ts",
        {
          _index: 714,
          title: {},
          body: { "injectables/UsersService.html": {}, "coverage.html": {} },
        },
      ],
      [
        "src/users/users.service.ts:13",
        {
          _index: 718,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "src/users/users.service.ts:24",
        {
          _index: 726,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "src/users/users.service.ts:46",
        {
          _index: 720,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      ["start", { _index: 880, title: {}, body: { "index.html": {} } }],
      ["start:dev", { _index: 883, title: {}, body: { "index.html": {} } }],
      [
        "start:prodtest",
        { _index: 885, title: {}, body: { "index.html": {} } },
      ],
      [
        "started",
        {
          _index: 862,
          title: { "index.html": {}, "license.html": {} },
          body: {},
        },
      ],
      ["starter", { _index: 874, title: {}, body: { "index.html": {} } }],
      ["statements", { _index: 786, title: {}, body: { "coverage.html": {} } }],
      [
        "static",
        {
          _index: 204,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      ["stay", { _index: 908, title: {}, body: { "index.html": {} } }],
      [
        "stored",
        {
          _index: 268,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "storeduser",
        {
          _index: 300,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "storeduser.password",
        {
          _index: 322,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "string",
        {
          _index: 56,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "interfaces/AuthUserData.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/PaginationDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "sub",
        {
          _index: 155,
          title: {},
          body: {
            "interfaces/AuthUserData.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "subject",
        {
          _index: 158,
          title: {},
          body: { "interfaces/AuthUserData.html": {}, "license.html": {} },
        },
      ],
      [
        "subject's",
        {
          _index: 156,
          title: {},
          body: { "interfaces/AuthUserData.html": {} },
        },
      ],
      ["sublicense", { _index: 941, title: {}, body: { "license.html": {} } }],
      ["substantial", { _index: 954, title: {}, body: { "license.html": {} } }],
      [
        "success",
        {
          _index: 270,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "successful",
        {
          _index: 277,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "successfully",
        { _index: 782, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "such",
        {
          _index: 450,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "support",
        {
          _index: 899,
          title: {},
          body: { "index.html": {}, "modules.html": {} },
        },
      ],
      ["svg", { _index: 981, title: {}, body: { "modules.html": {} } }],
      [
        "synchronize",
        {
          _index: 1012,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "system",
        {
          _index: 721,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "t",
        {
          _index: 506,
          title: {},
          body: { "classes/PaginationResultDto.html": {} },
        },
      ],
      ["table", { _index: 815, title: {}, body: { "coverage.html": {} } }],
      [
        "tablesort(document.getelementbyid('coverage",
        { _index: 814, title: {}, body: { "coverage.html": {} } },
      ],
      [
        "take",
        {
          _index: 667,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "takes",
        {
          _index: 722,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "task",
        {
          _index: 346,
          title: { "entities/Task.html": {} },
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "entities/User.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "task.controller",
        { _index: 690, title: {}, body: { "modules/TasksModule.html": {} } },
      ],
      [
        "task.service",
        {
          _index: 599,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "modules/TasksModule.html": {},
          },
        },
      ],
      [
        "task.user",
        { _index: 702, title: {}, body: { "entities/User.html": {} } },
      ],
      [
        "taskcontroller",
        {
          _index: 555,
          title: { "controllers/TaskController.html": {} },
          body: {
            "controllers/TaskController.html": {},
            "modules/TasksModule.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "taskid",
        {
          _index: 647,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "taskrepository",
        {
          _index: 637,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "tasks",
        {
          _index: 342,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/LogInDto.html": {},
            "classes/SignUpDto.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
          },
        },
      ],
      [
        "tasks/entity/task.entity",
        {
          _index: 349,
          title: {},
          body: { "classes/BaseUserDto.html": {}, "entities/User.html": {} },
        },
      ],
      [
        "tasks/tasks.module",
        { _index: 147, title: {}, body: { "modules/AppModule.html": {} } },
      ],
      [
        "taskservice",
        {
          _index: 598,
          title: { "injectables/TaskService.html": {} },
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "tasksmodule",
        {
          _index: 142,
          title: { "modules/TasksModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/TasksModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      ["test", { _index: 888, title: {}, body: { "index.html": {} } }],
      [
        "test:covsupport",
        { _index: 891, title: {}, body: { "index.html": {} } },
      ],
      ["test:e2e", { _index: 890, title: {}, body: { "index.html": {} } }],
      ["tests", { _index: 887, title: {}, body: { "index.html": {} } }],
      ["thanks", { _index: 897, title: {}, body: { "index.html": {} } }],
      [
        "this.accesstokenguard",
        {
          _index: 214,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "this.authtypeguardmap[type]).flat",
        {
          _index: 224,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "this.bcryptprovider.compare(data",
        {
          _index: 527,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        "this.bcryptprovider.hash(data",
        {
          _index: 526,
          title: {},
          body: { "injectables/PasswordService.html": {} },
        },
      ],
      [
        'this.configservice.getorthrow("salt_round',
        {
          _index: 379,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "this.extracttokenfromheader(request",
        { _index: 80, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "this.iamservice.login(logindto",
        {
          _index: 200,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "this.iamservice.registration(signupdto",
        {
          _index: 197,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "this.jwtconfiguration",
        { _index: 88, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "this.jwtconfiguration.accesstokenttl",
        {
          _index: 469,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "this.jwtconfiguration.audience",
        {
          _index: 465,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "this.jwtconfiguration.issuer",
        {
          _index: 466,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "this.jwtconfiguration.secret",
        {
          _index: 467,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "this.jwtservice.signasync",
        {
          _index: 462,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "this.jwtservice.verifyasync",
        { _index: 87, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "this.jwttokenprovider.generatetoken(saveduser",
        {
          _index: 314,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.jwttokenprovider.generatetoken(storeduser",
        {
          _index: 323,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        'this.logger.error("failed',
        {
          _index: 669,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.logger.error(`code",
        {
          _index: 676,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.logger.error(`error",
        {
          _index: 671,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.logger.log",
        {
          _index: 231,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        'this.logger.log("failed',
        {
          _index: 470,
          title: {},
          body: {
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        'this.logger.log("iam',
        {
          _index: 305,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "this.logger.log(`code",
        {
          _index: 389,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "this.logger.log(`iam",
        {
          _index: 381,
          title: {},
          body: { "injectables/BcryptProvider.html": {} },
        },
      ],
      [
        "this.logger.log(`task",
        {
          _index: 686,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.logger.warn",
        { _index: 81, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "this.logger.warn(`${error.code",
        {
          _index: 733,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "this.passwordservice.comparepassword",
        {
          _index: 320,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.passwordservice.haspassword",
        {
          _index: 303,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.reflector.getallandoverride",
        {
          _index: 217,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      [
        "this.taskrepository.create",
        {
          _index: 674,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.taskrepository.delete(taskid",
        {
          _index: 684,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.taskrepository.findandcount",
        {
          _index: 665,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.taskrepository.findoneby",
        {
          _index: 683,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.taskrepository.preload",
        {
          _index: 679,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.taskrepository.save(task",
        {
          _index: 675,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.taskrepository.save(updatedtask",
        {
          _index: 681,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.taskservice.createtask(todo",
        {
          _index: 619,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "this.taskservice.deletetask(id",
        {
          _index: 624,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "this.taskservice.getuserentity",
        {
          _index: 616,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "this.taskservice.paginatetasksforuser(paginationdto",
        {
          _index: 627,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "this.taskservice.updatetask(id",
        {
          _index: 621,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "this.userrepository.create",
        {
          _index: 735,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "this.userrepository.findone",
        {
          _index: 732,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "this.userrepository.findoneby",
        {
          _index: 677,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "this.userrepository.save(newuser",
        {
          _index: 736,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      [
        "this.userservice.createuser",
        {
          _index: 310,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.userservice.ifemailused(logindto.email",
        {
          _index: 315,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "this.userservice.ifemailused(signupdto.email",
        {
          _index: 301,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "throw",
        {
          _index: 83,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
          },
        },
      ],
      [
        "thrown",
        {
          _index: 457,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "throws",
        {
          _index: 20,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "time",
        {
          _index: 454,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "title",
        {
          _index: 328,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
            "entities/Task.html": {},
          },
        },
      ],
      [
        "todo",
        {
          _index: 567,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "todo.dto",
        {
          _index: 401,
          title: {},
          body: {
            "classes/CreateTodoDto.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "classes/UpdateTaskDto.html": {},
          },
        },
      ],
      [
        "todo.dto.ts",
        {
          _index: 327,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
            "classes/UpdateTaskDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "todo.dto.ts:11",
        { _index: 330, title: {}, body: { "classes/BaseTodoDto.html": {} } },
      ],
      [
        "todo.dto.ts:13",
        { _index: 333, title: {}, body: { "classes/BaseTodoDto.html": {} } },
      ],
      [
        "todo.dto.ts:8",
        { _index: 331, title: {}, body: { "classes/BaseTodoDto.html": {} } },
      ],
      [
        "todos",
        {
          _index: 558,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "token",
        {
          _index: 12,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "interfaces/AuthUserData.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/JwtTokenProvider.html": {},
          },
        },
      ],
      [
        "token.guard",
        {
          _index: 124,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "guards/AuthenticationGuard.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      [
        "token.guard.ts",
        {
          _index: 7,
          title: {},
          body: { "guards/AccessTokenGuard.html": {}, "coverage.html": {} },
        },
      ],
      [
        "token.guard.ts:22",
        { _index: 37, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "token.guard.ts:30",
        { _index: 45, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "token.guard.ts:53",
        { _index: 50, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "token.provider",
        {
          _index: 298,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "modules/IamModule.html": {},
          },
        },
      ],
      [
        "token.provider.ts",
        {
          _index: 434,
          title: {},
          body: {
            "injectables/JwtTokenProvider.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "token.provider.ts:15",
        {
          _index: 436,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "token.provider.ts:34",
        {
          _index: 438,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "tokens",
        {
          _index: 250,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["tort", { _index: 976, title: {}, body: { "license.html": {} } }],
      [
        "totalcount",
        {
          _index: 501,
          title: {},
          body: {
            "classes/PaginationResultDto.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "totalpages",
        {
          _index: 502,
          title: {},
          body: {
            "classes/PaginationResultDto.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      ["touch", { _index: 909, title: {}, body: { "index.html": {} } }],
      [
        "transfer",
        {
          _index: 273,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "transform",
        {
          _index: 136,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "transformer",
        {
          _index: 338,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/ValidateEnv.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "transformoptions",
        {
          _index: 137,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "true",
        {
          _index: 91,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "modules/AppConfigModule.html": {},
            "guards/AuthenticationGuard.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/SignUpDto.html": {},
            "entities/User.html": {},
            "classes/ValidateEnv.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "try",
        {
          _index: 84,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "trying",
        {
          _index: 234,
          title: {},
          body: { "guards/AuthenticationGuard.html": {} },
        },
      ],
      ["ts", { _index: 829, title: {}, body: { "dependencies.html": {} } }],
      ["twitter", { _index: 915, title: {}, body: { "index.html": {} } }],
      [
        "type",
        {
          _index: 41,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "interfaces/AuthUserData.html": {},
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "injectables/BcryptProvider.html": {},
            "classes/CreateTodoDto.html": {},
            "interfaces/HashAlgoInterface.html": {},
            "classes/IdDto.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationDto.html": {},
            "classes/PaginationResultDto.html": {},
            "injectables/PasswordService.html": {},
            "classes/SignUpDto.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "type(undefined",
        {
          _index: 332,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
          },
        },
      ],
      [
        "type(undefined)@validatenested({each",
        {
          _index: 347,
          title: {},
          body: {
            "classes/BaseUserDto.html": {},
            "classes/SignUpDto.html": {},
          },
        },
      ],
      [
        "type.enum",
        {
          _index: 188,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "guards/AuthenticationGuard.html": {},
            "controllers/TaskController.html": {},
          },
        },
      ],
      [
        "type.enum.ts",
        {
          _index: 854,
          title: {},
          body: { "miscellaneous/enumerations.html": {} },
        },
      ],
      [
        "typeorm",
        {
          _index: 553,
          title: {},
          body: {
            "entities/Task.html": {},
            "injectables/TaskService.html": {},
            "entities/User.html": {},
            "injectables/UsersService.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "typeormmodule",
        {
          _index: 403,
          title: {},
          body: {
            "modules/DatabaseModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "typeormmodule.forfeature([task",
        { _index: 691, title: {}, body: { "modules/TasksModule.html": {} } },
      ],
      [
        "typeormmodule.forfeature([user",
        {
          _index: 422,
          title: {},
          body: {
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
          },
        },
      ],
      [
        "typeormmodule.forrootasync",
        { _index: 407, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "types",
        {
          _index: 222,
          title: {},
          body: {
            "guards/AuthenticationGuard.html": {},
            "classes/LogInDto.html": {},
            "classes/UpdateTaskDto.html": {},
            "dependencies.html": {},
          },
        },
      ],
      ["typescript", { _index: 873, title: {}, body: { "index.html": {} } }],
      [
        "unauthorizedexception",
        {
          _index: 21,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
          },
        },
      ],
      [
        "undefined",
        {
          _index: 57,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "controllers/TaskController.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "unique",
        { _index: 707, title: {}, body: { "entities/User.html": {} } },
      ],
      ["unit", { _index: 886, title: {}, body: { "index.html": {} } }],
      [
        "unknown",
        {
          _index: 173,
          title: {},
          body: { "controllers/AuthenticationController.html": {} },
        },
      ],
      [
        "unlicensed",
        { _index: 990, title: {}, body: { "properties.html": {} } },
      ],
      [
        "up",
        {
          _index: 282,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "up.dto",
        {
          _index: 183,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/LogInDto.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "up.dto.ts",
        {
          _index: 529,
          title: {},
          body: { "classes/SignUpDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "up.dto.ts:6",
        { _index: 531, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "update",
        {
          _index: 588,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "updateat",
        { _index: 539, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "updated",
        {
          _index: 589,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "updatedatecolumn",
        { _index: 548, title: {}, body: { "entities/Task.html": {} } },
      ],
      [
        "updatedtask",
        {
          _index: 678,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "updates",
        {
          _index: 587,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "updatetask",
        {
          _index: 633,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "updatetask(taskid",
        {
          _index: 658,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "updatetaskdto",
        {
          _index: 584,
          title: { "classes/UpdateTaskDto.html": {} },
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "classes/UpdateTaskDto.html": {},
            "coverage.html": {},
          },
        },
      ],
      [
        "updatetodo",
        {
          _index: 562,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "updatetodo(userpayload",
        {
          _index: 583,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "upon",
        {
          _index: 276,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "use",
        {
          _index: 235,
          title: {},
          body: {
            "guards/AuthenticationGuard.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/UsersService.html": {},
            "license.html": {},
          },
        },
      ],
      [
        "useclass",
        { _index: 425, title: {}, body: { "modules/IamModule.html": {} } },
      ],
      [
        "usefactory",
        { _index: 408, title: {}, body: { "modules/DatabaseModule.html": {} } },
      ],
      [
        "user",
        {
          _index: 15,
          title: { "entities/User.html": {} },
          body: {
            "guards/AccessTokenGuard.html": {},
            "interfaces/AuthUserData.html": {},
            "injectables/AuthenticationService.html": {},
            "classes/BaseTodoDto.html": {},
            "classes/CreateTodoDto.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
            "entities/User.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "coverage.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      [
        "user's",
        {
          _index: 274,
          title: {},
          body: {
            "injectables/AuthenticationService.html": {},
            "injectables/JwtTokenProvider.html": {},
            "controllers/TaskController.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "user.decorator",
        {
          _index: 602,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "user.decorator.ts",
        {
          _index: 805,
          title: {},
          body: { "coverage.html": {}, "miscellaneous/variables.html": {} },
        },
      ],
      [
        "user.dto",
        { _index: 535, title: {}, body: { "classes/SignUpDto.html": {} } },
      ],
      [
        "user.dto.ts",
        {
          _index: 341,
          title: {},
          body: { "classes/BaseUserDto.html": {}, "coverage.html": {} },
        },
      ],
      [
        "user.dto.ts:11",
        { _index: 344, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "user.dto.ts:14",
        { _index: 348, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "user.dto.ts:8",
        { _index: 345, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "user.email",
        {
          _index: 464,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "user.id",
        {
          _index: 463,
          title: {},
          body: {
            "injectables/JwtTokenProvider.html": {},
            "entities/Task.html": {},
          },
        },
      ],
      [
        "user.name",
        {
          _index: 626,
          title: {},
          body: {
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "user?.[field",
        {
          _index: 1002,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "userid",
        {
          _index: 652,
          title: {},
          body: { "injectables/TaskService.html": {} },
        },
      ],
      [
        "username",
        {
          _index: 1009,
          title: {},
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "userpayload",
        {
          _index: 568,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "userpayload.sub",
        {
          _index: 617,
          title: {},
          body: { "controllers/TaskController.html": {} },
        },
      ],
      [
        "userrepository",
        {
          _index: 635,
          title: {},
          body: {
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
          },
        },
      ],
      [
        "users",
        {
          _index: 247,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "users.service",
        { _index: 712, title: {}, body: { "modules/UsersModule.html": {} } },
      ],
      [
        "users/dto/log",
        {
          _index: 184,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "users/dto/sign",
        {
          _index: 182,
          title: {},
          body: {
            "controllers/AuthenticationController.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "users/entity/user.entity",
        {
          _index: 334,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "modules/IamModule.html": {},
            "injectables/JwtTokenProvider.html": {},
            "entities/Task.html": {},
            "controllers/TaskController.html": {},
            "injectables/TaskService.html": {},
            "modules/TasksModule.html": {},
          },
        },
      ],
      [
        "users/users.module",
        {
          _index: 145,
          title: {},
          body: { "modules/AppModule.html": {}, "modules/IamModule.html": {} },
        },
      ],
      [
        "users/users.service",
        {
          _index: 299,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "userservice",
        {
          _index: 256,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      [
        "usersmodule",
        {
          _index: 143,
          title: { "modules/UsersModule.html": {} },
          body: {
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/UsersModule.html": {},
            "modules.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "usersservice",
        {
          _index: 252,
          title: { "injectables/UsersService.html": {} },
          body: {
            "injectables/AuthenticationService.html": {},
            "modules/UsersModule.html": {},
            "injectables/UsersService.html": {},
            "coverage.html": {},
            "overview.html": {},
          },
        },
      ],
      [
        "usevalue",
        {
          _index: 133,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "using",
        {
          _index: 363,
          title: {},
          body: {
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "injectables/TaskService.html": {},
          },
        },
      ],
      [
        "valid",
        {
          _index: 13,
          title: {},
          body: {
            "guards/AccessTokenGuard.html": {},
            "injectables/AuthenticationService.html": {},
          },
        },
      ],
      [
        "validate",
        {
          _index: 131,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "validatedenv",
        { _index: 768, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "validateenv",
        {
          _index: 121,
          title: { "classes/ValidateEnv.html": {} },
          body: {
            "modules/AppConfigModule.html": {},
            "classes/ValidateEnv.html": {},
            "coverage.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validateenv(options",
        {
          _index: 766,
          title: {},
          body: {
            "classes/ValidateEnv.html": {},
            "miscellaneous/functions.html": {},
          },
        },
      ],
      [
        "validatenested",
        { _index: 351, title: {}, body: { "classes/BaseUserDto.html": {} } },
      ],
      [
        "validatesync",
        { _index: 765, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "validatesync(validatedenv",
        { _index: 771, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "validation",
        { _index: 778, title: {}, body: { "classes/ValidateEnv.html": {} } },
      ],
      [
        "validationpipe",
        {
          _index: 115,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      [
        "validator",
        {
          _index: 337,
          title: {},
          body: {
            "classes/BaseTodoDto.html": {},
            "classes/BaseUserDto.html": {},
            "classes/IdDto.html": {},
            "classes/PaginationDto.html": {},
            "classes/SignUpDto.html": {},
            "classes/ValidateEnv.html": {},
            "dependencies.html": {},
          },
        },
      ],
      [
        "validity",
        { _index: 10, title: {}, body: { "guards/AccessTokenGuard.html": {} } },
      ],
      [
        "value",
        {
          _index: 159,
          title: {},
          body: {
            "interfaces/AuthUserData.html": {},
            "injectables/AuthenticationService.html": {},
            "injectables/BcryptProvider.html": {},
            "injectables/JwtTokenProvider.html": {},
            "classes/PaginationDto.html": {},
            "injectables/PasswordService.html": {},
            "injectables/TaskService.html": {},
            "injectables/UsersService.html": {},
            "miscellaneous/variables.html": {},
          },
        },
      ],
      ["variable", { _index: 788, title: {}, body: { "coverage.html": {} } }],
      [
        "variables",
        {
          _index: 991,
          title: { "miscellaneous/variables.html": {} },
          body: { "miscellaneous/variables.html": {} },
        },
      ],
      [
        "verifying",
        {
          _index: 260,
          title: {},
          body: { "injectables/AuthenticationService.html": {} },
        },
      ],
      ["version", { _index: 988, title: {}, body: { "properties.html": {} } }],
      [
        "warning",
        {
          _index: 731,
          title: {},
          body: { "injectables/UsersService.html": {} },
        },
      ],
      ["warranties", { _index: 960, title: {}, body: { "license.html": {} } }],
      ["warranty", { _index: 956, title: {}, body: { "license.html": {} } }],
      ["watch", { _index: 881, title: {}, body: { "index.html": {} } }],
      [
        "web",
        {
          _index: 442,
          title: {},
          body: { "injectables/JwtTokenProvider.html": {} },
        },
      ],
      [
        "webpack",
        { _index: 831, title: {}, body: { "dependencies.html": {} } },
      ],
      ["website", { _index: 913, title: {}, body: { "index.html": {} } }],
      ["whether", { _index: 973, title: {}, body: { "license.html": {} } }],
      [
        "whitelist",
        {
          _index: 134,
          title: {},
          body: { "modules/AppConfigModule.html": {} },
        },
      ],
      ["without", { _index: 933, title: {}, body: { "license.html": {} } }],
      ["yarn", { _index: 877, title: {}, body: { "index.html": {} } }],
      ["you'd", { _index: 902, title: {}, body: { "index.html": {} } }],
      [
        "zoom",
        {
          _index: 109,
          title: {},
          body: {
            "modules/AppConfigModule.html": {},
            "modules/AppModule.html": {},
            "modules/IamModule.html": {},
            "modules/TasksModule.html": {},
            "modules/UsersModule.html": {},
            "overview.html": {},
          },
        },
      ],
    ],
    pipeline: ["stemmer"],
  },
  store: {
    "guards/AccessTokenGuard.html": {
      url: "guards/AccessTokenGuard.html",
      title: "guard - AccessTokenGuard",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard that checks the validity of an access token.\nIf the token is valid, it adds the user information to the request object.\nIf the token is invalid, it throws an UnauthorizedException.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/access-token.guard.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication/guards/access-token.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication/guards/access-token.guard.ts:53\n                        \n                    \n\n\n            \n                \n                        Extracts the token from the authorization header of the request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object containing headers.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The extracted token string or undefined if not found.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from "@nestjs/common";\nimport { JwtService } from "@nestjs/jwt";\nimport jwtConfig from "../../../app-config/jwt/jwt.config";\nimport { ConfigType } from "@nestjs/config";\nimport { Request } from "Express";\nimport { REQUEST_USER_KEY } from "../constants/user.key";\n\n/**\n * Guard that checks the validity of an access token.\n * If the token is valid, it adds the user information to the request object.\n * If the token is invalid, it throws an UnauthorizedException.\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  private readonly logger: Logger = new Logger("AccessTokenGuard");\n\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      this.logger.warn(" Bad Token found in the Header");\n      throw new UnauthorizedException();\n    }\n    try {\n      request[REQUEST_USER_KEY] = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration\n      );\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  /**\n   * Extracts the token from the authorization header of the request.\n   * @param request - The request object containing headers.\n   * @returns The extracted token string or undefined if not found.\n   */\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(" ") ?? [];\n\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/AppConfigModule.html": {
      url: "modules/AppConfigModule.html",
      title: "module - AppConfigModule",
      body: '\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigModule -->\n\nDatabaseModule->AppConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app-config/app.config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from "@nestjs/common";\nimport { ConfigModule } from "@nestjs/config";\nimport { APP_GUARD, APP_PIPE } from "@nestjs/core";\nimport { DatabaseModule } from "./database/db.module";\nimport { validateEnv } from "./environements/validate.env";\nimport { AccessTokenGuard } from "../iam/authentication/guards/access-token.guard";\nimport { IamModule } from "../iam/iam.module";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ".env",\n      validate: validateEnv,\n    }),\n    DatabaseModule,\n  ],\n  providers: [\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n        forbidNonWhitelisted: true,\n        transform: true,\n        transformOptions: {\n          enableImplicitConversion: true,\n        },\n      }),\n    },\n  ],\n})\nexport class AppConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/AppModule.html": {
      url: "modules/AppModule.html",
      title: "module - AppModule",
      body: '\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nIamModule\n\nIamModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            IamModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { UsersModule } from "./users/users.module";\nimport { AppConfigModule } from "./app-config/app.config.module";\nimport { IamModule } from "./iam/iam.module";\nimport { TasksModule } from "./tasks/tasks.module";\n\n@Module({\n  imports: [UsersModule, AppConfigModule, IamModule, TasksModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/AuthUserData.html": {
      url: "interfaces/AuthUserData.html",
      title: "interface - AuthUserData",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authenticated-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the subject\'s (user) email.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The "subject" of the token. The value of this property is the user ID\nthat granted this token\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthUserData {\n  /**\n   * The "subject" of the token. The value of this property is the user ID\n   * that granted this token\n   */\n  sub: number;\n\n  /**\n   * the subject\'s (user) email.\n   * */\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/AuthenticationController.html": {
      url: "controllers/AuthenticationController.html",
      title: "controller - AuthenticationController",
      body: '\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/authentication.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                registration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(logInDto: LogInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'login\')\n                \n            \n\n                    \n                        \n                            Defined in src/iam/authentication/authentication.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logInDto\n                                            \n                                                            LogInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        registration\n                        \n                    \n                \n            \n            \n                \n                        \n                    registration(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'register\')\n                \n            \n\n                    \n                        \n                            Defined in src/iam/authentication/authentication.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Logger, Post } from "@nestjs/common";\nimport { AuthenticationService } from "../authentication.service";\nimport { SignUpDto } from "../../users/dto/sign-up.dto";\nimport { LogInDto } from "../../users/dto/log-in.dto";\nimport { AuthType } from "./enum/auth-type.enum";\nimport { Auth } from "./decorators/auth.decorators";\n\n@Auth(AuthType.None)\n@Controller("")\nexport class AuthenticationController {\n  private readonly logger = new Logger("AuthenticationController");\n  constructor(private readonly iamService: AuthenticationService) {}\n\n  @Post("register")\n  async registration(@Body() signUpDto: SignUpDto) {\n    return await this.iamService.registration(signUpDto);\n  }\n\n  @Post("login")\n  async login(@Body() logInDto: LogInDto) {\n    return await this.iamService.login(logInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "guards/AuthenticationGuard.html": {
      url: "guards/AuthenticationGuard.html",
      title: "guard - AuthenticationGuard",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/authentication.guard.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication/guards/authentication.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from "@nestjs/common";\nimport { Reflector } from "@nestjs/core";\nimport { AccessTokenGuard } from "./access-token.guard";\nimport { AuthType } from "../enum/auth-type.enum";\nimport { AUTH_TYPE_KEY } from "../decorators/auth.decorators";\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private readonly logger = new Logger("AuthenticationGuard");\n\n  private static readonly defaultAuthType = AuthType.Bearer;\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()]\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    console.log("Retrieved auth types:", authTypes);\n\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n    let errors = new UnauthorizedException();\n\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context)\n      ).catch((err) => {\n        errors = err;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n    this.logger.log(\n      "Somme errors occurred while trying to use Auth guards",\n      errors.cause\n    );\n    throw errors;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/AuthenticationService.html": {
      url: "injectables/AuthenticationService.html",
      title: "injectable - AuthenticationService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service handling user authentication and registration operations.\nProvides methods for user registration, login, checking email availability,\ncreating new users, and generating JWT access tokens.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                registration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, passwordService: PasswordService, jwtTokenProvider: JwtTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtTokenProvider\n                                                  \n                                                        \n                                                                        JwtTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(logInDto: LogInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Asynchronously logs in a user by verifying the provided login credentials.\nThis method checks if the email exists in the database, then compares the provided password\nwith the stored encrypted password. If the credentials are valid, it returns a success message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                logInDto\n                                            \n                                                            LogInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the user\'s login information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object with a success message upon successful login.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registration\n                        \n                    \n                \n            \n            \n                \n                        \n                    registration(signUpDto: SignUpDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Registers a new user by creating a user entity with the provided sign-up information.\nChecks if the email is already in use, hashes the password, saves the user to the repository,\nand generates a token for the new user. Throws ConflictException if email is in use,\nInternalServerErrorException if hashing fails or saving the user fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the user\'s sign-up information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object with a token for the newly registered user.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("IAMService")\n                    \n                \n                    \n                        \n                                Defined in src/iam/authentication.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  UnauthorizedException,\n} from "@nestjs/common";\n\nimport { SignUpDto } from "../users/dto/sign-up.dto";\nimport { LogInDto } from "../users/dto/log-in.dto";\nimport { PasswordService } from "./password/password.service";\nimport { JwtTokenProvider } from "./jwt-token.provider";\nimport { UsersService } from "../users/users.service";\n\n/**\n * Service handling user authentication and registration operations.\n *\n * Provides methods for user registration, login, checking email availability,\n * creating new users, and generating JWT access tokens.\n */\n@Injectable()\nexport class AuthenticationService {\n  private readonly logger = new Logger("IAMService");\n  constructor(\n    private readonly userService: UsersService,\n    private readonly passwordService: PasswordService,\n    private readonly jwtTokenProvider: JwtTokenProvider\n  ) {}\n\n  /**\n   * Registers a new user by creating a user entity with the provided sign-up information.\n   *\n   * Checks if the email is already in use, hashes the password, saves the user to the repository,\n   * and generates a token for the new user. Throws ConflictException if email is in use,\n   * InternalServerErrorException if hashing fails or saving the user fails.\n   *\n   * @param signUpDto - The data transfer object containing the user\'s sign-up information.\n   * @returns A promise that resolves to an object with a token for the newly registered user.\n   */\n  async registration(signUpDto: SignUpDto): Promise {\n    const storedUser = await this.userService.ifEmailUsed(signUpDto.email);\n    if (storedUser) {\n      throw new ConflictException();\n    }\n\n    const hashedPassword = await this.passwordService.hasPassword(\n      signUpDto.password\n    );\n    if (!hashedPassword) {\n      this.logger.log("IAM Failed with hash Provider");\n      throw new InternalServerErrorException();\n    }\n\n    const savedUser = await this.userService.createUser(\n      signUpDto,\n      hashedPassword\n    );\n\n    if (!savedUser) {\n      this.logger.log("IAM Failed to save new User");\n      throw new InternalServerErrorException("Database error");\n    }\n\n    return await this.jwtTokenProvider.generateToken(savedUser);\n  }\n\n  /**\n   * Asynchronously logs in a user by verifying the provided login credentials.\n   *\n   * This method checks if the email exists in the database, then compares the provided password\n   * with the stored encrypted password. If the credentials are valid, it returns a success message.\n   *\n   * @param logInDto - The data transfer object containing the user\'s login information.\n   * @returns A promise that resolves to an object with a success message upon successful login.\n   * @throws UnauthorizedException if the login credentials are invalid.\n   */\n  async login(logInDto: LogInDto): Promise {\n    const storedUser = await this.userService.ifEmailUsed(logInDto.email);\n    if (!storedUser) {\n      this.logger.log("IAM-SignUp Failed to signIn");\n      throw new UnauthorizedException();\n    }\n    const isSamePassword: boolean = await this.passwordService.comparePassword(\n      logInDto.password,\n      storedUser.password\n    );\n    if (!isSamePassword) {\n      this.logger.log("IAM-SignUp Failed to signIn");\n      throw new UnauthorizedException();\n    }\n\n    return await this.jwtTokenProvider.generateToken(storedUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/BaseTodoDto.html": {
      url: "classes/BaseTodoDto.html",
      title: "class - BaseTodoDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/base-todo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                            \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/base-todo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/base-todo.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/base-todo.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from "../../users/entity/user.entity";\nimport { IsNotEmpty, IsString } from "class-validator";\nimport { Type } from "class-transformer";\n\nexport class BaseTodoDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly title: string;\n  @IsNotEmpty()\n  @IsString()\n  readonly description: string;\n  @Type(() => User)\n  readonly user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/BaseUserDto.html": {
      url: "classes/BaseUserDto.html",
      title: "class - BaseUserDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/base-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Task } from "../../tasks/entity/task.entity";\nimport { Type } from "class-transformer";\nimport { IsEmail, IsNotEmpty, IsString, ValidateNested } from "class-validator";\n\nexport class BaseUserDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly name: string;\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n  @Type(() => Task)\n  @ValidateNested({ each: true })\n  readonly tasks: Task[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/BcryptProvider.html": {
      url: "injectables/BcryptProvider.html",
      title: "injectable - BcryptProvider",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Asynchronously generates a bcrypt hash for the provided data.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/password/bcrypt.provider.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/bcrypt.provider.ts:53\n                        \n                    \n\n\n            \n                \n                        Asynchronously compares the provided data with an encrypted string using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to compare, can be a string or a Buffer.\n\n\n                                            \n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe encrypted string to compare the data against.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to true if the data matches the encrypted string, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/bcrypt.provider.ts:30\n                        \n                    \n\n\n            \n                \n                        Asynchronously generates a bcrypt hash for the provided data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to be hashed, can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the generated bcrypt hash.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("IAMHashProvider")\n                    \n                \n                    \n                        \n                                Defined in src/iam/password/bcrypt.provider.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  UnauthorizedException,\n} from "@nestjs/common";\nimport { HashAlgoInterface } from "./hash-algo.interface";\nimport * as bcrypt from "bcrypt";\nimport { ConfigService } from "@nestjs/config";\n\n/**\n * Asynchronously generates a bcrypt hash for the provided data.\n *\n * @param data - The data to be hashed, can be a string or a Buffer.\n * @returns A Promise that resolves to the generated bcrypt hash.\n * @throws InternalServerErrorException if an error occurs during the hashing process.\n */\n@Injectable()\nexport class BcryptProvider implements HashAlgoInterface {\n  private readonly logger = new Logger("IAMHashProvider");\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Asynchronously generates a bcrypt hash for the provided data.\n   *\n   * @param data - The data to be hashed, can be a string or a Buffer.\n   * @returns A Promise that resolves to the generated bcrypt hash.\n   * @throws InternalServerErrorException if an error occurs during the hashing process.\n   */\n  async hash(data: string | Buffer): Promise {\n    try {\n      const saltRounds =\n        this.configService.getOrThrow("SALT_ROUND") || 12;\n      this.logger.log(`IAM-Hash: saltRounds i${saltRounds} `);\n      const salt = await bcrypt.genSalt(saltRounds);\n      this.logger.log(`IAM-Hash: salt i${salt} `);\n      return await bcrypt.hash(data, salt);\n    } catch (error) {\n      this.logger.log("IAM-HashProvider hash failed", error.message);\n      this.logger.log(`Code error, ${error.code}`);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Asynchronously compares the provided data with an encrypted string using bcrypt.\n   *\n   * @param data - The data to compare, can be a string or a Buffer.\n   * @param encrypted - The encrypted string to compare the data against.\n   * @returns A Promise that resolves to true if the data matches the encrypted string, false otherwise.\n   * @throws UnauthorizedException if an error occurs during the comparison process.\n   */\n  async compare(data: string | Buffer, encrypted: string): Promise {\n    try {\n      return await bcrypt.compare(data, encrypted);\n    } catch (error) {\n      this.logger.log("IAM-HashProvider compare", error.message);\n      this.logger.log(`Code error, ${error.code}`);\n      throw new UnauthorizedException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/CreateTodoDto.html": {
      url: "classes/CreateTodoDto.html",
      title: "class - CreateTodoDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseTodoDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                            \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:13\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseTodoDto } from "./base-todo.dto";\n\nexport class CreateTodoDto extends BaseTodoDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/DatabaseModule.html": {
      url: "modules/DatabaseModule.html",
      title: "module - DatabaseModule",
      body: '\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app-config/database/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport { ConfigModule, ConfigService } from "@nestjs/config";\nimport { getDbConfig } from "./db.config";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: getDbConfig,\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "interfaces/HashAlgoInterface.html": {
      url: "interfaces/HashAlgoInterface.html",
      title: "interface - HashAlgoInterface",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HashAlgoInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/hash-algo.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        compare\n                                    \n                                \n                                \n                                    \n                                        hash\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/hash-algo.interface.ts:3\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash\n                        \n                    \n                \n            \n            \n                \nhash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/hash-algo.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface HashAlgoInterface {\n  hash(data: string | Buffer): Promise;\n  compare(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/IamModule.html": {
      url: "modules/IamModule.html",
      title: "module - IamModule",
      body: '\n                   \n\n\n\n\n    Modules\n    IamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IamModule\n\n\n\ncluster_IamModule_imports\n\n\n\ncluster_IamModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nIamModule\n\nIamModule\n\nIamModule -->\n\nUsersModule->IamModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nIamModule -->\n\nAuthenticationService->IamModule\n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nIamModule -->\n\nBcryptProvider->IamModule\n\n\n\n\n\nJwtTokenProvider\n\nJwtTokenProvider\n\nIamModule -->\n\nJwtTokenProvider->IamModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nIamModule -->\n\nPasswordService->IamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/iam.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            BcryptProvider\n                        \n                        \n                            JwtTokenProvider\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { AuthenticationService } from "./authentication.service";\nimport { BcryptProvider } from "./password/bcrypt.provider";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport { User } from "../users/entity/user.entity";\nimport { AuthenticationController } from "./authentication/authentication.controller";\nimport { JwtModule } from "@nestjs/jwt";\nimport jwtConfig from "../app-config/jwt/jwt.config";\nimport { ConfigModule } from "@nestjs/config";\nimport { AccessTokenGuard } from "./authentication/guards/access-token.guard";\nimport { APP_GUARD, Reflector } from "@nestjs/core";\nimport { AuthenticationGuard } from "./authentication/guards/authentication.guard";\nimport { PasswordService } from "./password/password.service";\nimport { JwtTokenProvider } from "./jwt-token.provider";\nimport { UsersModule } from "../users/users.module";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ConfigModule.forFeature(jwtConfig),\n    UsersModule,\n  ],\n  providers: [\n    JwtTokenProvider,\n    PasswordService,\n    AuthenticationService,\n    BcryptProvider,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    AccessTokenGuard,\n  ],\n  controllers: [AuthenticationController],\n  exports: [],\n})\nexport class IamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/IdDto.html": {
      url: "classes/IdDto.html",
      title: "class - IdDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsPositive } from "class-validator";\n\nexport class IdDto {\n  @IsPositive()\n  @IsInt()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/JwtTokenProvider.html": {
      url: "injectables/JwtTokenProvider.html",
      title: "injectable - JwtTokenProvider",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/jwt-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/iam/jwt-token.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/jwt-token.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        Asynchronously generates a JWT access token for a given user.\nThis method creates a JSON Web Token (JWT) using the user\'s ID and email as the payload.\nThe token is signed with the specified secret and includes additional configuration\nsuch as audience, issuer, and expiration time. If token generation fails, an error is logged\nand an InternalServerErrorException is thrown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user object containing the user\'s ID and email.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing the generated access token.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("JwtTokenProvider")\n                    \n                \n                    \n                        \n                                Defined in src/iam/jwt-token.provider.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n} from "@nestjs/common";\nimport { User } from "../users/entity/user.entity";\nimport { JwtService } from "@nestjs/jwt";\nimport jwtConfig from "../app-config/jwt/jwt.config";\nimport { ConfigType } from "@nestjs/config";\nimport { AuthUserData } from "./authenticated-user-data.interface";\n\n@Injectable()\nexport class JwtTokenProvider {\n  private readonly logger = new Logger("JwtTokenProvider");\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType\n  ) {}\n\n  /**\n   * Asynchronously generates a JWT access token for a given user.\n   *\n   * This method creates a JSON Web Token (JWT) using the user\'s ID and email as the payload.\n   * The token is signed with the specified secret and includes additional configuration\n   * such as audience, issuer, and expiration time. If token generation fails, an error is logged\n   * and an InternalServerErrorException is thrown.\n   *\n   * @param {User} user - The user object containing the user\'s ID and email.\n   * @returns {Promise} A promise that resolves to an object containing the generated access token.\n   * @throws {InternalServerErrorException} If token generation fails.\n   */\n  async generateToken(user: User): Promise {\n    try {\n      const accessToken = await this.jwtService.signAsync(\n        {\n          sub: user.id,\n          email: user.email,\n        } as AuthUserData,\n        {\n          audience: this.jwtConfiguration.audience,\n          issuer: this.jwtConfiguration.issuer,\n          secret: this.jwtConfiguration.secret,\n          expiresIn: this.jwtConfiguration.accessTokenTtl,\n        }\n      );\n      return { token: accessToken };\n    } catch (error) {\n      this.logger.log("Failed to generate token", error);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/LogInDto.html": {
      url: "classes/LogInDto.html",
      title: "class - LogInDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/log-in.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(SignUpDto, ["name", "tasks"])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from "@nestjs/mapped-types";\nimport { SignUpDto } from "./sign-up.dto";\n\nexport class LogInDto extends OmitType(SignUpDto, ["name", "tasks"]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/PaginationDto.html": {
      url: "classes/PaginationDto.html",
      title: "class - PaginationDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :     "ASC" | "DESC"\n\n                    \n                \n                \n                    \n                        Default value : "ASC"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive, IsString } from "class-validator";\nimport { Type } from "class-transformer";\n\nexport class PaginationDto {\n  @IsOptional()\n  @Type(() => Number)\n  @IsPositive()\n  page: number = 1; //default page\n  @IsOptional()\n  @Type(() => Number)\n  @IsPositive()\n  limit: number = 10; //default limit per page\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n  @IsOptional()\n  @IsString()\n  order?: "ASC" | "DESC" = "ASC";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/PaginationResultDto.html": {
      url: "classes/PaginationResultDto.html",
      title: "class - PaginationResultDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationResultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/generic-pagination-result.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                limit\n                            \n                            \n                                nextPage\n                            \n                            \n                                page\n                            \n                            \n                                previousPage\n                            \n                            \n                                totalCount\n                            \n                            \n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial>)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PaginationResultDto {\n  data: T[];\n  page: number;\n  limit: number;\n  totalCount: number;\n  totalPages: number;\n  nextPage: boolean;\n  previousPage: boolean;\n\n  constructor(partial: Partial>) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/PasswordService.html": {
      url: "injectables/PasswordService.html",
      title: "injectable - PasswordService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                hasPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bcryptProvider: BcryptProvider)\n                    \n                \n                        \n                            \n                                Defined in src/iam/password/password.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bcryptProvider\n                                                  \n                                                        \n                                                                        BcryptProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encryptedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/password.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryptedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hasPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/password.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PasswordService.name)\n                    \n                \n                    \n                        \n                                Defined in src/iam/password/password.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from "@nestjs/common";\nimport { BcryptProvider } from "./bcrypt.provider";\n\n@Injectable()\nexport class PasswordService {\n  private readonly logger = new Logger(PasswordService.name);\n  constructor(private readonly bcryptProvider: BcryptProvider) {}\n\n  async hasPassword(data: string | Buffer): Promise {\n    return await this.bcryptProvider.hash(data);\n  }\n  async comparePassword(\n    data: string | Buffer,\n    encryptedPassword: string\n  ): Promise {\n    return await this.bcryptProvider.compare(data, encryptedPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/SignUpDto.html": {
      url: "classes/SignUpDto.html",
      title: "class - SignUpDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/sign-up.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsStrongPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/sign-up.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:14\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseUserDto } from "./base-user.dto";\nimport { IsStrongPassword } from "class-validator";\n\nexport class SignUpDto extends BaseUserDto {\n  @IsStrongPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "entities/Task.html": {
      url: "entities/Task.html",
      title: "entity - Task",
      body: '\n                   \n\n\n\n\n\n\n\n  Entities\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/entity/task.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updateAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from "../../users/entity/user.entity";\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from "typeorm";\n\n@Entity("todos")\nexport class Task {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  title: string;\n  @Column()\n  description: string;\n  @ManyToOne(() => User, (user) => user.id)\n  user: User;\n\n  @CreateDateColumn()\n  createAt: Date;\n  @UpdateDateColumn()\n  updateAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "controllers/TaskController.html": {
      url: "controllers/TaskController.html",
      title: "controller - TaskController",
      body: '\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                deleteTodo\n                            \n                            \n                                    \n                                    Async\n                                getAllTodos\n                            \n                            \n                                    \n                                    Async\n                                getTodos\n                            \n                            \n                                    \n                                    Async\n                                updateTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTodo\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTodo(userPayload: AuthUserData, undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.NO_CONTENT)@Delete(\':id\')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:88\n                        \n                    \n\n\n            \n                \n                        Deletes a todo for the authenticated user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userPayload\n                                            \n                                                            AuthUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user\'s data.\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves once the todo is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllTodos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTodos(userPayload: AuthUserData, paginationDto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:110\n                        \n                    \n\n\n            \n                \n                        Retrieves and paginates all todos for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userPayload\n                                            \n                                                            AuthUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user\'s data.\n\n\n                                            \n                                        \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination details for the todos.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to a paginated result of todos.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getTodos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodos(userPayload: AuthUserData, todo: CreateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Retrieves user information and creates a new task associated with the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userPayload\n                                            \n                                                            AuthUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user\'s data.\n\n\n                                            \n                                        \n                                        \n                                                todo\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe details of the task to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the created task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateTodo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTodo(userPayload: AuthUserData, undefined: IdDto, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(\':id\')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:64\n                        \n                    \n\n\n            \n                \n                        Updates a task for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userPayload\n                                            \n                                                            AuthUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user\'s data.\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the task with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the updated task.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n  Query,\n} from "@nestjs/common";\nimport { Auth } from "../iam/authentication/decorators/auth.decorators";\nimport { AuthType } from "../iam/authentication/enum/auth-type.enum";\nimport { TaskService } from "./task.service";\nimport { AuthenticateUser } from "../iam/decorator/authenticated-user.decorator";\nimport { AuthUserData } from "../iam/authenticated-user-data.interface";\nimport { CreateTodoDto } from "./dto/create-todo.dto";\nimport { User } from "../users/entity/user.entity";\nimport { Task } from "./entity/task.entity";\nimport { UpdateTaskDto } from "./dto/update-todo.dto";\nimport { IdDto } from "../common/dto/id-dto";\nimport { PaginationDto } from "../common/pagination/pagination.dto";\nimport { PaginationResultDto } from "../common/pagination/generic-pagination-result.dto";\n\n@Auth(AuthType.Bearer)\n@Controller("todos")\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  /**\n   * Retrieves user information and creates a new task associated with the user.\n   *\n   * @param {AuthUserData} userPayload - The authenticated user\'s data.\n   * @param {CreateTodoDto} todo - The details of the task to be created.\n   * @returns {Promise} A promise that resolves to the created task.\n   * @throws {NotFoundException} If the user does not exist.\n   */\n  @Post()\n  async getTodos(\n    @AuthenticateUser() userPayload: AuthUserData,\n    @Body() todo: CreateTodoDto\n  ): Promise {\n    const user: User | null = await this.taskService.getUserEntity(\n      userPayload.sub\n    );\n    if (!user) {\n      throw new NotFoundException("User does not exist");\n    }\n    return await this.taskService.createTask(todo, user);\n  }\n\n  /**\n   * Updates a task for a specific user.\n   *\n   * @param {AuthUserData} userPayload - The authenticated user\'s data.\n   * @param {IdDto} id - The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto - The data to update the task with.\n   * @returns {Promise} A promise that resolves to the updated task.\n   * @throws {NotFoundException} If the user does not exist.\n   */\n  @Put(":id")\n  async updateTodo(\n    @AuthenticateUser() userPayload: AuthUserData,\n    @Param() { id }: IdDto,\n    @Body() updateTaskDto: UpdateTaskDto\n  ): Promise {\n    const user: User | null = await this.taskService.getUserEntity(\n      userPayload.sub\n    );\n    if (!user) {\n      throw new NotFoundException("User does not exist");\n    }\n    return await this.taskService.updateTask(id, updateTaskDto, user);\n  }\n\n  /**\n   * Deletes a todo for the authenticated user.\n   *\n   * @param {AuthUserData} userPayload - The authenticated user\'s data.\n   * @param {IdDto} id - The ID of the todo to delete.\n   * @returns {Promise} A promise that resolves once the todo is deleted.\n   * @throws {NotFoundException} If the user or todo is not found.\n   */\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete(":id")\n  async deleteTodo(\n    @AuthenticateUser() userPayload: AuthUserData,\n    @Param() { id }: IdDto\n  ): Promise {\n    const user: User | null = await this.taskService.getUserEntity(\n      userPayload.sub\n    );\n    if (!user) {\n      throw new NotFoundException("User does not exist");\n    }\n    await this.taskService.deleteTask(id, user);\n  }\n\n  /**\n   * Retrieves and paginates all todos for a specific user.\n   *\n   * @param {AuthUserData} userPayload - The authenticated user\'s data.\n   * @param {PaginationDto} paginationDto - The pagination details for the todos.\n   * @returns {Promise>} A promise that resolves to a paginated result of todos.\n   * @throws {NotFoundException} If the user or tasks are not found.\n   */\n  @Get()\n  async getAllTodos(\n    @AuthenticateUser() userPayload: AuthUserData,\n    @Query() paginationDto: PaginationDto\n  ): Promise> {\n    const user: User | null = await this.taskService.getUserEntity(\n      userPayload.sub\n    );\n    if (!user) {\n      throw new NotFoundException(`Not found Task for ${user.name}`);\n    }\n\n    return await this.taskService.paginateTasksForUser(paginationDto, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/TaskService.html": {
      url: "injectables/TaskService.html",
      title: "injectable - TaskService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                getUserEntity\n                            \n                            \n                                    Async\n                                paginateTasksForUser\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/task.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTask(todo: CreateTodoDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Asynchronously creates a new task and saves it to the repository.\nThis function attempts to create a new task using the provided todo details and associates it with the specified user.\nIt then saves the task to the repository. If an error occurs during this process, it logs the error and throws an\nInternalServerErrorException.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                todo\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the task to be created.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user who is creating the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the created task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(taskID: number, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Deletes a task based on the task ID and user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskID\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to be deleted.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user requesting the task deletion.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves once the task is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserEntity\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserEntity(userID: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Retrieves a user entity based on the provided user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the user entity if found, otherwise null.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginateTasksForUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateTasksForUser(paginationDto: PaginationDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Paginates tasks for a specific user based on the provided pagination details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination details including page and limit.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user for whom tasks are being paginated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated result containing tasks for the user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(taskID: number, updateTaskDto: UpdateTaskDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Updates a task in the repository based on the provided task ID, update data, and user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskID\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the task with.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user performing the update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the updated task.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("TaskService")\n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException,\n} from "@nestjs/common";\nimport { InjectRepository } from "@nestjs/typeorm";\nimport { Task } from "./entity/task.entity";\nimport { Repository } from "typeorm";\nimport { User } from "../users/entity/user.entity";\nimport { CreateTodoDto } from "./dto/create-todo.dto";\nimport { UpdateTaskDto } from "./dto/update-todo.dto";\nimport { PaginationResultDto } from "../common/pagination/generic-pagination-result.dto";\nimport { PaginationDto } from "../common/pagination/pagination.dto";\n\n@Injectable()\nexport class TaskService {\n  private readonly logger = new Logger("TaskService");\n  constructor(\n    @InjectRepository(Task) private readonly taskRepository: Repository,\n    @InjectRepository(User) private readonly userRepository: Repository\n  ) {}\n\n  /**\n   * Paginates tasks for a specific user based on the provided pagination details.\n   *\n   * @param {PaginationDto} paginationDto - The pagination details including page and limit.\n   * @param {User} user - The user for whom tasks are being paginated.\n   * @returns {PaginationResultDto} A paginated result containing tasks for the user.\n   * @throws {InternalServerErrorException} If an error occurs during the pagination process.\n   */\n  async paginateTasksForUser(\n    paginationDto: PaginationDto,\n    user: User\n  ): Promise> {\n    const { page, limit } = paginationDto;\n\n    try {\n      const [data, totalCount] = await this.taskRepository.findAndCount({\n        where: { user },\n        skip: (page - 1) * limit,\n        take: limit,\n        order: { createAt: "DESC" },\n      });\n\n      const totalPages = Math.ceil(totalCount / limit);\n      return new PaginationResultDto({\n        data,\n        page,\n        limit,\n        totalCount,\n        totalPages,\n        nextPage: page  1,\n      });\n    } catch (error) {\n      this.logger.error("Failed to getAllTasks", error);\n      this.logger.error(`Error code : ${error.code()}`);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Asynchronously creates a new task and saves it to the repository.\n   *\n   * @param {CreateTodoDto} todo - The data transfer object containing the details of the task to be created.\n   * @param {User} user - The user who is creating the task.\n   * @returns {Promise} A promise that resolves to the created task.\n   * @throws {InternalServerErrorException} If there is an error during the task creation process.\n   *\n   * This function attempts to create a new task using the provided `todo` details and associates it with the specified `user`.\n   * It then saves the task to the repository. If an error occurs during this process, it logs the error and throws an\n   * `InternalServerErrorException`.\n   */\n  async createTask(todo: CreateTodoDto, user: User): Promise {\n    try {\n      const task = this.taskRepository.create({ ...todo, user });\n      return await this.taskRepository.save(task);\n    } catch (error) {\n      this.logger.error("Failed to create task", error);\n      this.logger.error(`Code Error, ${error.code}`);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Retrieves a user entity based on the provided user ID.\n   *\n   * @param {number} userID - The ID of the user to retrieve.\n   * @returns {Promise} A promise that resolves to the user entity if found, otherwise null.\n   */\n  async getUserEntity(userID: number): Promise {\n    try {\n      return await this.userRepository.findOneBy({ id: userID });\n    } catch (error) {\n      this.logger.log("Failed to get user entity", error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task in the repository based on the provided task ID, update data, and user.\n   *\n   * @param {number} taskID - The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto - The data to update the task with.\n   * @param {User} user - The user performing the update.\n   * @returns {Promise} A promise that resolves to the updated task.\n   * @throws {NotFoundException} If the task with the specified ID is not found.\n   * @throws {InternalServerErrorException} If there is an error during the update process.\n   */\n  async updateTask(\n    taskID: number,\n    updateTaskDto: UpdateTaskDto,\n    user: User\n  ): Promise {\n    const updatedTask = await this.taskRepository.preload({\n      id: taskID,\n      ...updateTaskDto,\n      user,\n    });\n\n    if (!updatedTask) {\n      throw new NotFoundException(`Task with ID ${taskID} not found`);\n    }\n\n    try {\n      return await this.taskRepository.save(updatedTask);\n    } catch (error) {\n      this.logger.error("Failed to update task", error.message);\n      this.logger.error(`Error code ${error.code}`);\n      throw new InternalServerErrorException("Failed to update task");\n    }\n  }\n\n  /**\n   * Deletes a task based on the task ID and user.\n   *\n   * @param {number} taskID - The ID of the task to be deleted.\n   * @param {User} user - The user requesting the task deletion.\n   * @returns {Promise} A promise that resolves once the task is deleted.\n   * @throws {NotFoundException} If the task with the specified ID is not found for the user.\n   */\n  async deleteTask(taskID: number, user: User): Promise {\n    const task = await this.taskRepository.findOneBy({\n      id: taskID,\n      user: user,\n    });\n    if (!task) {\n      throw new NotFoundException(\n        `Task with ID ${taskID} not found for the user`\n      );\n    }\n\n    const result = await this.taskRepository.delete(taskID);\n    if (result.affected) {\n      this.logger.log(`Task with ID ${taskID} deleted by User ID ${user.name}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/TasksModule.html": {
      url: "modules/TasksModule.html",
      title: "module - TasksModule",
      body: '\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTaskService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport { Task } from "./entity/task.entity";\nimport { User } from "../users/entity/user.entity";\nimport { TaskController } from "./task.controller";\nimport { TaskService } from "./task.service";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task]), TypeOrmModule.forFeature([User])],\n  controllers: [TaskController],\n  providers: [TaskService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/UpdateTaskDto.html": {
      url: "classes/UpdateTaskDto.html",
      title: "class - UpdateTaskDto",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTodoDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from "@nestjs/mapped-types";\nimport { CreateTodoDto } from "./create-todo.dto";\n\nexport class UpdateTaskDto extends PartialType(CreateTodoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "entities/User.html": {
      url: "entities/User.html",
      title: "entity - User",
      body: '\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, task => task.user, {onDelete: \'CASCADE\'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from "typeorm";\nimport { Task } from "../../tasks/entity/task.entity";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  name: string;\n  @Column({ unique: true })\n  email: string;\n  @Column()\n  password: string;\n  @OneToMany(() => Task, (task) => task.user, { onDelete: "CASCADE" })\n  tasks: Task[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules/UsersModule.html": {
      url: "modules/UsersModule.html",
      title: "module - UsersModule",
      body: '\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from "@nestjs/common";\nimport { UsersService } from "./users.service";\nimport { TypeOrmModule } from "@nestjs/typeorm";\nimport { User } from "./entity/user.entity";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "injectables/UsersService.html": {
      url: "injectables/UsersService.html",
      title: "injectable - UsersService",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                ifEmailUsed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(signUpDto: SignUpDto, encryptedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Asynchronously creates a new user in the system.\nThis function takes a sign-up data transfer object (DTO) and an encrypted password,\ncreates a new user entity, and saves it to the user repository. If the operation\nfails, it logs the error and throws an InternalServerErrorException.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the user\'s sign-up information.\n\n\n                                            \n                                        \n                                        \n                                                encryptedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user\'s password, encrypted for security.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the newly created User object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ifEmailUsed\n                        \n                    \n                \n            \n            \n                \n                        \n                    ifEmailUsed(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Check if the provided email is already in use by querying the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email to check for availability.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A Promise that resolves with the User object if the email is found otherwise resolves with null.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger("UsersService")\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n} from "@nestjs/common";\nimport { InjectRepository } from "@nestjs/typeorm";\nimport { User } from "./entity/user.entity";\nimport { Repository } from "typeorm";\nimport { SignUpDto } from "./dto/sign-up.dto";\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger("UsersService");\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository\n  ) {}\n  /**\n   * Check if the provided email is already in use by querying the database.\n   *\n   * @param email - The email to check for availability.\n   * @returns A Promise that resolves with the User object if the email is found otherwise resolves with null.\n   * @throws Logs a warning if an error occurs during the database query.\n   */\n  async ifEmailUsed(email: string): Promise {\n    try {\n      return await this.userRepository.findOne({ where: { email } });\n    } catch (error) {\n      this.logger.log("IAM User Not Found", email);\n      this.logger.warn(`${error.code}`);\n      return null;\n    }\n  }\n\n  /**\n   * Asynchronously creates a new user in the system.\n   *\n   * This function takes a sign-up data transfer object (DTO) and an encrypted password,\n   * creates a new user entity, and saves it to the user repository. If the operation\n   * fails, it logs the error and throws an InternalServerErrorException.\n   *\n   * @param signUpDto - An object containing the user\'s sign-up information.\n   * @param encryptedPassword - The user\'s password, encrypted for security.\n   * @returns A promise that resolves to the newly created User object.\n   * @throws InternalServerErrorException if the user creation fails.\n   */\n  async createUser(\n    signUpDto: SignUpDto,\n    encryptedPassword: string\n  ): Promise {\n    try {\n      const newUser: User = this.userRepository.create({\n        ...signUpDto,\n        password: encryptedPassword,\n      });\n      return await this.userRepository.save(newUser);\n    } catch (error) {\n      this.logger.log("IAM Failed to create new user", error);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "classes/ValidateEnv.html": {
      url: "classes/ValidateEnv.html",
      title: "class - ValidateEnv",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidateEnv\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app-config/environements/validate.env.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                APP_PREFIX\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_DATABASE\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_HOST\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_PASSWORD\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_PORT\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_USERNAME\n                            \n                            \n                                    \n                                    \n                                JWT_SECRET\n                            \n                            \n                                    \n                                    \n                                JWT_TOKEN_AUDIENCE\n                            \n                            \n                                    \n                                    \n                                JWT_TOKEN_ISSUER\n                            \n                            \n                                    \n                                    \n                                JWT_TOKEN_TTL\n                            \n                            \n                                    \n                                    \n                                SALT_ROUND\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_DATABASE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_USERNAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        JWT_TOKEN_AUDIENCE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        JWT_TOKEN_ISSUER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        JWT_TOKEN_TTL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        SALT_ROUND\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { plainToInstance } from "class-transformer";\nimport { InternalServerErrorException, Logger } from "@nestjs/common";\nimport {\n  IsNotEmpty,\n  IsNumber,\n  IsPositive,\n  IsString,\n  validateSync,\n} from "class-validator";\n\nexport class ValidateEnv {\n  @IsNotEmpty()\n  @IsString()\n  DATASOURCE_USERNAME: string;\n  @IsNotEmpty()\n  @IsString()\n  DATASOURCE_PASSWORD: string;\n  @IsNotEmpty()\n  @IsString()\n  DATASOURCE_DATABASE: string;\n  @IsNotEmpty()\n  @IsString()\n  DATASOURCE_HOST: string;\n\n  @IsNumber()\n  @IsPositive()\n  DATASOURCE_PORT: number;\n  @IsNumber()\n  @IsPositive()\n  APP_PORT: number;\n  @IsNumber()\n  @IsPositive()\n  SALT_ROUND: number;\n  @IsNotEmpty()\n  @IsString()\n  APP_PREFIX: string;\n\n  @IsNotEmpty()\n  @IsString()\n  JWT_SECRET: string;\n  @IsNotEmpty()\n  @IsString()\n  JWT_TOKEN_AUDIENCE: string;\n  @IsNotEmpty()\n  @IsString()\n  JWT_TOKEN_ISSUER: string;\n  @IsNumber()\n  @IsPositive()\n  JWT_TOKEN_TTL: number;\n}\n\nexport function validateEnv(options: Record) {\n  const logger = new Logger("Validate Env");\n  const validatedEnv = plainToInstance(ValidateEnv, options, {\n    enableImplicitConversion: true,\n  });\n  const errors = validateSync(validatedEnv, {\n    skipMissingProperties: false,\n  });\n  if (errors.length > 0) {\n    logger.log(`${errors.length} are missing proper validation `);\n    logger.debug(`${errors.toString()}`);\n    throw new InternalServerErrorException("Validation Error");\n  }\n  logger.log("All Env. validation results are successfully");\n  return validatedEnv;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "coverage.html": {
      url: "coverage.html",
      title: "coverage - coverage",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app-config/database/db.config.ts\n            \n            variable\n            getDbConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app-config/environements/validate.env.ts\n            \n            class\n            ValidateEnv\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/app-config/environements/validate.env.ts\n            \n            function\n            validateEnv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dto/id-dto.ts\n            \n            class\n            IdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pagination/generic-pagination-result.dto.ts\n            \n            class\n            PaginationResultDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/pagination/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authenticated-user-data.interface.ts\n            \n            interface\n            AuthUserData\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/iam/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/constants/user.key.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth.decorators.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth.decorators.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/iam/decorator/authenticated-user.decorator.ts\n            \n            variable\n            AuthenticateUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/jwt-token.provider.ts\n            \n            injectable\n            JwtTokenProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/iam/password/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/iam/password/hash-algo.interface.ts\n            \n            interface\n            HashAlgoInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/password/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/base-todo.dto.ts\n            \n            class\n            BaseTodoDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-todo.dto.ts\n            \n            class\n            CreateTodoDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-todo.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/entity/task.entity.ts\n            \n            entity\n            Task\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/task.controller.ts\n            \n            controller\n            TaskController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/tasks/task.service.ts\n            \n            injectable\n            TaskService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/users/dto/base-user.dto.ts\n            \n            class\n            BaseUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/log-in.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                40 %\n                (2/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "dependencies.html": {
      url: "dependencies.html",
      title: "package-dependencies - dependencies",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            fork-ts-checker-webpack-plugin : ^9.0.2\n        \n            pg : ^8.13.0\n        \n            prettier-plugin-organize-imports : ^4.1.0\n        \n            reflect-metadata : ^0.2.2\n        \n            run-script-webpack-plugin : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            webpack-node-externals : ^3.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/enumerations.html": {
      url: "miscellaneous/enumerations.html",
      title: "miscellaneous-enumerations - enumerations",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/enum/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/functions.html": {
      url: "miscellaneous/functions.html",
      title: "miscellaneous-functions - functions",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            validateEnv   (src/.../validate.env.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/app-config/environements/validate.env.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateEnv\n                        \n                    \n                \n            \n            \n                \nvalidateEnv(options: Record)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "index.html": {
      url: "index.html",
      title: "getting-started - index",
      body: '\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you\'d like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "license.html": {
      url: "license.html",
      title: "getting-started - license",
      body: '\n                   \n\nMIT License\nCopyright (c) 2024 Jordach Makaya\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "modules.html": {
      url: "modules.html",
      title: "modules - modules",
      body: '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "overview.html": {
      url: "overview.html",
      title: "overview - overview",
      body: '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_IamModule\n\n\n\ncluster_IamModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigModule -->\n\nDatabaseModule->AppConfigModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nIamModule\n\nIamModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nIamModule -->\n\nUsersModule->IamModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nIamModule -->\n\nAuthenticationService->IamModule\n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nIamModule -->\n\nBcryptProvider->IamModule\n\n\n\n\n\nJwtTokenProvider\n\nJwtTokenProvider\n\nIamModule -->\n\nJwtTokenProvider->IamModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nIamModule -->\n\nPasswordService->IamModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTasksModule -->\n\nTaskService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "properties.html": {
      url: "properties.html",
      title: "package-properties - properties",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    "miscellaneous/variables.html": {
      url: "miscellaneous/variables.html",
      title: "miscellaneous-variables - variables",
      body: '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorators.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorators.ts)\n                        \n                        \n                            AuthenticateUser   (src/.../authenticated-user.decorator.ts)\n                        \n                        \n                            getDbConfig   (src/.../db.config.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../user.key.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/decorators/auth.decorators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : "authType"\n                    \n                \n\n\n        \n    \n\n    src/iam/decorator/authenticated-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthenticateUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof AuthUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: AuthUserData | undefined = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  }\n)\n                    \n                \n\n\n        \n    \n\n    src/app-config/database/db.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDbConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  configService: ConfigService\n): Promise => ({\n  type: "postgres",\n  host: configService.getOrThrow("DATASOURCE_HOST"),\n  port: configService.getOrThrow("DATASOURCE_PORT"),\n  database: configService.getOrThrow("DATASOURCE_DATABASE"),\n  username: configService.getOrThrow("DATASOURCE_USERNAME"),\n  password: configService.getOrThrow("DATASOURCE_PASSWORD"),\n  entities: [User, Task],\n  synchronize: true,\n})\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/iam/authentication/constants/user.key.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : "user"\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
  },
};
