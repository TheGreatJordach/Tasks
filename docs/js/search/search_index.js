var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.285,1,2.077]],["body/guards/AccessTokenGuard.html",[0,2.562,1,2.329,2,1.937,3,0.233,4,0.207,5,0.207,6,4.248,7,2.202,8,1.377,9,3.243,10,3.836,11,2.562,12,4.371,13,3.243,14,3.836,15,0.987,16,2.562,17,5.407,18,3.051,19,3.243,20,1.97,21,3.577,22,0.344,23,0.508,24,2.561,25,1.578,26,2.069,27,1.474,28,1.75,29,4.248,30,3.836,31,1.695,32,2.202,33,4.737,34,3.85,35,4.248,36,0.889,37,2.604,38,1.529,39,0.026,40,1.172,41,0.654,42,1.431,43,3.243,44,3.737,45,2.604,46,2.202,47,1.75,48,1.474,49,3.836,50,2.604,51,3.836,52,3.836,53,4.554,54,2.329,55,3.836,56,1.477,57,3.737,58,3.836,59,3.041,60,0.676,61,1.739,62,1.128,63,0.626,64,1.739,65,1.937,66,1.581,67,1.937,68,1.337,69,1.937,70,1.937,71,2.604,72,0.233,73,0.01,74,1.937,75,1.529,76,2.604,77,2.202,78,1.875,79,2.604,80,2.604,81,2.604,82,2.604,83,1.695,84,1.581,85,2.202,86,1.072,87,2.604,88,2.604,89,1.581,90,1.377,91,1.151,92,1.337,93,2.604,94,2.604,95,0.014,96,0.014]],["title/modules/AppConfigModule.html",[97,1.006,98,2.077]],["body/modules/AppConfigModule.html",[3,0.32,4,0.286,5,0.286,39,0.026,60,0.75,61,2.393,63,0.862,68,1.84,72,0.32,73,0.013,75,1.203,91,2.667,95,0.018,96,0.018,97,1.593,98,3.771,99,1.584,100,1.704,101,1.995,102,1.995,103,1.704,104,2.674,105,1.995,106,3.03,107,3.03,108,3.771,109,2.674,110,1.995,111,1.84,112,1.995,113,3.583,114,2.781,115,4.802,116,3.572,117,3.865,118,4.061,119,4.802,120,2.393,121,3.583,122,2.916,123,3.583,124,4.802,125,3.583,126,2.666,127,3.03,128,3.583,129,3.583,130,3.03,131,3.583,132,3.583,133,3.03,134,3.03,135,3.583,136,2.176,137,3.583,138,4.061,139,3.583,140,3.583,141,3.583,142,3.583,143,3.583,144,3.03,145,3.03]],["title/modules/AppModule.html",[97,1.006,146,2.285]],["body/modules/AppModule.html",[3,0.356,4,0.317,5,0.317,39,0.026,60,0.754,63,0.957,66,2.416,72,0.356,73,0.015,95,0.019,96,0.019,97,1.677,98,3.883,99,1.759,100,1.893,101,2.215,102,2.215,103,1.893,104,2.864,105,2.215,109,2.864,110,2.215,111,2.043,114,2.642,146,4.547,147,3.364,148,3.364,149,3.883,150,3.883,151,3.56,152,3.979,153,3.364,154,3.979,155,3.979,156,3.979,157,2.215]],["title/interfaces/AuthUserData.html",[158,2.077,159,1.904]],["body/interfaces/AuthUserData.html",[3,0.387,4,0.345,5,0.345,12,4.153,15,1.648,22,0.571,23,1.059,39,0.026,41,0.779,56,1.744,72,0.387,95,0.02,96,0.02,158,2.628,159,3.022,160,3.219,161,3.659,162,3.659,163,3.356,164,5.258,165,5.427,166,2.821,167,4.589,168,2.399,169,5.427,170,2.787,171,4.589]],["title/controllers/AuthenticationController.html",[172,2.077,173,2.285]],["body/controllers/AuthenticationController.html",[3,0.323,4,0.288,5,0.288,22,0.477,24,1.597,25,1.517,26,1.988,27,1.855,28,2.392,36,0.942,38,1.621,39,0.026,40,1.243,41,0.693,42,1.517,47,1.855,60,0.752,63,0.869,72,0.323,73,0.013,75,1.213,86,1.988,90,1.734,95,0.018,96,0.018,157,2.011,172,2.932,173,3.225,174,3.055,175,4.083,176,4.083,177,3.055,178,3.78,179,1.855,180,3.612,181,3.612,182,4.828,183,3.055,184,3.197,185,3.612,186,3.612,187,3.055,188,3.055,189,3.028,190,3.055,191,3.055,192,2.413,193,3.055,194,3.055,195,2.194,196,3.055,197,2.687,198,2.194,199,3.055,200,3.612,201,3.612,202,2.413,203,3.612,204,3.612,205,3.612,206,3.612,207,3.612,208,3.612]],["title/guards/AuthenticationGuard.html",[0,2.285,209,2.285]],["body/guards/AuthenticationGuard.html",[1,3.68,2,4.005,3,0.27,4,0.241,5,0.241,11,2.019,21,2.853,22,0.399,23,0.59,24,2.736,25,1.945,26,2.04,27,1.642,28,1.904,29,5.124,31,1.888,36,0.834,38,1.434,39,0.026,40,1.099,41,0.613,42,1.342,43,3.612,44,4.005,46,2.556,47,1.162,48,1.642,60,0.686,62,1.256,63,0.727,72,0.27,73,0.011,74,2.249,75,1.434,78,2.217,83,1.336,86,1.245,90,1.085,91,1.888,95,0.016,96,0.016,120,2.019,195,1.836,196,2.556,197,2.249,198,2.594,199,2.556,209,2.853,210,2.556,211,4.272,212,4.272,213,4.272,214,3.023,215,4.985,216,3.023,217,3.023,218,2.556,219,3.178,220,3.023,221,4.272,222,2.249,223,3.023,224,3.023,225,3.612,226,3.023,227,3.023,228,3.023,229,3.023,230,3.023,231,2.019,232,3.023,233,3.023,234,4.552,235,3.023,236,3.023,237,3.023,238,3.023,239,3.023,240,3.023,241,3.023,242,3.023,243,3.023,244,2.019,245,3.023]],["title/classes/BaseTodoDto.html",[73,0.013,246,2.285]],["body/classes/BaseTodoDto.html",[3,0.359,4,0.32,5,0.32,8,2.056,15,1.678,22,0.53,23,1.01,25,2.097,36,1.117,39,0.026,41,0.899,56,1.779,60,0.691,72,0.359,73,0.021,95,0.019,96,0.019,179,2.201,246,3.456,247,1.543,248,5.115,249,2.681,250,4.26,251,3.142,252,4.015,253,4.015,254,3.395,255,4.015,256,2.061,257,4.26,258,3.825,259,2.061,260,2.438]],["title/classes/BaseUserDto.html",[73,0.013,261,2.285]],["body/classes/BaseUserDto.html",[3,0.352,4,0.313,5,0.313,22,0.519,23,0.996,25,2.089,36,1.106,39,0.026,40,1.459,41,0.893,56,1.765,60,0.684,72,0.352,73,0.021,91,2.257,95,0.019,96,0.019,163,2.911,179,2.179,247,1.511,251,2.388,257,4.217,258,3.41,259,2.019,260,2.388,261,3.41,262,5.074,263,3.325,264,3.157,265,3.325,266,3.932,267,3.932,268,2.471,269,3.325,270,3.932,271,3.325,272,5.105,273,5.105,274,3.932]],["title/injectables/BcryptProvider.html",[62,1.006,275,1.904]],["body/injectables/BcryptProvider.html",[3,0.195,4,0.174,5,0.174,8,1.468,20,2.099,21,2.731,22,0.287,23,0.654,24,1.807,25,1.443,26,1.891,27,1.289,28,2.012,31,0.963,36,0.896,38,1.373,39,0.026,40,1.052,41,0.587,42,1.285,47,1.905,48,2.22,56,1.916,60,0.554,62,0.986,63,0.524,68,1.119,72,0.195,73,0.008,74,1.621,75,1.542,78,1.381,83,1.482,84,2.036,86,1.684,89,2.036,90,1.204,91,1.482,92,2.358,95,0.012,96,0.012,117,3.497,168,0.963,202,1.455,275,1.867,276,1.119,277,1.842,278,3.179,279,3.415,280,5.074,281,4.588,282,3.179,283,3.099,284,4.612,285,2.179,286,3.354,287,2.836,288,4.464,289,4.008,290,2.179,291,2.836,292,2.495,293,3.354,294,2.76,295,3.354,296,2.836,297,2.24,298,2.836,299,2.179,300,4.088,301,3.457,302,0.963,303,3.354,304,2.556,305,2.24,306,2.179,307,3.037,308,3.041,309,3.041,310,2.836,311,3.457,312,3.354,313,2.179,314,2.179,315,3.354,316,2.179,317,4.088,318,2.179,319,2.179,320,2.179,321,2.495,322,3.354,323,1.621,324,2.836,325,3.354,326,2.836,327,2.179,328,2.179]],["title/classes/CreateTodoDto.html",[73,0.013,329,1.904]],["body/classes/CreateTodoDto.html",[3,0.384,4,0.343,5,0.343,8,1.941,15,1.522,22,0.567,23,1.055,25,2.05,36,1.154,39,0.025,41,0.849,56,1.589,60,0.519,72,0.384,73,0.016,95,0.02,96,0.02,179,2.272,246,4.358,247,1.652,249,2.872,250,4.021,251,3.282,254,3.635,329,3.009,330,3.635,331,3.61,332,4.999,333,4.299,334,4.299,335,4.299,336,3.635,337,2.872]],["title/modules/DatabaseModule.html",[97,1.006,108,2.077]],["body/modules/DatabaseModule.html",[3,0.411,4,0.366,5,0.366,39,0.026,60,0.767,61,3.069,63,1.106,68,2.36,72,0.411,73,0.017,95,0.021,96,0.021,97,1.657,99,2.031,108,3.421,112,2.559,114,2.893,116,4.191,117,3.763,127,3.886,133,3.886,338,4.596,339,3.069,340,2.36,341,4.191,342,4.596,343,4.596]],["title/interfaces/HashAlgoInterface.html",[158,2.077,305,2.285]],["body/interfaces/HashAlgoInterface.html",[3,0.376,4,0.335,5,0.335,22,0.555,27,2.048,36,1.04,38,1.79,39,0.026,40,1.372,41,0.765,42,1.675,47,2.048,48,2.365,56,1.979,72,0.376,95,0.02,96,0.02,158,2.553,160,3.128,281,3.965,283,2.535,284,4.507,287,4.507,288,4.826,289,3.909,298,4.507,305,3.56,344,4.948,345,3.555,346,4.204,347,4.204]],["title/modules/IamModule.html",[97,1.006,149,2.077]],["body/modules/IamModule.html",[1,2.716,3,0.289,4,0.257,5,0.257,15,0.831,39,0.026,60,0.811,63,0.776,64,2.156,65,2.401,66,1.96,67,2.401,68,1.657,72,0.289,73,0.012,95,0.017,96,0.017,97,1.509,99,1.427,100,1.535,101,1.797,102,1.797,103,1.535,104,2.857,105,2.49,109,2.49,110,1.797,111,1.657,114,2.296,116,2.401,118,3.782,120,2.156,138,2.729,145,2.729,149,4.056,151,3.351,153,2.729,157,2.49,173,3.427,189,3.351,190,2.729,209,2.987,215,2.729,218,2.729,256,1.657,275,3.351,339,2.156,340,1.657,348,2.729,349,3.228,350,2.729,351,3.351,352,3.351,353,3.228,354,3.228,355,3.228,356,3.228,357,3.228,358,3.228,359,2.729,360,2.401,361,2.729,362,2.401,363,3.228,364,3.228]],["title/injectables/IamService.html",[62,1.006,189,1.904]],["body/injectables/IamService.html",[3,0.161,4,0.143,5,0.143,8,1.296,9,3.492,11,1.925,12,2.758,13,2.437,15,1.614,16,3.223,18,3.2,19,1.52,20,1.853,21,2.758,22,0.237,23,0.562,24,2.133,25,1.516,26,1.7,27,1.587,28,1.854,31,1.274,36,0.806,38,1.212,39,0.026,40,0.929,41,0.518,42,1.134,47,1.854,48,2.025,54,2.508,60,0.583,62,0.848,63,0.432,72,0.161,73,0.007,75,2.007,78,1.862,83,1.998,86,2.087,90,1.035,92,1.48,95,0.011,96,0.011,163,2.706,168,0.794,175,4.818,176,4.08,177,2.437,178,2.93,183,2.437,184,2.603,189,1.605,191,1.52,192,1.2,193,1.52,194,1.52,244,2.758,276,0.923,278,1.75,279,2.144,281,1.337,282,2.93,283,1.964,289,1.925,291,2.437,294,2.299,302,0.794,304,2.299,307,1.001,310,2.437,321,3.072,323,3.072,351,2.822,352,2.822,359,1.52,360,2.685,361,1.52,365,1.52,366,2.883,367,2.883,368,2.883,369,2.883,370,2.883,371,2.883,372,2.437,373,3.492,374,2.437,375,2.883,376,2.883,377,1.797,378,2.299,379,2.883,380,2.883,381,1.797,382,2.144,383,2.883,384,4.521,385,2.437,386,2.883,387,2.144,388,2.93,389,2.883,390,4.13,391,4.13,392,3.072,393,2.758,394,2.883,395,2.883,396,1.797,397,2.883,398,1.371,399,3.072,400,3.492,401,2.437,402,2.883,403,2.144,404,1.925,405,4.13,406,3.072,407,2.883,408,2.437,409,2.883,410,2.883,411,1.797,412,4.13,413,1.797,414,3.609,415,1.797,416,1.797,417,1.797,418,2.883,419,1.797,420,1.797,421,1.797,422,1.797,423,1.797,424,2.883,425,2.883,426,2.883,427,1.52,428,1.797,429,1.797,430,1.797,431,1.797]],["title/classes/IdDto.html",[73,0.013,432,2.285]],["body/classes/IdDto.html",[3,0.424,4,0.378,5,0.378,22,0.626,23,1.121,36,0.925,39,0.025,41,0.681,60,0.573,72,0.424,73,0.021,95,0.021,96,0.021,166,2.732,170,3.172,179,1.822,247,1.822,259,2.435,432,3.836,433,4.856,434,4.01,435,4.743,436,4.743,437,5.743,438,4.272]],["title/injectables/JwtTokenProvider.html",[62,1.006,351,1.904]],["body/injectables/JwtTokenProvider.html",[3,0.223,4,0.199,5,0.199,8,0.895,11,3.284,12,4.235,15,1.615,18,2.986,20,1.28,22,0.329,23,0.725,24,2.324,25,1.652,26,2.025,27,1.427,28,1.705,31,1.641,32,2.107,33,4.662,34,3.752,35,4.158,36,0.866,38,1.247,39,0.026,40,0.956,41,0.533,42,1.167,47,1.427,48,2.021,54,2.986,60,0.666,61,1.665,62,1.092,63,0.6,64,1.665,65,1.854,66,1.513,67,1.854,68,1.28,72,0.223,73,0.009,75,1.49,77,2.107,78,1.026,83,1.102,84,1.513,86,1.026,89,1.513,90,0.895,92,1.28,95,0.014,96,0.014,159,2.067,163,2.7,164,2.107,168,1.102,170,2.525,256,1.28,276,1.28,278,2.255,279,2.762,292,2.762,294,2.067,301,3.14,302,1.102,304,2.928,307,2.738,351,2.067,360,3.658,385,3.14,393,3.284,406,3.301,439,4.158,440,2.107,441,3.713,442,3.713,443,3.713,444,2.492,445,3.713,446,2.48,447,3.713,448,3.713,449,3.713,450,3.713,451,3.14,452,4.437,453,3.713,454,3.713,455,3.713,456,3.713,457,4.437,458,4.437,459,3.713,460,3.713,461,4.437,462,3.713,463,3.713,464,3.713,465,2.107,466,2.107,467,3.713,468,2.492,469,2.107,470,2.492,471,2.492,472,2.492,473,2.492,474,2.492,475,2.492,476,2.107,477,2.492]],["title/classes/LogInDto.html",[73,0.013,178,2.077]],["body/classes/LogInDto.html",[3,0.433,4,0.386,5,0.386,39,0.025,40,1.497,60,0.702,72,0.433,73,0.018,95,0.022,96,0.022,178,3.533,184,2.488,192,3.237,231,3.237,247,1.862,264,3.239,331,3.886,399,3.605,478,4.098,479,4.098,480,5.818,481,4.846,482,3.605]],["title/classes/PaginationDto.html",[73,0.013,483,2.077]],["body/classes/PaginationDto.html",[3,0.326,4,0.29,5,0.29,22,0.48,23,0.947,36,1.137,39,0.026,41,0.914,42,1.83,56,1.427,60,0.586,72,0.326,73,0.02,95,0.018,96,0.018,136,3.537,166,2.968,168,2.414,179,2.238,247,1.4,258,3.647,259,1.87,260,2.212,302,2.682,438,4.062,483,2.948,484,3.08,485,4.617,486,4.513,487,5.461,488,4.105,489,4.855,490,3.642,491,5.824,492,4.105,493,4.855,494,3.642,495,4.105,496,3.642,497,3.642,498,6.067,499,3.642]],["title/classes/PaginationResultDto.html",[73,0.013,500,2.077]],["body/classes/PaginationResultDto.html",[3,0.334,4,0.298,5,0.298,22,0.493,23,0.963,31,1.65,36,1.27,38,1.254,39,0.025,40,0.961,41,0.934,42,1.173,72,0.334,73,0.014,95,0.018,96,0.018,136,3.357,166,3.095,247,1.435,283,2.63,427,4.974,486,4.113,500,2.997,501,5.567,502,4.397,503,3.157,504,4.675,505,5.529,506,4.675,507,4.675,508,4.935,509,6.117,510,4.935,511,4.935,512,3.734,513,3.734,514,3.734,515,3.734,516,3.734,517,3.734,518,3.734]],["title/injectables/PasswordService.html",[62,1.006,352,1.904]],["body/injectables/PasswordService.html",[3,0.311,4,0.277,5,0.277,22,0.459,23,0.919,24,2.359,25,1.797,26,2.355,27,1.81,28,2.366,31,1.538,36,1.116,38,1.792,39,0.026,40,1.374,41,0.766,42,1.677,47,1.81,48,2.197,56,1.909,60,0.569,62,1.385,63,0.837,72,0.311,73,0.013,75,1.581,86,1.939,90,1.691,95,0.017,96,0.017,168,1.538,202,2.325,275,3.428,276,1.787,283,2.539,288,4.581,302,1.538,352,2.622,519,2.943,520,5.337,521,4.709,522,3.481,523,4.709,524,3.481,525,4.835,526,3.481,527,4.709,528,3.481,529,4.709,530,3.481,531,3.481,532,3.481]],["title/classes/SignUpDto.html",[73,0.013,184,1.756]],["body/classes/SignUpDto.html",[3,0.356,4,0.317,5,0.317,22,0.525,23,1.004,25,2.094,36,1.176,39,0.026,40,1.324,41,0.865,56,1.773,60,0.621,72,0.356,73,0.019,91,1.759,95,0.019,96,0.019,163,2.642,179,2.317,184,2.642,247,1.529,251,2.416,259,2.043,261,4.271,264,2.864,265,3.364,268,1.638,269,3.364,331,3.436,332,4.821,336,3.364,388,3.462,533,4.35,534,3.364,535,5.702,536,3.979,537,3.979,538,3.979,539,3.979,540,3.979]],["title/entities/Task.html",[268,1.409,398,1.627]],["body/entities/Task.html",[3,0.331,4,0.295,5,0.295,8,1.977,15,1.692,22,0.488,23,0.958,36,1.223,39,0.026,41,0.9,56,1.724,60,0.593,72,0.331,73,0.014,95,0.018,96,0.018,166,2.335,170,2.827,179,2.409,250,4.096,256,1.901,268,2.021,398,1.761,469,4.15,541,2.473,542,3.131,543,4.656,544,5.506,545,5.863,546,5.506,547,3.703,548,5.158,549,3.703,550,4.656,551,3.703,552,3.703,553,5.506,554,3.703,555,3.703,556,3.703,557,4.908,558,2.248,559,3.703]],["title/controllers/TaskController.html",[172,2.077,560,2.285]],["body/controllers/TaskController.html",[3,0.144,4,0.128,5,0.128,8,1.391,15,1.693,16,1.763,20,1.99,22,0.213,25,0.507,27,1.015,28,2.163,36,0.756,38,1.301,39,0.026,40,0.997,41,0.556,42,1.217,47,1.943,48,2.379,57,1.964,59,2.239,60,0.702,63,0.388,72,0.144,73,0.006,75,1.541,78,1.595,83,1.713,86,2.082,90,1.204,92,2.891,95,0.01,96,0.01,126,1.2,134,1.364,136,0.979,157,0.898,159,3.358,170,2.357,172,0.979,179,1.489,187,2.835,188,2.835,195,0.979,197,1.2,198,0.979,202,1.077,256,0.828,264,0.898,268,2.428,283,2.562,294,2.815,302,0.713,329,2.38,337,1.763,393,3.378,432,3.496,446,1.763,465,4.554,466,1.364,483,3.179,500,0.979,502,2.239,560,1.763,561,1.364,562,1.613,563,4.846,564,3.352,565,3.352,566,3.352,567,3.352,568,1.613,569,1.613,570,1.613,571,2.232,572,4.554,573,5.63,574,2.232,575,2.232,576,1.613,577,1.613,578,3.276,579,2.232,580,3.276,581,3.276,582,2.232,583,2.232,584,1.613,585,1.613,586,2.232,587,2.882,588,1.613,589,3.27,590,1.613,591,1.613,592,2.232,593,2.835,594,2.232,595,2.64,596,1.613,597,1.613,598,3.614,599,1.613,600,2.232,601,1.613,602,1.613,603,1.866,604,1.364,605,3.18,606,1.613,607,1.613,608,1.613,609,1.364,610,1.2,611,1.364,612,1.613,613,1.364,614,1.364,615,1.364,616,1.364,617,2.64,618,1.613,619,1.613,620,1.613,621,1.613,622,4.274,623,2.882,624,3.875,625,3.875,626,3.352,627,1.613,628,1.613,629,1.613,630,1.613,631,1.613,632,1.613,633,1.613,634,1.613,635,1.613]],["title/injectables/TaskService.html",[62,1.006,603,1.904]],["body/injectables/TaskService.html",[3,0.111,4,0.099,5,0.099,8,1.327,15,1.748,18,1.291,20,2.209,22,0.164,23,0.415,24,1.634,25,1.161,26,1.355,27,0.817,28,2.114,31,0.94,36,0.839,38,1.352,39,0.026,40,1.036,41,0.578,42,1.265,47,1.884,48,2.292,54,1.999,59,2.689,60,0.571,62,0.625,63,0.3,72,0.111,73,0.005,75,1.741,78,1.771,83,1.634,84,1.999,86,1.771,89,1.999,90,1.327,92,2.518,95,0.008,96,0.008,136,2.612,166,2.466,168,0.55,170,3.037,256,0.639,264,2.242,268,2.693,276,0.639,278,1.291,282,2.753,283,2.156,292,1.582,294,2.524,297,1.42,302,0.55,304,2.524,307,3.063,308,2.07,309,2.75,311,3.126,324,1.053,326,2.354,329,2.058,337,1.42,340,0.639,373,1.798,382,1.582,392,1.582,398,1.758,403,2.448,404,3.541,446,1.42,451,2.783,476,1.053,483,2.873,485,1.053,486,2.995,492,1.053,495,1.798,500,1.69,502,2.689,504,1.053,506,1.798,507,1.798,543,1.053,558,0.756,571,1.798,572,3.126,574,1.798,575,3.126,578,1.798,579,1.798,580,1.798,581,3.833,582,2.783,583,2.354,587,2.448,589,2.977,592,1.798,593,4.272,594,1.798,598,2.783,603,1.184,609,1.053,610,0.926,611,1.053,614,1.053,615,1.053,616,1.053,623,2.07,636,1.053,637,2.127,638,2.127,639,2.127,640,2.783,641,2.783,642,1.245,643,2.354,644,2.127,645,2.127,646,2.127,647,1.245,648,1.42,649,2.127,650,2.07,651,2.127,652,2.127,653,1.245,654,4.533,655,4.903,656,2.127,657,2.127,658,2.127,659,1.245,660,2.783,661,2.127,662,1.245,663,1.245,664,1.798,665,2.127,666,1.245,667,1.245,668,2.127,669,2.127,670,1.053,671,1.245,672,1.053,673,1.245,674,1.245,675,1.245,676,1.245,677,2.783,678,1.245,679,2.127,680,2.127,681,1.053,682,1.245,683,1.245,684,1.245,685,1.245,686,2.127,687,1.245,688,1.245,689,1.245,690,1.245,691,1.245,692,1.245,693,1.245,694,1.245,695,1.245]],["title/modules/TasksModule.html",[97,1.006,150,2.077]],["body/modules/TasksModule.html",[3,0.375,4,0.334,5,0.334,15,1.079,39,0.026,60,0.783,63,1.008,72,0.375,73,0.016,95,0.02,96,0.02,97,1.718,99,1.853,100,1.994,101,2.333,102,2.333,103,1.994,104,3.253,105,2.333,109,2.961,110,2.333,111,2.152,114,2.152,150,3.936,157,2.961,256,2.152,268,1.726,339,2.799,340,2.152,362,3.118,560,3.903,603,3.609,604,3.544,610,3.118,696,3.544,697,3.544,698,4.191,699,4.191,700,4.191]],["title/classes/UpdateTaskDto.html",[73,0.013,589,2.077]],["body/classes/UpdateTaskDto.html",[3,0.44,4,0.392,5,0.392,39,0.025,60,0.709,72,0.44,73,0.018,95,0.022,96,0.022,231,3.284,247,1.89,249,3.284,329,2.738,331,3.92,337,3.284,482,3.658,589,3.564,650,3.658,701,4.158,702,5.869,703,4.917]],["title/entities/User.html",[15,0.88,398,1.627]],["body/entities/User.html",[3,0.336,4,0.299,5,0.299,15,1.275,22,0.495,23,0.967,36,1.196,39,0.026,40,1.427,41,0.88,56,1.851,60,0.598,72,0.336,73,0.014,91,2.19,95,0.018,96,0.018,163,2.847,166,2.356,170,2.847,179,2.355,264,3.087,268,2.592,271,3.175,388,3.367,398,2.356,541,2.508,548,5.322,550,4.688,558,2.28,704,3.175,705,3.755,706,3.755,707,3.755,708,3.755,709,3.755,710,3.755,711,4.954,712,4.954,713,4.954,714,3.755,715,4.954,716,3.755]],["title/modules/UsersModule.html",[97,1.006,151,1.904]],["body/modules/UsersModule.html",[3,0.38,4,0.338,5,0.338,15,1.092,39,0.026,60,0.745,63,1.021,72,0.38,73,0.016,95,0.02,96,0.02,97,1.728,99,1.876,100,2.019,101,2.363,102,2.363,103,2.019,104,3.272,105,3.272,109,2.985,110,2.363,111,2.18,114,2.18,151,3.677,339,2.835,340,2.18,362,3.157,378,3.824,717,3.589,718,3.589,719,3.589,720,4.245,721,4.245,722,3.589]],["title/injectables/UsersService.html",[62,1.006,378,1.904]],["body/injectables/UsersService.html",[3,0.198,4,0.177,5,0.177,8,1.221,15,1.626,16,2.271,18,3.439,20,2.38,22,0.293,23,0.664,24,2.049,25,1.456,26,1.909,27,1.307,28,2.027,31,1.503,36,0.905,38,1.389,39,0.026,40,1.064,41,0.594,42,1.299,47,1.781,48,2.176,54,2.065,56,1.551,59,2.762,60,0.603,62,1,63,0.534,72,0.198,73,0.008,75,1.902,78,0.914,83,0.981,84,2.065,86,1.4,89,2.065,90,1.485,92,2.123,95,0.013,96,0.013,163,3.043,168,0.981,184,2.908,192,1.482,244,2.271,276,1.139,278,2.065,282,2.065,283,1.618,289,3.096,294,2.936,297,2.271,302,0.981,304,2.783,307,2.936,308,1.65,309,1.65,321,2.53,323,1.65,340,1.139,372,2.876,378,1.893,382,3.076,387,3.076,388,3.035,392,2.53,393,3.096,398,1.618,399,3.448,400,3.92,401,2.876,403,2.53,404,3.522,406,3.076,408,2.876,446,3.096,525,4.226,558,1.347,587,2.53,600,1.876,613,2.876,623,3.076,643,2.876,648,2.271,650,1.65,670,1.876,672,1.876,681,1.876,722,1.876,723,1.876,724,4.135,725,3.401,726,2.219,727,3.401,728,2.219,729,2.219,730,3.401,731,3.401,732,3.401,733,3.401,734,3.401,735,2.219,736,4.635,737,3.401,738,3.401,739,2.219,740,2.219,741,2.219,742,2.219,743,2.219,744,2.219,745,2.219]],["title/classes/ValidateEnv.html",[73,0.013,122,2.077]],["body/classes/ValidateEnv.html",[3,0.22,4,0.196,5,0.196,22,0.325,23,0.718,26,1.514,36,1.246,39,0.026,41,0.917,56,1.907,60,0.532,63,0.592,72,0.329,73,0.016,75,1.235,78,1.813,83,1.087,90,0.883,91,1.087,95,0.016,96,0.014,112,3.584,122,2.233,130,3.109,144,2.08,166,2.976,179,2.453,222,1.83,234,2.08,247,0.945,251,3.55,257,4.446,258,3.992,259,1.263,260,1.494,296,2.08,304,1.37,307,1.37,438,4.23,648,1.643,746,1.83,747,4.403,748,4.403,749,4.403,750,4.403,751,4.403,752,4.403,753,4.403,754,4.403,755,4.403,756,4.403,757,4.403,758,4.403,759,4.403,760,4.403,761,5.487,762,2.46,763,2.46,764,2.46,765,2.46,766,2.46,767,2.46,768,2.46,769,2.46,770,2.46,771,2.46,772,2.46,773,2.46,774,2.46,775,2.46,776,2.46,777,5.687,778,2.46,779,2.08,780,2.46,781,3.677,782,2.46,783,2.08,784,2.46,785,2.46,786,2.46,787,2.08,788,2.46,789,2.46,790,2.46,791,3.677,792,2.46,793,2.46,794,2.46,795,2.46]],["title/coverage.html",[796,3.462]],["body/coverage.html",[0,2.756,1,1.749,5,0.229,6,2.435,7,2.435,15,1.062,39,0.026,41,0.413,62,1.706,70,2.142,73,0.023,75,0.967,95,0.015,96,0.015,97,0.847,103,1.37,112,2.685,122,2.506,158,2.506,159,1.603,161,2.435,162,2.435,172,2.506,173,1.923,174,2.435,178,1.749,184,1.479,189,1.603,198,1.749,209,1.923,210,2.435,219,2.142,246,1.923,248,2.435,249,3.221,261,1.923,262,2.435,263,2.435,268,1.186,275,1.603,277,2.435,305,1.923,329,1.603,330,2.435,341,2.142,344,2.435,345,2.435,351,1.603,352,1.603,365,2.435,378,1.603,398,1.963,432,1.923,433,2.435,434,2.435,439,2.435,440,2.435,478,2.435,479,2.435,483,1.749,484,2.435,500,1.749,501,2.435,502,1.923,503,2.435,519,2.435,533,2.435,534,2.435,542,2.435,560,1.923,561,2.435,589,1.749,603,1.603,605,2.142,636,2.435,648,2.756,701,2.435,704,2.435,723,2.435,746,3.07,787,5.786,796,2.142,797,2.435,798,2.88,799,2.88,800,2.435,801,5.801,802,6.456,803,2.88,804,2.88,805,2.88,806,4.822,807,2.88,808,2.88,809,4.126,810,2.435,811,3.489,812,4.126,813,4.126,814,2.88,815,2.435,816,2.435,817,4.126,818,4.126,819,2.88,820,2.88,821,3.07,822,4.822,823,2.88,824,2.88,825,2.88,826,2.88,827,2.88,828,2.88]],["title/dependencies.html",[100,1.955,829,2.422]],["body/dependencies.html",[39,0.026,63,0.996,64,2.765,68,2.125,69,3.079,73,0.02,95,0.02,96,0.02,100,1.969,114,2.125,120,2.765,126,3.079,231,2.765,259,2.125,260,2.514,280,3.5,340,2.125,482,3.079,558,2.514,830,4.139,831,4.139,832,5.809,833,4.139,834,4.139,835,4.139,836,4.139,837,4.139,838,4.139,839,4.139,840,4.139,841,4.139,842,4.139,843,4.139,844,4.139,845,5.809,846,5.809,847,4.139,848,4.139,849,4.139,850,4.139,851,4.139,852,4.139,853,4.139,854,4.139,855,4.139,856,3.5,857,4.139,858,4.139,859,4.139,860,4.139,861,4.139,862,4.139,863,4.139,864,4.139]],["title/miscellaneous/enumerations.html",[865,1.594,866,3.475]],["body/miscellaneous/enumerations.html",[22,0.689,39,0.023,95,0.023,96,0.023,195,3.694,865,2.909,866,4.419,867,5.226,868,6.083,869,5.226,870,5.226,871,5.226]],["title/miscellaneous/functions.html",[865,1.594,872,3.475]],["body/miscellaneous/functions.html",[22,0.661,38,1.682,39,0.023,40,1.289,41,0.719,42,1.574,95,0.022,96,0.022,103,3.008,112,2.789,122,3.604,222,4.414,746,3.727,779,4.236,783,4.236,821,3.727,865,2.789,872,4.236,873,4.236,874,5.01]],["title/index.html",[22,0.378,875,2.422,876,2.422]],["body/index.html",[4,0.313,8,1.412,39,0.026,66,2.388,95,0.019,96,0.019,404,2.626,796,2.925,856,5.39,877,3.932,878,3.932,879,5.105,880,3.932,881,3.932,882,3.932,883,3.932,884,3.932,885,3.932,886,5.67,887,3.932,888,3.932,889,3.932,890,5.67,891,6.489,892,3.932,893,3.932,894,3.932,895,3.932,896,5.105,897,3.932,898,3.932,899,3.932,900,3.932,901,5.105,902,5.105,903,3.932,904,3.932,905,3.932,906,3.798,907,5.105,908,3.932,909,3.932,910,3.932,911,3.932,912,3.932,913,3.325,914,3.932,915,3.932,916,3.932,917,3.932,918,3.932,919,3.932,920,3.932,921,3.932,922,3.932,923,3.932,924,3.325,925,3.932,926,3.932,927,3.932,928,3.932,929,3.932,930,3.932,931,2.626]],["title/license.html",[875,2.422,876,2.422,931,1.913]],["body/license.html",[39,0.019,69,2.942,95,0.019,96,0.019,111,2.031,167,3.344,171,3.344,244,3.423,282,2.402,297,2.642,586,3.344,664,4.334,797,3.344,906,2.942,931,2.642,932,5.686,933,3.955,934,3.955,935,3.344,936,3.344,937,5.125,938,3.955,939,3.955,940,3.955,941,3.955,942,3.955,943,5.125,944,6.657,945,3.955,946,3.955,947,5.686,948,3.955,949,3.955,950,3.955,951,3.955,952,3.955,953,3.955,954,3.955,955,3.955,956,3.955,957,3.955,958,5.125,959,3.955,960,3.955,961,3.955,962,3.955,963,3.955,964,3.955,965,5.125,966,5.125,967,3.955,968,3.955,969,3.955,970,3.955,971,3.955,972,3.955,973,3.955,974,3.955,975,3.955,976,3.955,977,3.955,978,3.955,979,3.955,980,3.955,981,3.955,982,3.955,983,3.955,984,3.955,985,3.955,986,3.955,987,3.955,988,3.955,989,3.955,990,3.955,991,3.955,992,3.955,993,3.955]],["title/modules.html",[99,2.057]],["body/modules.html",[39,0.022,95,0.022,96,0.022,98,2.953,99,2.15,108,2.953,146,3.248,149,2.953,150,2.953,151,2.708,913,5.598,994,6.621,995,6.621,996,6.722,997,4.864,998,4.864]],["title/overview.html",[999,3.935]],["body/overview.html",[2,2.762,39,0.025,95,0.018,96,0.018,97,1.092,98,3.707,99,1.641,100,1.766,101,2.067,102,2.067,103,1.766,104,2.067,105,2.067,106,3.14,107,3.14,108,3.348,109,2.738,110,2.067,111,1.907,146,4.435,147,3.14,148,3.14,149,4.115,150,3.707,151,3.563,157,2.067,160,2.762,189,3.07,247,1.427,275,3.07,276,1.907,348,3.14,350,3.14,351,3.07,352,3.07,378,3.563,488,3.14,541,2.48,603,3.07,696,3.14,697,3.14,717,3.14,718,3.14,719,3.14,999,3.14,1000,4.917,1001,5.869]],["title/properties.html",[23,0.802,829,2.422]],["body/properties.html",[8,1.819,23,0.989,39,0.025,95,0.022,96,0.022,374,4.284,906,3.769,924,4.284,931,3.384,935,4.284,936,4.284,1002,5.067,1003,5.067,1004,5.067,1005,5.067,1006,5.067,1007,5.067,1008,5.067]],["title/miscellaneous/variables.html",[865,1.594,1009,3.475]],["body/miscellaneous/variables.html",[15,1.512,17,3.148,22,0.491,28,1.431,39,0.026,41,0.843,44,2.77,48,1.431,56,1.449,57,3.665,70,3.665,78,2.029,85,3.148,90,1.337,91,1.646,95,0.018,96,0.018,97,1.449,112,2.073,117,3.29,159,2.743,168,2.701,195,2.992,198,2.992,219,3.665,225,4.166,268,1.533,302,2.701,341,3.665,387,2.77,388,2.261,541,2.487,605,3.665,800,3.148,810,3.148,811,3.148,815,3.148,816,4.166,821,2.77,865,2.073,873,3.148,1009,3.148,1010,4.926,1011,3.723,1012,3.723,1013,3.723,1014,3.723,1015,3.723,1016,4.926,1017,3.723,1018,3.723,1019,3.723,1020,3.723,1021,3.723,1022,3.723,1023,3.723,1024,3.723,1025,3.723,1026,3.723,1027,3.723,1028,3.723,1029,3.723,1030,3.723]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"interfaces/HashAlgoInterface.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":787,"title":{},"body":{"classes/ValidateEnv.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1003,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":803,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":805,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":495,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/TaskService.html":{}}}],["1.1.25",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":488,"title":{},"body":{"classes/PaginationDto.html":{},"overview.html":{}}}],["10.0.0",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":314,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["2",{"_index":1001,"title":{},"body":{"overview.html":{}}}],["2.0.5",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["2024",{"_index":934,"title":{},"body":{"license.html":{}}}],["25",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":618,"title":{},"body":{"controllers/TaskController.html":{}}}],["3.0.0",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["4.1.0",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":812,"title":{},"body":{"coverage.html":{}}}],["5.1.1",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["5/8",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1000,"title":{},"body":{"overview.html":{}}}],["6.2.1",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":619,"title":{},"body":{"controllers/TaskController.html":{}}}],["62",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":807,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["8.13.0",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["9.0.2",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["above",{"_index":964,"title":{},"body":{"license.html":{}}}],["access",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{}}}],["accesstoken",{"_index":467,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"modules/IamModule.html":{},"coverage.html":{}}}],["action",{"_index":988,"title":{},"body":{"license.html":{}}}],["additional",{"_index":454,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["adds",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["against",{"_index":293,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["algo.interface",{"_index":306,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["algo.interface.ts",{"_index":345,"title":{},"body":{"interfaces/HashAlgoInterface.html":{},"coverage.html":{}}}],["algo.interface.ts:2",{"_index":347,"title":{},"body":{"interfaces/HashAlgoInterface.html":{}}}],["algo.interface.ts:3",{"_index":346,"title":{},"body":{"interfaces/HashAlgoInterface.html":{}}}],["allow",{"_index":1006,"title":{},"body":{"properties.html":{}}}],["already",{"_index":401,"title":{},"body":{"injectables/IamService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":914,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":956,"title":{},"body":{"license.html":{}}}],["api",{"_index":1005,"title":{},"body":{"properties.html":{}}}],["app",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"injectables/JwtTokenProvider.html":{},"index.html":{}}}],["app_guard",{"_index":118,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/IamModule.html":{}}}],["app_pipe",{"_index":119,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_port",{"_index":747,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["app_prefix",{"_index":748,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["appconfigmodule",{"_index":98,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["applications",{"_index":885,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":146,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":991,"title":{},"body":{"license.html":{}}}],["asc",{"_index":491,"title":{},"body":{"classes/PaginationDto.html":{}}}],["associated",{"_index":586,"title":{},"body":{"controllers/TaskController.html":{},"license.html":{}}}],["associates",{"_index":651,"title":{},"body":{"injectables/TaskService.html":{}}}],["async",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["asynchronously",{"_index":278,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["attempts",{"_index":649,"title":{},"body":{"injectables/TaskService.html":{}}}],["audience",{"_index":457,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["auth",{"_index":198,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.bearer",{"_index":620,"title":{},"body":{"controllers/TaskController.html":{}}}],["auth(authtype.none",{"_index":200,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["auth_type_key",{"_index":219,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticated",{"_index":465,"title":{},"body":{"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{}}}],["authenticateuser",{"_index":605,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":368,"title":{},"body":{"injectables/IamService.html":{}}}],["authentication/authentication.controller",{"_index":355,"title":{},"body":{"modules/IamModule.html":{}}}],["authentication/guards/access",{"_index":357,"title":{},"body":{"modules/IamModule.html":{}}}],["authentication/guards/authentication.guard",{"_index":358,"title":{},"body":{"modules/IamModule.html":{}}}],["authenticationcontroller",{"_index":173,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/IamModule.html":{},"coverage.html":{}}}],["authenticationguard",{"_index":209,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"modules/IamModule.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":229,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["author",{"_index":924,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["authors",{"_index":981,"title":{},"body":{"license.html":{}}}],["authtype",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/TaskController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":221,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":224,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":211,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":225,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":232,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authuserdata",{"_index":159,"title":{"interfaces/AuthUserData.html":{}},"body":{"interfaces/AuthUserData.html":{},"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["availability",{"_index":372,"title":{},"body":{"injectables/IamService.html":{},"injectables/UsersService.html":{}}}],["available",{"_index":998,"title":{},"body":{"modules.html":{}}}],["await",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":915,"title":{},"body":{"index.html":{}}}],["bad",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["base",{"_index":336,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/SignUpDto.html":{}}}],["based",{"_index":654,"title":{},"body":{"injectables/TaskService.html":{}}}],["basetododto",{"_index":246,"title":{"classes/BaseTodoDto.html":{}},"body":{"classes/BaseTodoDto.html":{},"classes/CreateTodoDto.html":{},"coverage.html":{}}}],["basetododto:11",{"_index":333,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["basetododto:13",{"_index":335,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["basetododto:8",{"_index":334,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["baseuserdto",{"_index":261,"title":{"classes/BaseUserDto.html":{}},"body":{"classes/BaseUserDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["baseuserdto:11",{"_index":537,"title":{},"body":{"classes/SignUpDto.html":{}}}],["baseuserdto:14",{"_index":539,"title":{},"body":{"classes/SignUpDto.html":{}}}],["baseuserdto:8",{"_index":538,"title":{},"body":{"classes/SignUpDto.html":{}}}],["bcrypt",{"_index":280,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":328,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(saltrounds",{"_index":318,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":320,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.provider",{"_index":530,"title":{},"body":{"injectables/PasswordService.html":{}}}],["bcryptprovider",{"_index":275,"title":{"injectables/BcryptProvider.html":{}},"body":{"injectables/BcryptProvider.html":{},"modules/IamModule.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["bearer",{"_index":870,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["being",{"_index":665,"title":{},"body":{"injectables/TaskService.html":{}}}],["body",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TaskController.html":{}}}],["boolean",{"_index":427,"title":{},"body":{"injectables/IamService.html":{},"classes/PaginationResultDto.html":{}}}],["bootstrap",{"_index":103,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":996,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":994,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":288,"title":{},"body":{"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/PasswordService.html":{}}}],["building",{"_index":880,"title":{},"body":{"index.html":{}}}],["c",{"_index":933,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":713,"title":{},"body":{"entities/User.html":{}}}],["catch",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["catch((err",{"_index":238,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["charge",{"_index":940,"title":{},"body":{"license.html":{}}}],["check",{"_index":736,"title":{},"body":{"injectables/UsersService.html":{}}}],["checker",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["checking",{"_index":371,"title":{},"body":{"injectables/IamService.html":{}}}],["checks",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/IamService.html":{}}}],["claim",{"_index":984,"title":{},"body":{"license.html":{}}}],["class",{"_index":73,"title":{"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"classes/CreateTodoDto.html":{},"classes/IdDto.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateTaskDto.html":{},"classes/ValidateEnv.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":247,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"classes/CreateTodoDto.html":{},"classes/IdDto.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateTaskDto.html":{},"classes/ValidateEnv.html":{},"overview.html":{}}}],["cluster_appconfigmodule",{"_index":106,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appconfigmodule_imports",{"_index":107,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_iammodule",{"_index":348,"title":{},"body":{"modules/IamModule.html":{},"overview.html":{}}}],["cluster_iammodule_imports",{"_index":349,"title":{},"body":{"modules/IamModule.html":{}}}],["cluster_iammodule_providers",{"_index":350,"title":{},"body":{"modules/IamModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":696,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":697,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":717,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":718,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":719,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":680,"title":{},"body":{"injectables/TaskService.html":{}}}],["column",{"_index":548,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["column({unique",{"_index":705,"title":{},"body":{"entities/User.html":{}}}],["common/dto/id",{"_index":612,"title":{},"body":{"controllers/TaskController.html":{}}}],["common/pagination/generic",{"_index":615,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["common/pagination/pagination.dto",{"_index":614,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["compare",{"_index":284,"title":{},"body":{"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{}}}],["compare(data",{"_index":287,"title":{},"body":{"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{}}}],["comparepassword",{"_index":520,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparepassword(data",{"_index":524,"title":{},"body":{"injectables/PasswordService.html":{}}}],["compares",{"_index":291,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{}}}],["comparison",{"_index":327,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["compodoc/compodoc",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":963,"title":{},"body":{"license.html":{}}}],["config/app.config.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["config/app.config.module.ts",{"_index":113,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["config/database/db.config.ts",{"_index":800,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/database/db.module.ts",{"_index":338,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config/environements/validate.env.ts",{"_index":746,"title":{},"body":{"classes/ValidateEnv.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["config/environements/validate.env.ts:14",{"_index":768,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:17",{"_index":766,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:20",{"_index":764,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:23",{"_index":765,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:27",{"_index":767,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:30",{"_index":762,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:33",{"_index":773,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:36",{"_index":763,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:40",{"_index":769,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:43",{"_index":770,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:46",{"_index":771,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:49",{"_index":772,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:52",{"_index":775,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/environements/validate.env.ts:55",{"_index":774,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["config/jwt/jwt.config",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/IamModule.html":{},"injectables/JwtTokenProvider.html":{}}}],["configmodule",{"_index":116,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":364,"title":{},"body":{"modules/IamModule.html":{}}}],["configmodule.forroot",{"_index":127,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseModule.html":{}}}],["configservice",{"_index":117,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/BcryptProvider.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"throttler_limit",{"_index":137,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice.get(\"throttler_ttl",{"_index":135,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice.getorthrow(\"datasource_database",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.getorthrow(\"datasource_host",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.getorthrow(\"datasource_password",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.getorthrow(\"datasource_port",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.getorthrow(\"datasource_username",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configtype",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/JwtTokenProvider.html":{}}}],["configuration",{"_index":455,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["conflictexception",{"_index":405,"title":{},"body":{"injectables/IamService.html":{}}}],["connected",{"_index":634,"title":{},"body":{"controllers/TaskController.html":{}}}],["connection",{"_index":992,"title":{},"body":{"license.html":{}}}],["console.log(\"retrieved",{"_index":230,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["const",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"miscellaneous/variables.html":{}}}],["constants/user.key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["constructor(bcryptprovider",{"_index":522,"title":{},"body":{"injectables/PasswordService.html":{}}}],["constructor(configservice",{"_index":285,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["constructor(jwtservice",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/JwtTokenProvider.html":{}}}],["constructor(partial",{"_index":508,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["constructor(private",{"_index":202,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/BcryptProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{}}}],["constructor(reflector",{"_index":214,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(taskrepository",{"_index":642,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(userrepository",{"_index":726,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":377,"title":{},"body":{"injectables/IamService.html":{}}}],["containing",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["context",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["context.getclass",{"_index":228,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":227,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["contract",{"_index":989,"title":{},"body":{"license.html":{}}}],["controller",{"_index":172,"title":{"controllers/AuthenticationController.html":{},"controllers/TaskController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["controller(\"todos",{"_index":621,"title":{},"body":{"controllers/TaskController.html":{}}}],["controllers",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/IamModule.html":{},"controllers/TaskController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["copies",{"_index":958,"title":{},"body":{"license.html":{}}}],["copy",{"_index":943,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":932,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":796,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":650,"title":{},"body":{"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"injectables/UsersService.html":{}}}],["createat",{"_index":543,"title":{},"body":{"entities/Task.html":{},"injectables/TaskService.html":{}}}],["created",{"_index":587,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":546,"title":{},"body":{"entities/Task.html":{}}}],["createparamdecorator",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":446,"title":{},"body":{"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["createtask",{"_index":637,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtask(todo",{"_index":646,"title":{},"body":{"injectables/TaskService.html":{}}}],["createtododto",{"_index":329,"title":{"classes/CreateTodoDto.html":{}},"body":{"classes/CreateTodoDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createuser",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(signupdto",{"_index":728,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":373,"title":{},"body":{"injectables/IamService.html":{},"injectables/TaskService.html":{}}}],["creation",{"_index":681,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["credentials",{"_index":384,"title":{},"body":{"injectables/IamService.html":{}}}],["ctx",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":985,"title":{},"body":{"license.html":{}}}],["data",{"_index":283,"title":{},"body":{"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["data.interface",{"_index":466,"title":{},"body":{"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{}}}],["data.interface.ts",{"_index":162,"title":{},"body":{"interfaces/AuthUserData.html":{},"coverage.html":{}}}],["database",{"_index":387,"title":{},"body":{"injectables/IamService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["database/db.module",{"_index":121,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["databasemodule",{"_index":108,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource_database",{"_index":749,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["datasource_host",{"_index":750,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["datasource_password",{"_index":751,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["datasource_port",{"_index":752,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["datasource_username",{"_index":753,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["date",{"_index":545,"title":{},"body":{"entities/Task.html":{}}}],["db.config",{"_index":342,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["deal",{"_index":946,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":993,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":102,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"classes/CreateTodoDto.html":{},"classes/IdDto.html":{},"classes/PaginationDto.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"entities/User.html":{},"classes/ValidateEnv.html":{}}}],["decorators/auth.decorators",{"_index":199,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{}}}],["default",{"_index":302,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationDto.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":213,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defined",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{}}}],["delete",{"_index":595,"title":{},"body":{"controllers/TaskController.html":{}}}],["delete(\":id",{"_index":631,"title":{},"body":{"controllers/TaskController.html":{}}}],["deleted",{"_index":575,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletes",{"_index":571,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["deletetask",{"_index":638,"title":{},"body":{"injectables/TaskService.html":{}}}],["deletetask(taskid",{"_index":652,"title":{},"body":{"injectables/TaskService.html":{}}}],["deletetodo",{"_index":564,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletetodo(userpayload",{"_index":568,"title":{},"body":{"controllers/TaskController.html":{}}}],["deletion",{"_index":657,"title":{},"body":{"injectables/TaskService.html":{}}}],["dependencies",{"_index":100,"title":{"dependencies.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":492,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/TaskService.html":{}}}],["description",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/BaseTodoDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":581,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["development",{"_index":893,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":954,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":797,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dto",{"_index":613,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["dto.ts",{"_index":434,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["dto.ts:6",{"_index":436,"title":{},"body":{"classes/IdDto.html":{}}}],["dto/create",{"_index":609,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["dto/sign",{"_index":739,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/update",{"_index":611,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["during",{"_index":309,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":903,"title":{},"body":{"index.html":{}}}],["each",{"_index":274,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["efficient",{"_index":881,"title":{},"body":{"index.html":{}}}],["email",{"_index":163,"title":{},"body":{"interfaces/AuthUserData.html":{},"classes/BaseUserDto.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enableimplicitconversion",{"_index":144,"title":{},"body":{"modules/AppConfigModule.html":{},"classes/ValidateEnv.html":{}}}],["encrypted",{"_index":289,"title":{},"body":{"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"injectables/UsersService.html":{}}}],["encryptedpassword",{"_index":525,"title":{},"body":{"injectables/PasswordService.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":541,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":398,"title":{"entities/Task.html":{},"entities/User.html":{}},"body":{"injectables/IamService.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["entity(\"todos",{"_index":559,"title":{},"body":{"entities/Task.html":{}}}],["entity/task.entity",{"_index":610,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{}}}],["entity/user.entity",{"_index":722,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["enum/auth",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{}}}],["enumerations",{"_index":866,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":130,"title":{},"body":{"modules/AppConfigModule.html":{},"classes/ValidateEnv.html":{}}}],["envfilepath",{"_index":129,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["environements/validate.env",{"_index":123,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["err",{"_index":239,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["error",{"_index":307,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{}}}],["error.code",{"_index":326,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/TaskService.html":{}}}],["error.message",{"_index":324,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/TaskService.html":{}}}],["errors",{"_index":234,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/ValidateEnv.html":{}}}],["errors.cause",{"_index":245,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["errors.length",{"_index":786,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["event",{"_index":980,"title":{},"body":{"license.html":{}}}],["example",{"_index":890,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":622,"title":{},"body":{"controllers/TaskController.html":{}}}],["exists",{"_index":386,"title":{},"body":{"injectables/IamService.html":{}}}],["expiration",{"_index":459,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["expiresin",{"_index":474,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["export",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"interfaces/HashAlgoInterface.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{}}}],["exports",{"_index":105,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":331,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateTaskDto.html":{}}}],["externals",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["extracted",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracts",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracttokenfromheader(request",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":323,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/UsersService.html":{}}}],["fails",{"_index":406,"title":{},"body":{"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":296,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/ValidateEnv.html":{}}}],["field",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"interfaces/HashAlgoInterface.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"coverage.html":{}}}],["files",{"_index":945,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":976,"title":{},"body":{"license.html":{}}}],["following",{"_index":962,"title":{},"body":{"license.html":{}}}],["forbidnonwhitelisted",{"_index":141,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["fork",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["found",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":879,"title":{},"body":{"index.html":{}}}],["free",{"_index":939,"title":{},"body":{"license.html":{}}}],["function",{"_index":648,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"coverage.html":{}}}],["functions",{"_index":872,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":961,"title":{},"body":{"license.html":{}}}],["generate",{"_index":477,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["generated",{"_index":301,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/JwtTokenProvider.html":{}}}],["generates",{"_index":279,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{}}}],["generatetoken",{"_index":441,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["generatetoken(user",{"_index":443,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["generating",{"_index":375,"title":{},"body":{"injectables/IamService.html":{}}}],["generation",{"_index":461,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["getalltasks",{"_index":678,"title":{},"body":{"injectables/TaskService.html":{}}}],["getalltodos",{"_index":565,"title":{},"body":{"controllers/TaskController.html":{}}}],["getalltodos(userpayload",{"_index":576,"title":{},"body":{"controllers/TaskController.html":{}}}],["getdbconfig",{"_index":341,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":875,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettodos",{"_index":566,"title":{},"body":{"controllers/TaskController.html":{}}}],["gettodos(userpayload",{"_index":584,"title":{},"body":{"controllers/TaskController.html":{}}}],["getuserentity",{"_index":639,"title":{},"body":{"injectables/TaskService.html":{}}}],["getuserentity(userid",{"_index":658,"title":{},"body":{"injectables/TaskService.html":{}}}],["given",{"_index":445,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["granted",{"_index":171,"title":{},"body":{"interfaces/AuthUserData.html":{},"license.html":{}}}],["graph",{"_index":997,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":910,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handling",{"_index":367,"title":{},"body":{"injectables/IamService.html":{}}}],["hash",{"_index":281,"title":{},"body":{"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{}}}],["hash(data",{"_index":298,"title":{},"body":{"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{}}}],["hashalgointerface",{"_index":305,"title":{"interfaces/HashAlgoInterface.html":{}},"body":{"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"coverage.html":{}}}],["hashed",{"_index":300,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashedpassword",{"_index":414,"title":{},"body":{"injectables/IamService.html":{}}}],["hashes",{"_index":402,"title":{},"body":{"injectables/IamService.html":{}}}],["hashing",{"_index":310,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{}}}],["hashprovider",{"_index":322,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["haspassword",{"_index":521,"title":{},"body":{"injectables/PasswordService.html":{}}}],["haspassword(data",{"_index":527,"title":{},"body":{"injectables/PasswordService.html":{}}}],["header",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["headers",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["here",{"_index":921,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":938,"title":{},"body":{"license.html":{}}}],["holders",{"_index":982,"title":{},"body":{"license.html":{}}}],["host",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":596,"title":{},"body":{"controllers/TaskController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":630,"title":{},"body":{"controllers/TaskController.html":{}}}],["httpcode(httpstatus.no_content)@delete(':id",{"_index":569,"title":{},"body":{"controllers/TaskController.html":{}}}],["https://nestjs.com",{"_index":928,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":597,"title":{},"body":{"controllers/TaskController.html":{}}}],["i${salt",{"_index":319,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["i${saltrounds",{"_index":316,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["iam.service",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/IamModule.html":{}}}],["iam/authenticated",{"_index":608,"title":{},"body":{"controllers/TaskController.html":{}}}],["iam/authentication/decorators/auth.decorators",{"_index":601,"title":{},"body":{"controllers/TaskController.html":{}}}],["iam/authentication/enum/auth",{"_index":602,"title":{},"body":{"controllers/TaskController.html":{}}}],["iam/decorator/authenticated",{"_index":606,"title":{},"body":{"controllers/TaskController.html":{}}}],["iam/iam.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["iammodule",{"_index":149,"title":{"modules/IamModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IamModule.html":{},"modules.html":{},"overview.html":{}}}],["iamservice",{"_index":189,"title":{"injectables/IamService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"coverage.html":{},"overview.html":{}}}],["id",{"_index":170,"title":{},"body":{"interfaces/AuthUserData.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["iddto",{"_index":432,"title":{"classes/IdDto.html":{}},"body":{"classes/IdDto.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["identifier",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["ifemailused",{"_index":725,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifemailused(email",{"_index":734,"title":{},"body":{"injectables/UsersService.html":{}}}],["implements",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{}}}],["implied",{"_index":972,"title":{},"body":{"license.html":{}}}],["import",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{}}}],["imports",{"_index":114,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["in.dto",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{}}}],["in.dto.ts",{"_index":479,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["included",{"_index":967,"title":{},"body":{"license.html":{}}}],["includes",{"_index":453,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["including",{"_index":664,"title":{},"body":{"injectables/TaskService.html":{},"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"interfaces/HashAlgoInterface.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{}}}],["information",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/IamService.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["inherited",{"_index":332,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/SignUpDto.html":{}}}],["inject",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtTokenProvider.html":{}}}],["inject(jwtconfig.key",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/JwtTokenProvider.html":{}}}],["injectable",{"_index":62,"title":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":276,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":670,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(task",{"_index":671,"title":{},"body":{"injectables/TaskService.html":{}}}],["injectrepository(user",{"_index":672,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":889,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":892,"title":{},"body":{"index.html":{}}}],["instance",{"_index":235,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instance.canactivate(context",{"_index":237,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["interface",{"_index":158,"title":{"interfaces/AuthUserData.html":{},"interfaces/HashAlgoInterface.html":{}},"body":{"interfaces/AuthUserData.html":{},"interfaces/HashAlgoInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":160,"title":{},"body":{"interfaces/AuthUserData.html":{},"interfaces/HashAlgoInterface.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":304,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{}}}],["internalservererrorexception(\"database",{"_index":421,"title":{},"body":{"injectables/IamService.html":{}}}],["internalservererrorexception(\"failed",{"_index":690,"title":{},"body":{"injectables/TaskService.html":{}}}],["internalservererrorexception(\"validation",{"_index":793,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["invalid",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/IamService.html":{}}}],["isemail",{"_index":272,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["isglobal",{"_index":128,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["isint",{"_index":437,"title":{},"body":{"classes/IdDto.html":{}}}],["isnotempty",{"_index":257,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"classes/ValidateEnv.html":{}}}],["isnotempty()@isemail",{"_index":265,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/SignUpDto.html":{}}}],["isnotempty()@isstring",{"_index":251,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"classes/CreateTodoDto.html":{},"classes/SignUpDto.html":{},"classes/ValidateEnv.html":{}}}],["isnumber",{"_index":777,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["isnumber()@ispositive",{"_index":761,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["isoptional",{"_index":498,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isoptional()@isstring",{"_index":493,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isoptional()@type(undefined)@ispositive",{"_index":489,"title":{},"body":{"classes/PaginationDto.html":{}}}],["ispositive",{"_index":438,"title":{},"body":{"classes/IdDto.html":{},"classes/PaginationDto.html":{},"classes/ValidateEnv.html":{}}}],["ispositive()@isint",{"_index":435,"title":{},"body":{"classes/IdDto.html":{}}}],["issamepassword",{"_index":426,"title":{},"body":{"injectables/IamService.html":{}}}],["isstring",{"_index":258,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"classes/PaginationDto.html":{},"classes/ValidateEnv.html":{}}}],["isstrongpassword",{"_index":535,"title":{},"body":{"classes/SignUpDto.html":{}}}],["issuer",{"_index":458,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["join",{"_index":917,"title":{},"body":{"index.html":{}}}],["jordach",{"_index":935,"title":{},"body":{"license.html":{},"properties.html":{}}}],["json",{"_index":447,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["jwt",{"_index":360,"title":{},"body":{"modules/IamModule.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{}}}],["jwt_secret",{"_index":754,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["jwt_token_audience",{"_index":755,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["jwt_token_issuer",{"_index":756,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["jwt_token_ttl",{"_index":757,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["jwtconfig",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/IamModule.html":{},"injectables/JwtTokenProvider.html":{}}}],["jwtconfiguration",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/JwtTokenProvider.html":{}}}],["jwtmodule",{"_index":356,"title":{},"body":{"modules/IamModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":363,"title":{},"body":{"modules/IamModule.html":{}}}],["jwtservice",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/JwtTokenProvider.html":{}}}],["jwttokenprovider",{"_index":351,"title":{"injectables/JwtTokenProvider.html":{}},"body":{"modules/IamModule.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":925,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":971,"title":{},"body":{"license.html":{}}}],["legend",{"_index":101,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["liability",{"_index":986,"title":{},"body":{"license.html":{}}}],["liable",{"_index":983,"title":{},"body":{"license.html":{}}}],["license",{"_index":931,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":907,"title":{},"body":{"index.html":{}}}],["limit",{"_index":136,"title":{},"body":{"modules/AppConfigModule.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["limitation",{"_index":949,"title":{},"body":{"license.html":{}}}],["limited",{"_index":973,"title":{},"body":{"license.html":{}}}],["list",{"_index":1008,"title":{},"body":{"properties.html":{}}}],["logged",{"_index":462,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["logger",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{}}}],["logger(\"accesstokenguard",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["logger(\"authenticationcontroller",{"_index":201,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logger(\"authenticationguard",{"_index":220,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["logger(\"iamhashprovider",{"_index":303,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["logger(\"iamservice",{"_index":410,"title":{},"body":{"injectables/IamService.html":{}}}],["logger(\"jwttokenprovider",{"_index":464,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["logger(\"taskservice",{"_index":669,"title":{},"body":{"injectables/TaskService.html":{}}}],["logger(\"usersservice",{"_index":738,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(\"validate",{"_index":780,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["logger(passwordservice.name",{"_index":529,"title":{},"body":{"injectables/PasswordService.html":{}}}],["logger.debug(`${errors.tostring",{"_index":792,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["logger.log(\"all",{"_index":794,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["logger.log(`${errors.length",{"_index":788,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["login",{"_index":175,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{}}}],["login(@body",{"_index":207,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(logindto",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{}}}],["logindto",{"_index":178,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{},"classes/LogInDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":429,"title":{},"body":{"injectables/IamService.html":{}}}],["logs",{"_index":382,"title":{},"body":{"injectables/IamService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["makaya",{"_index":936,"title":{},"body":{"license.html":{},"properties.html":{}}}],["manage",{"_index":1007,"title":{},"body":{"properties.html":{}}}],["manytoone",{"_index":557,"title":{},"body":{"entities/Task.html":{}}}],["manytoone(undefined",{"_index":555,"title":{},"body":{"entities/Task.html":{}}}],["matches",{"_index":295,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["matching",{"_index":96,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"interfaces/HashAlgoInterface.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalcount",{"_index":676,"title":{},"body":{"injectables/TaskService.html":{}}}],["merchantability",{"_index":975,"title":{},"body":{"license.html":{}}}],["merge",{"_index":952,"title":{},"body":{"license.html":{}}}],["message",{"_index":391,"title":{},"body":{"injectables/IamService.html":{}}}],["metadata",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":385,"title":{},"body":{"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{}}}],["methods",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":865,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":789,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["mit",{"_index":906,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":896,"title":{},"body":{"index.html":{}}}],["modify",{"_index":951,"title":{},"body":{"license.html":{}}}],["module",{"_index":97,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":99,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":920,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":926,"title":{},"body":{"index.html":{}}}],["name",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":886,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":930,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"injectables/BcryptProvider.html":{},"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"injectables/JwtTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":120,"title":{},"body":{"modules/AppConfigModule.html":{},"guards/AuthenticationGuard.html":{},"modules/IamModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/IamModule.html":{},"injectables/JwtTokenProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":482,"title":{},"body":{"classes/LogInDto.html":{},"classes/UpdateTaskDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":126,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/TaskController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":340,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"coverage.html":{}}}],["newly",{"_index":408,"title":{},"body":{"injectables/IamService.html":{},"injectables/UsersService.html":{}}}],["newuser",{"_index":743,"title":{},"body":{"injectables/UsersService.html":{}}}],["nextpage",{"_index":504,"title":{},"body":{"classes/PaginationResultDto.html":{},"injectables/TaskService.html":{}}}],["node",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["node.js",{"_index":878,"title":{},"body":{"index.html":{}}}],["none",{"_index":871,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":979,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":598,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["notfoundexception(\"user",{"_index":626,"title":{},"body":{"controllers/TaskController.html":{}}}],["notfoundexception(`not",{"_index":633,"title":{},"body":{"controllers/TaskController.html":{}}}],["notfoundexception(`task",{"_index":688,"title":{},"body":{"injectables/TaskService.html":{}}}],["notice",{"_index":965,"title":{},"body":{"license.html":{}}}],["null",{"_index":623,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":166,"title":{},"body":{"interfaces/AuthUserData.html":{},"classes/IdDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"classes/ValidateEnv.html":{}}}],["object",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["object.assign(this",{"_index":518,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["obtaining",{"_index":942,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":242,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["occurs",{"_index":308,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["omittype",{"_index":481,"title":{},"body":{"classes/LogInDto.html":{}}}],["omittype(signupdto",{"_index":480,"title":{},"body":{"classes/LogInDto.html":{}}}],["once",{"_index":574,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["ondelete",{"_index":712,"title":{},"body":{"entities/User.html":{}}}],["onetomany",{"_index":715,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":710,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":908,"title":{},"body":{"index.html":{}}}],["operation",{"_index":732,"title":{},"body":{"injectables/UsersService.html":{}}}],["operations",{"_index":369,"title":{},"body":{"injectables/IamService.html":{}}}],["optional",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":783,"title":{},"body":{"classes/ValidateEnv.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":485,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/TaskService.html":{}}}],["organize",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["otherwise",{"_index":297,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["out",{"_index":111,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":999,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":829,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":486,"title":{},"body":{"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/TaskService.html":{}}}],["paginated",{"_index":582,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["paginates",{"_index":579,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["paginatetasksforuser",{"_index":640,"title":{},"body":{"injectables/TaskService.html":{}}}],["paginatetasksforuser(paginationdto",{"_index":662,"title":{},"body":{"injectables/TaskService.html":{}}}],["pagination",{"_index":502,"title":{},"body":{"classes/PaginationResultDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["paginationdto",{"_index":483,"title":{"classes/PaginationDto.html":{}},"body":{"classes/PaginationDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["paginationresultdto",{"_index":500,"title":{"classes/PaginationResultDto.html":{}},"body":{"classes/PaginationResultDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["param",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":509,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["partialtype",{"_index":703,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["partialtype(createtododto",{"_index":702,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["particular",{"_index":977,"title":{},"body":{"license.html":{}}}],["password",{"_index":388,"title":{},"body":{"injectables/IamService.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password/bcrypt.provider",{"_index":354,"title":{},"body":{"modules/IamModule.html":{}}}],["password/password.service",{"_index":359,"title":{},"body":{"modules/IamModule.html":{},"injectables/IamService.html":{}}}],["passwordservice",{"_index":352,"title":{"injectables/PasswordService.html":{}},"body":{"modules/IamModule.html":{},"injectables/IamService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["payload",{"_index":449,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["per",{"_index":499,"title":{},"body":{"classes/PaginationDto.html":{}}}],["performing",{"_index":668,"title":{},"body":{"injectables/TaskService.html":{}}}],["permission",{"_index":937,"title":{},"body":{"license.html":{}}}],["permit",{"_index":959,"title":{},"body":{"license.html":{}}}],["person",{"_index":941,"title":{},"body":{"license.html":{}}}],["persons",{"_index":960,"title":{},"body":{"license.html":{}}}],["pg",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["plaintoinstance",{"_index":776,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["plaintoinstance(validateenv",{"_index":782,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["please",{"_index":918,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":969,"title":{},"body":{"license.html":{}}}],["post",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/TaskController.html":{}}}],["post(\"login",{"_index":206,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post(\"register",{"_index":203,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('login",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":185,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["postgres",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":562,"title":{},"body":{"controllers/TaskController.html":{}}}],["prettier",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["previouspage",{"_index":505,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["primarygeneratedcolumn",{"_index":550,"title":{},"body":{"entities/Task.html":{},"entities/User.html":{}}}],["private",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":311,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/TaskService.html":{}}}],["production",{"_index":898,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":877,"title":{},"body":{"index.html":{}}}],["project",{"_index":909,"title":{},"body":{"index.html":{}}}],["promise",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["promise.resolve",{"_index":236,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["proper",{"_index":790,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["properties",{"_index":23,"title":{"properties.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/AuthUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"properties.html":{}}}],["property",{"_index":169,"title":{},"body":{"interfaces/AuthUserData.html":{}}}],["provide",{"_index":138,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/IamModule.html":{}}}],["provided",{"_index":282,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["provider",{"_index":417,"title":{},"body":{"injectables/IamService.html":{}}}],["providers",{"_index":104,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":370,"title":{},"body":{"injectables/IamService.html":{}}}],["publish",{"_index":953,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":978,"title":{},"body":{"license.html":{}}}],["put",{"_index":599,"title":{},"body":{"controllers/TaskController.html":{}}}],["put(\":id",{"_index":628,"title":{},"body":{"controllers/TaskController.html":{}}}],["put(':id",{"_index":590,"title":{},"body":{"controllers/TaskController.html":{}}}],["query",{"_index":600,"title":{},"body":{"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["querying",{"_index":737,"title":{},"body":{"injectables/UsersService.html":{}}}],["read",{"_index":919,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":222,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/ValidateEnv.html":{},"miscellaneous/functions.html":{}}}],["reflect",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":215,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/IamModule.html":{}}}],["registered",{"_index":409,"title":{},"body":{"injectables/IamService.html":{}}}],["registers",{"_index":397,"title":{},"body":{"injectables/IamService.html":{}}}],["registration",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{}}}],["registration(@body",{"_index":204,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["registration(signupdto",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{}}}],["repository",{"_index":404,"title":{},"body":{"injectables/IamService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesting",{"_index":656,"title":{},"body":{"injectables/TaskService.html":{}}}],["reset",{"_index":110,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":294,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["restful",{"_index":1004,"title":{},"body":{"properties.html":{}}}],["restriction",{"_index":948,"title":{},"body":{"license.html":{}}}],["result",{"_index":583,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["result.affected",{"_index":693,"title":{},"body":{"injectables/TaskService.html":{}}}],["result.dto",{"_index":616,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["result.dto.ts",{"_index":503,"title":{},"body":{"classes/PaginationResultDto.html":{},"coverage.html":{}}}],["result.dto.ts:2",{"_index":512,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["result.dto.ts:3",{"_index":515,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["result.dto.ts:4",{"_index":513,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["result.dto.ts:5",{"_index":516,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["result.dto.ts:6",{"_index":517,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["result.dto.ts:7",{"_index":514,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["result.dto.ts:8",{"_index":510,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["results",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"interfaces/HashAlgoInterface.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":661,"title":{},"body":{"injectables/TaskService.html":{}}}],["retrieves",{"_index":578,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["return",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"injectables/PasswordService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["rights",{"_index":950,"title":{},"body":{"license.html":{}}}],["run",{"_index":856,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["rxjs",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":317,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["salt_round",{"_index":758,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["saltrounds",{"_index":312,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":420,"title":{},"body":{"injectables/IamService.html":{}}}],["saveduser",{"_index":418,"title":{},"body":{"injectables/IamService.html":{}}}],["saves",{"_index":403,"title":{},"body":{"injectables/IamService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["saving",{"_index":407,"title":{},"body":{"injectables/IamService.html":{}}}],["scalable",{"_index":882,"title":{},"body":{"index.html":{}}}],["script",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["secret",{"_index":452,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["security",{"_index":733,"title":{},"body":{"injectables/UsersService.html":{}}}],["sell",{"_index":957,"title":{},"body":{"license.html":{}}}],["server",{"_index":883,"title":{},"body":{"index.html":{}}}],["service",{"_index":366,"title":{},"body":{"injectables/IamService.html":{}}}],["setmetadata(auth_type_key",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":966,"title":{},"body":{"license.html":{}}}],["side",{"_index":884,"title":{},"body":{"index.html":{}}}],["sign",{"_index":399,"title":{},"body":{"injectables/IamService.html":{},"classes/LogInDto.html":{},"injectables/UsersService.html":{}}}],["signed",{"_index":450,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["signin",{"_index":425,"title":{},"body":{"injectables/IamService.html":{}}}],["signup",{"_index":424,"title":{},"body":{"injectables/IamService.html":{}}}],["signupdto",{"_index":184,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["signupdto.password",{"_index":416,"title":{},"body":{"injectables/IamService.html":{}}}],["skip",{"_index":674,"title":{},"body":{"injectables/TaskService.html":{}}}],["skipmissingproperties",{"_index":785,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["software",{"_index":944,"title":{},"body":{"license.html":{}}}],["somme",{"_index":241,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["sortby",{"_index":487,"title":{},"body":{"classes/PaginationDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"modules/DatabaseModule.html":{},"interfaces/HashAlgoInterface.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/LogInDto.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"classes/UpdateTaskDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"index.html":{}}}],["specific",{"_index":580,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["specified",{"_index":451,"title":{},"body":{"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{}}}],["sponsors",{"_index":912,"title":{},"body":{"index.html":{}}}],["src/.../auth",{"_index":867,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.decorators.ts",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authenticated",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../db.config.ts",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":873,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.key.ts",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validate.env.ts",{"_index":874,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app",{"_index":112,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseModule.html":{},"classes/ValidateEnv.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/dto/id",{"_index":433,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/common/pagination/generic",{"_index":501,"title":{},"body":{"classes/PaginationResultDto.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.dto.ts",{"_index":484,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.dto.ts:12",{"_index":490,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/common/pagination/pagination.dto.ts:15",{"_index":497,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/common/pagination/pagination.dto.ts:18",{"_index":494,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/common/pagination/pagination.dto.ts:8",{"_index":496,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/iam/authenticated",{"_index":161,"title":{},"body":{"interfaces/AuthUserData.html":{},"coverage.html":{}}}],["src/iam/authentication/authentication.controller.ts",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/iam/authentication/authentication.controller.ts:15",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/authentication.controller.ts:20",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/iam/authentication/constants/user.key.ts",{"_index":810,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/decorators/auth.decorators.ts",{"_index":811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/authentication/enum/auth",{"_index":869,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/iam/authentication/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/authentication.guard.ts",{"_index":210,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/iam/authentication/guards/authentication.guard.ts:24",{"_index":216,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/iam/authentication/guards/authentication.guard.ts:30",{"_index":217,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/iam/decorator/authenticated",{"_index":815,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/iam/iam.module.ts",{"_index":353,"title":{},"body":{"modules/IamModule.html":{}}}],["src/iam/iam.service.ts",{"_index":365,"title":{},"body":{"injectables/IamService.html":{},"coverage.html":{}}}],["src/iam/iam.service.ts:23",{"_index":379,"title":{},"body":{"injectables/IamService.html":{}}}],["src/iam/iam.service.ts:40",{"_index":396,"title":{},"body":{"injectables/IamService.html":{}}}],["src/iam/iam.service.ts:77",{"_index":381,"title":{},"body":{"injectables/IamService.html":{}}}],["src/iam/jwt",{"_index":439,"title":{},"body":{"injectables/JwtTokenProvider.html":{},"coverage.html":{}}}],["src/iam/password/bcrypt.provider.ts",{"_index":277,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/iam/password/bcrypt.provider.ts:20",{"_index":286,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/iam/password/bcrypt.provider.ts:30",{"_index":299,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/iam/password/bcrypt.provider.ts:53",{"_index":290,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/iam/password/hash",{"_index":344,"title":{},"body":{"interfaces/HashAlgoInterface.html":{},"coverage.html":{}}}],["src/iam/password/password.service.ts",{"_index":519,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["src/iam/password/password.service.ts:12",{"_index":526,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/iam/password/password.service.ts:6",{"_index":523,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/iam/password/password.service.ts:9",{"_index":528,"title":{},"body":{"injectables/PasswordService.html":{}}}],["src/main.ts",{"_index":821,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/dto/base",{"_index":248,"title":{},"body":{"classes/BaseTodoDto.html":{},"coverage.html":{}}}],["src/tasks/dto/create",{"_index":330,"title":{},"body":{"classes/CreateTodoDto.html":{},"coverage.html":{}}}],["src/tasks/dto/update",{"_index":701,"title":{},"body":{"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/entity/task.entity.ts",{"_index":542,"title":{},"body":{"entities/Task.html":{},"coverage.html":{}}}],["src/tasks/entity/task.entity.ts:14",{"_index":551,"title":{},"body":{"entities/Task.html":{}}}],["src/tasks/entity/task.entity.ts:16",{"_index":552,"title":{},"body":{"entities/Task.html":{}}}],["src/tasks/entity/task.entity.ts:18",{"_index":549,"title":{},"body":{"entities/Task.html":{}}}],["src/tasks/entity/task.entity.ts:20",{"_index":556,"title":{},"body":{"entities/Task.html":{}}}],["src/tasks/entity/task.entity.ts:23",{"_index":547,"title":{},"body":{"entities/Task.html":{}}}],["src/tasks/entity/task.entity.ts:25",{"_index":554,"title":{},"body":{"entities/Task.html":{}}}],["src/tasks/task.controller.ts",{"_index":561,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/tasks/task.controller.ts:112",{"_index":577,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/tasks/task.controller.ts:43",{"_index":585,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/tasks/task.controller.ts:66",{"_index":591,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/tasks/task.controller.ts:90",{"_index":570,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/tasks/task.service.ts",{"_index":636,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/tasks/task.service.ts:111",{"_index":667,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:143",{"_index":653,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:18",{"_index":644,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:32",{"_index":663,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:75",{"_index":647,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/task.service.ts:92",{"_index":659,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/tasks/tasks.module.ts",{"_index":698,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/users/dto/base",{"_index":262,"title":{},"body":{"classes/BaseUserDto.html":{},"coverage.html":{}}}],["src/users/dto/log",{"_index":478,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/users/dto/sign",{"_index":533,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/users/entity/user.entity.ts",{"_index":704,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entity/user.entity.ts:11",{"_index":706,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:13",{"_index":709,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:15",{"_index":714,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:7",{"_index":707,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:9",{"_index":708,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":720,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":723,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:13",{"_index":727,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":735,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:46",{"_index":729,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":894,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":897,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":899,"title":{},"body":{"index.html":{}}}],["started",{"_index":876,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":888,"title":{},"body":{"index.html":{}}}],["statements",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":212,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["stay",{"_index":922,"title":{},"body":{"index.html":{}}}],["stored",{"_index":389,"title":{},"body":{"injectables/IamService.html":{}}}],["storeduser",{"_index":412,"title":{},"body":{"injectables/IamService.html":{}}}],["storeduser.password",{"_index":430,"title":{},"body":{"injectables/IamService.html":{}}}],["string",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/AuthUserData.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"interfaces/HashAlgoInterface.html":{},"classes/PaginationDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":164,"title":{},"body":{"interfaces/AuthUserData.html":{},"injectables/JwtTokenProvider.html":{}}}],["subject",{"_index":167,"title":{},"body":{"interfaces/AuthUserData.html":{},"license.html":{}}}],["subject's",{"_index":165,"title":{},"body":{"interfaces/AuthUserData.html":{}}}],["sublicense",{"_index":955,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":968,"title":{},"body":{"license.html":{}}}],["success",{"_index":390,"title":{},"body":{"injectables/IamService.html":{}}}],["successful",{"_index":395,"title":{},"body":{"injectables/IamService.html":{}}}],["successfully",{"_index":795,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["such",{"_index":456,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["support",{"_index":913,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":995,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":730,"title":{},"body":{"injectables/UsersService.html":{}}}],["t",{"_index":511,"title":{},"body":{"classes/PaginationResultDto.html":{}}}],["table",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":675,"title":{},"body":{"injectables/TaskService.html":{}}}],["takes",{"_index":731,"title":{},"body":{"injectables/UsersService.html":{}}}],["task",{"_index":268,"title":{"entities/Task.html":{}},"body":{"classes/BaseUserDto.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["task.controller",{"_index":699,"title":{},"body":{"modules/TasksModule.html":{}}}],["task.service",{"_index":604,"title":{},"body":{"controllers/TaskController.html":{},"modules/TasksModule.html":{}}}],["task.user",{"_index":711,"title":{},"body":{"entities/User.html":{}}}],["taskcontroller",{"_index":560,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["taskid",{"_index":655,"title":{},"body":{"injectables/TaskService.html":{}}}],["taskrepository",{"_index":645,"title":{},"body":{"injectables/TaskService.html":{}}}],["tasks",{"_index":264,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{}}}],["tasks/entity/task.entity",{"_index":271,"title":{},"body":{"classes/BaseUserDto.html":{},"entities/User.html":{}}}],["tasks/tasks.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["taskservice",{"_index":603,"title":{"injectables/TaskService.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{}}}],["tasksmodule",{"_index":150,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["test",{"_index":902,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":905,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":904,"title":{},"body":{"index.html":{}}}],["tests",{"_index":901,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":911,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":223,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":233,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.bcryptprovider.compare(data",{"_index":532,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.bcryptprovider.hash(data",{"_index":531,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.configservice.getorthrow(\"salt_round",{"_index":313,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["this.extracttokenfromheader(request",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.iamservice.login(logindto",{"_index":208,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.iamservice.registration(signupdto",{"_index":205,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.jwtconfiguration",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":475,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":471,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":472,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":473,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["this.jwtservice.signasync",{"_index":468,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwttokenprovider.generatetoken(saveduser",{"_index":422,"title":{},"body":{"injectables/IamService.html":{}}}],["this.jwttokenprovider.generatetoken(storeduser",{"_index":431,"title":{},"body":{"injectables/IamService.html":{}}}],["this.logger.error(\"failed",{"_index":677,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.logger.error(`code",{"_index":684,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.logger.error(`error",{"_index":679,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.logger.log",{"_index":240,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.logger.log(\"failed",{"_index":476,"title":{},"body":{"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{}}}],["this.logger.log(\"iam",{"_index":321,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/UsersService.html":{}}}],["this.logger.log(`code",{"_index":325,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["this.logger.log(`iam",{"_index":315,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["this.logger.log(`task",{"_index":694,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.logger.warn",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.logger.warn(`${error.message",{"_index":742,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.passwordservice.comparepassword",{"_index":428,"title":{},"body":{"injectables/IamService.html":{}}}],["this.passwordservice.haspassword",{"_index":415,"title":{},"body":{"injectables/IamService.html":{}}}],["this.reflector.getallandoverride",{"_index":226,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.taskrepository.create",{"_index":682,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.delete(taskid",{"_index":692,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.findandcount",{"_index":673,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.findoneby",{"_index":691,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.preload",{"_index":687,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save(task",{"_index":683,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.save(updatedtask",{"_index":689,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.createtask(todo",{"_index":627,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.deletetask(id",{"_index":632,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.getuserentity",{"_index":624,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.paginatetasksforuser(paginationdto",{"_index":635,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.updatetask(id",{"_index":629,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.userrepository.create",{"_index":744,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":741,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":685,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.userrepository.save(newuser",{"_index":745,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.createuser",{"_index":419,"title":{},"body":{"injectables/IamService.html":{}}}],["this.userservice.ifemailused(logindto.email",{"_index":423,"title":{},"body":{"injectables/IamService.html":{}}}],["this.userservice.ifemailused(signupdto.email",{"_index":413,"title":{},"body":{"injectables/IamService.html":{}}}],["throttle",{"_index":617,"title":{},"body":{"controllers/TaskController.html":{}}}],["throttler_limit",{"_index":759,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["throttler_ttl",{"_index":760,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["throttlerguard",{"_index":124,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["throttlermodule",{"_index":125,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["throttlermodule.forrootasync",{"_index":132,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["throw",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{}}}],["thrown",{"_index":463,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["throws",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":460,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["title",{"_index":250,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/CreateTodoDto.html":{},"entities/Task.html":{}}}],["todo",{"_index":572,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["todo.dto",{"_index":337,"title":{},"body":{"classes/CreateTodoDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{}}}],["todo.dto.ts",{"_index":249,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/CreateTodoDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["todo.dto.ts:11",{"_index":252,"title":{},"body":{"classes/BaseTodoDto.html":{}}}],["todo.dto.ts:13",{"_index":255,"title":{},"body":{"classes/BaseTodoDto.html":{}}}],["todo.dto.ts:8",{"_index":253,"title":{},"body":{"classes/BaseTodoDto.html":{}}}],["todos",{"_index":563,"title":{},"body":{"controllers/TaskController.html":{}}}],["token",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/AuthUserData.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{}}}],["token.guard",{"_index":218,"title":{},"body":{"guards/AuthenticationGuard.html":{},"modules/IamModule.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:22",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:30",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:53",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.provider",{"_index":361,"title":{},"body":{"modules/IamModule.html":{},"injectables/IamService.html":{}}}],["token.provider.ts",{"_index":440,"title":{},"body":{"injectables/JwtTokenProvider.html":{},"coverage.html":{}}}],["token.provider.ts:15",{"_index":442,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["token.provider.ts:34",{"_index":444,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["tokens",{"_index":376,"title":{},"body":{"injectables/IamService.html":{}}}],["tort",{"_index":990,"title":{},"body":{"license.html":{}}}],["totalcount",{"_index":506,"title":{},"body":{"classes/PaginationResultDto.html":{},"injectables/TaskService.html":{}}}],["totalpages",{"_index":507,"title":{},"body":{"classes/PaginationResultDto.html":{},"injectables/TaskService.html":{}}}],["touch",{"_index":923,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":392,"title":{},"body":{"injectables/IamService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["transform",{"_index":142,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["transformer",{"_index":260,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"classes/PaginationDto.html":{},"classes/ValidateEnv.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":143,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["true",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/SignUpDto.html":{},"entities/User.html":{},"classes/ValidateEnv.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["trying",{"_index":243,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["ts",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["ttl",{"_index":134,"title":{},"body":{"modules/AppConfigModule.html":{},"controllers/TaskController.html":{}}}],["twitter",{"_index":929,"title":{},"body":{"index.html":{}}}],["type",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/AuthUserData.html":{},"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTodoDto.html":{},"interfaces/HashAlgoInterface.html":{},"injectables/IamService.html":{},"classes/IdDto.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationDto.html":{},"classes/PaginationResultDto.html":{},"injectables/PasswordService.html":{},"classes/SignUpDto.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/ValidateEnv.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type(undefined",{"_index":254,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/CreateTodoDto.html":{}}}],["type(undefined)@validatenested({each",{"_index":269,"title":{},"body":{"classes/BaseUserDto.html":{},"classes/SignUpDto.html":{}}}],["type.enum",{"_index":197,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/AuthenticationGuard.html":{},"controllers/TaskController.html":{}}}],["type.enum.ts",{"_index":868,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":558,"title":{},"body":{"entities/Task.html":{},"injectables/TaskService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":339,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":700,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":362,"title":{},"body":{"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":343,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":231,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/LogInDto.html":{},"classes/UpdateTaskDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":887,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{}}}],["undefined",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/TaskController.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":716,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":900,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["up",{"_index":400,"title":{},"body":{"injectables/IamService.html":{},"injectables/UsersService.html":{}}}],["up.dto",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{},"classes/LogInDto.html":{},"injectables/UsersService.html":{}}}],["up.dto.ts",{"_index":534,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["up.dto.ts:6",{"_index":536,"title":{},"body":{"classes/SignUpDto.html":{}}}],["update",{"_index":593,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updateat",{"_index":544,"title":{},"body":{"entities/Task.html":{}}}],["updated",{"_index":594,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatedatecolumn",{"_index":553,"title":{},"body":{"entities/Task.html":{}}}],["updatedtask",{"_index":686,"title":{},"body":{"injectables/TaskService.html":{}}}],["updates",{"_index":592,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["updatetask",{"_index":641,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetask(taskid",{"_index":666,"title":{},"body":{"injectables/TaskService.html":{}}}],["updatetaskdto",{"_index":589,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updatetodo",{"_index":567,"title":{},"body":{"controllers/TaskController.html":{}}}],["updatetodo(userpayload",{"_index":588,"title":{},"body":{"controllers/TaskController.html":{}}}],["upon",{"_index":394,"title":{},"body":{"injectables/IamService.html":{}}}],["use",{"_index":244,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/IamService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["useclass",{"_index":145,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/IamModule.html":{}}}],["usefactory",{"_index":133,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseModule.html":{}}}],["user",{"_index":15,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/AuthUserData.html":{},"classes/BaseTodoDto.html":{},"classes/CreateTodoDto.html":{},"modules/IamModule.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":393,"title":{},"body":{"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"controllers/TaskController.html":{},"injectables/UsersService.html":{}}}],["user.decorator",{"_index":607,"title":{},"body":{"controllers/TaskController.html":{}}}],["user.decorator.ts",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":540,"title":{},"body":{"classes/SignUpDto.html":{}}}],["user.dto.ts",{"_index":263,"title":{},"body":{"classes/BaseUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":266,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["user.dto.ts:14",{"_index":270,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["user.dto.ts:8",{"_index":267,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["user.email",{"_index":470,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["user.id",{"_index":469,"title":{},"body":{"injectables/JwtTokenProvider.html":{},"entities/Task.html":{}}}],["user.name",{"_index":695,"title":{},"body":{"injectables/TaskService.html":{}}}],["user?.[field",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":660,"title":{},"body":{"injectables/TaskService.html":{}}}],["username",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userpayload",{"_index":573,"title":{},"body":{"controllers/TaskController.html":{}}}],["userpayload.sub",{"_index":625,"title":{},"body":{"controllers/TaskController.html":{}}}],["userrepository",{"_index":643,"title":{},"body":{"injectables/TaskService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":374,"title":{},"body":{"injectables/IamService.html":{},"properties.html":{}}}],["users.service",{"_index":721,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dto/log",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{}}}],["users/dto/sign",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/IamService.html":{}}}],["users/entity/user.entity",{"_index":256,"title":{},"body":{"classes/BaseTodoDto.html":{},"modules/IamModule.html":{},"injectables/JwtTokenProvider.html":{},"entities/Task.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"modules/TasksModule.html":{}}}],["users/users.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/IamModule.html":{}}}],["users/users.service",{"_index":411,"title":{},"body":{"injectables/IamService.html":{}}}],["userservice",{"_index":380,"title":{},"body":{"injectables/IamService.html":{}}}],["usersmodule",{"_index":151,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":378,"title":{"injectables/UsersService.html":{}},"body":{"injectables/IamService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":139,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["using",{"_index":292,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/JwtTokenProvider.html":{},"injectables/TaskService.html":{}}}],["valid",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/IamService.html":{}}}],["validate",{"_index":131,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validatedenv",{"_index":781,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["validateenv",{"_index":122,"title":{"classes/ValidateEnv.html":{}},"body":{"modules/AppConfigModule.html":{},"classes/ValidateEnv.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateenv(options",{"_index":779,"title":{},"body":{"classes/ValidateEnv.html":{},"miscellaneous/functions.html":{}}}],["validatenested",{"_index":273,"title":{},"body":{"classes/BaseUserDto.html":{}}}],["validatesync",{"_index":778,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["validatesync(validatedenv",{"_index":784,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["validation",{"_index":791,"title":{},"body":{"classes/ValidateEnv.html":{}}}],["validationpipe",{"_index":115,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validator",{"_index":259,"title":{},"body":{"classes/BaseTodoDto.html":{},"classes/BaseUserDto.html":{},"classes/IdDto.html":{},"classes/PaginationDto.html":{},"classes/SignUpDto.html":{},"classes/ValidateEnv.html":{},"dependencies.html":{}}}],["validity",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["value",{"_index":168,"title":{},"body":{"interfaces/AuthUserData.html":{},"injectables/BcryptProvider.html":{},"injectables/IamService.html":{},"injectables/JwtTokenProvider.html":{},"classes/PaginationDto.html":{},"injectables/PasswordService.html":{},"injectables/TaskService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1009,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifying",{"_index":383,"title":{},"body":{"injectables/IamService.html":{}}}],["version",{"_index":1002,"title":{},"body":{"properties.html":{}}}],["warning",{"_index":740,"title":{},"body":{"injectables/UsersService.html":{}}}],["warranties",{"_index":974,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":970,"title":{},"body":{"license.html":{}}}],["watch",{"_index":895,"title":{},"body":{"index.html":{}}}],["web",{"_index":448,"title":{},"body":{"injectables/JwtTokenProvider.html":{}}}],["webpack",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["website",{"_index":927,"title":{},"body":{"index.html":{}}}],["whether",{"_index":987,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":140,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["without",{"_index":947,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":891,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":916,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":109,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/IamModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard that checks the validity of an access token.\nIf the token is valid, it adds the user information to the request object.\nIf the token is invalid, it throws an UnauthorizedException.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/access-token.guard.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication/guards/access-token.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication/guards/access-token.guard.ts:53\n                        \n                    \n\n\n            \n                \n                        Extracts the token from the authorization header of the request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request object containing headers.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                The extracted token string or undefined if not found.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport jwtConfig from \"../../../app-config/jwt/jwt.config\";\nimport { ConfigType } from \"@nestjs/config\";\nimport { Request } from \"Express\";\nimport { REQUEST_USER_KEY } from \"../constants/user.key\";\n\n/**\n * Guard that checks the validity of an access token.\n * If the token is valid, it adds the user information to the request object.\n * If the token is invalid, it throws an UnauthorizedException.\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  private readonly logger: Logger = new Logger(\"AccessTokenGuard\");\n\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractTokenFromHeader(request);\n    if (!token) {\n      this.logger.warn(\" Bad Token found in the Header\");\n      throw new UnauthorizedException();\n    }\n    try {\n      request[REQUEST_USER_KEY] = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration\n      );\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  /**\n   * Extracts the token from the authorization header of the request.\n   * @param request - The request object containing headers.\n   * @returns The extracted token string or undefined if not found.\n   */\n  private extractTokenFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(\" \") ?? [];\n\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigModule -->\n\nDatabaseModule->AppConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app-config/app.config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { APP_GUARD, APP_PIPE } from \"@nestjs/core\";\nimport { DatabaseModule } from \"./database/db.module\";\nimport { validateEnv } from \"./environements/validate.env\";\n\nimport { ThrottlerGuard, ThrottlerModule } from \"@nestjs/throttler\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: \".env\",\n      validate: validateEnv,\n    }),\n    DatabaseModule,\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => [\n        {\n          ttl: configService.get(\"THROTTLER_TTL\"),\n          limit: configService.get(\"THROTTLER_LIMIT\"),\n        },\n      ],\n    }),\n  ],\n  providers: [\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n        forbidNonWhitelisted: true,\n        transform: true,\n        transformOptions: {\n          enableImplicitConversion: true,\n        },\n      }),\n    },\n    { provide: APP_GUARD, useClass: ThrottlerGuard },\n  ],\n})\nexport class AppConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nIamModule\n\nIamModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            IamModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersModule } from \"./users/users.module\";\nimport { AppConfigModule } from \"./app-config/app.config.module\";\nimport { IamModule } from \"./iam/iam.module\";\nimport { TasksModule } from \"./tasks/tasks.module\";\n\n@Module({\n  imports: [UsersModule, AppConfigModule, IamModule, TasksModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthUserData.html":{"url":"interfaces/AuthUserData.html","title":"interface - AuthUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authenticated-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the subject's (user) email.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The \"subject\" of the token. The value of this property is the user ID\nthat granted this token\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthUserData {\n  /**\n   * The \"subject\" of the token. The value of this property is the user ID\n   * that granted this token\n   */\n  sub: number;\n\n  /**\n   * the subject's (user) email.\n   * */\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/authentication/authentication.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                registration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(logInDto: LogInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/iam/authentication/authentication.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                logInDto\n                                            \n                                                            LogInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        registration\n                        \n                    \n                \n            \n            \n                \n                        \n                    registration(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/iam/authentication/authentication.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Logger, Post } from \"@nestjs/common\";\nimport { IamService } from \"../iam.service\";\nimport { SignUpDto } from \"../../users/dto/sign-up.dto\";\nimport { LogInDto } from \"../../users/dto/log-in.dto\";\nimport { AuthType } from \"./enum/auth-type.enum\";\nimport { Auth } from \"./decorators/auth.decorators\";\n\n@Auth(AuthType.None)\n@Controller(\"\")\nexport class AuthenticationController {\n  private readonly logger = new Logger(\"AuthenticationController\");\n  constructor(private readonly iamService: IamService) {}\n\n  @Post(\"register\")\n  async registration(@Body() signUpDto: SignUpDto) {\n    return await this.iamService.registration(signUpDto);\n  }\n\n  @Post(\"login\")\n  async login(@Body() logInDto: LogInDto) {\n    return await this.iamService.login(logInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/iam/authentication/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/iam/authentication/guards/authentication.guard.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/authentication/guards/authentication.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AccessTokenGuard } from \"./access-token.guard\";\nimport { AuthType } from \"../enum/auth-type.enum\";\nimport { AUTH_TYPE_KEY } from \"../decorators/auth.decorators\";\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private readonly logger = new Logger(\"AuthenticationGuard\");\n\n  private static readonly defaultAuthType = AuthType.Bearer;\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const authTypes = this.reflector.getAllAndOverride(\n      AUTH_TYPE_KEY,\n      [context.getHandler(), context.getClass()]\n    ) ?? [AuthenticationGuard.defaultAuthType];\n\n    console.log(\"Retrieved auth types:\", authTypes);\n\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n    let errors = new UnauthorizedException();\n\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context)\n      ).catch((err) => {\n        errors = err;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n    this.logger.log(\n      \"Somme errors occurred while trying to use Auth guards\",\n      errors.cause\n    );\n    throw errors;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseTodoDto.html":{"url":"classes/BaseTodoDto.html","title":"class - BaseTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/base-todo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                            \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/base-todo.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/base-todo.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/base-todo.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from \"../../users/entity/user.entity\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class BaseTodoDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly title: string;\n  @IsNotEmpty()\n  @IsString()\n  readonly description: string;\n  @Type(() => User)\n  readonly user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseUserDto.html":{"url":"classes/BaseUserDto.html","title":"class - BaseUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/base-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/base-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Task } from \"../../tasks/entity/task.entity\";\nimport { Type } from \"class-transformer\";\nimport { IsEmail, IsNotEmpty, IsString, ValidateNested } from \"class-validator\";\n\nexport class BaseUserDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly name: string;\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n  @Type(() => Task)\n  @ValidateNested({ each: true })\n  readonly tasks: Task[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Asynchronously generates a bcrypt hash for the provided data.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/iam/password/bcrypt.provider.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/bcrypt.provider.ts:53\n                        \n                    \n\n\n            \n                \n                        Asynchronously compares the provided data with an encrypted string using bcrypt.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to compare, can be a string or a Buffer.\n\n\n                                            \n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe encrypted string to compare the data against.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to true if the data matches the encrypted string, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/bcrypt.provider.ts:30\n                        \n                    \n\n\n            \n                \n                        Asynchronously generates a bcrypt hash for the provided data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to be hashed, can be a string or a Buffer.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A Promise that resolves to the generated bcrypt hash.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"IAMHashProvider\")\n                    \n                \n                    \n                        \n                                Defined in src/iam/password/bcrypt.provider.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { HashAlgoInterface } from \"./hash-algo.interface\";\nimport * as bcrypt from \"bcrypt\";\nimport { ConfigService } from \"@nestjs/config\";\n\n/**\n * Asynchronously generates a bcrypt hash for the provided data.\n *\n * @param data - The data to be hashed, can be a string or a Buffer.\n * @returns A Promise that resolves to the generated bcrypt hash.\n * @throws InternalServerErrorException if an error occurs during the hashing process.\n */\n@Injectable()\nexport class BcryptProvider implements HashAlgoInterface {\n  private readonly logger = new Logger(\"IAMHashProvider\");\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Asynchronously generates a bcrypt hash for the provided data.\n   *\n   * @param data - The data to be hashed, can be a string or a Buffer.\n   * @returns A Promise that resolves to the generated bcrypt hash.\n   * @throws InternalServerErrorException if an error occurs during the hashing process.\n   */\n  async hash(data: string | Buffer): Promise {\n    try {\n      const saltRounds =\n        this.configService.getOrThrow(\"SALT_ROUND\") || 12;\n      this.logger.log(`IAM-Hash: saltRounds i${saltRounds} `);\n      const salt = await bcrypt.genSalt(saltRounds);\n      this.logger.log(`IAM-Hash: salt i${salt} `);\n      return await bcrypt.hash(data, salt);\n    } catch (error) {\n      this.logger.log(\"IAM-HashProvider hash failed\", error.message);\n      this.logger.log(`Code error, ${error.code}`);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Asynchronously compares the provided data with an encrypted string using bcrypt.\n   *\n   * @param data - The data to compare, can be a string or a Buffer.\n   * @param encrypted - The encrypted string to compare the data against.\n   * @returns A Promise that resolves to true if the data matches the encrypted string, false otherwise.\n   * @throws UnauthorizedException if an error occurs during the comparison process.\n   */\n  async compare(data: string | Buffer, encrypted: string): Promise {\n    try {\n      return await bcrypt.compare(data, encrypted);\n    } catch (error) {\n      this.logger.log(\"IAM-HashProvider compare\", error.message);\n      this.logger.log(`Code error, ${error.code}`);\n      throw new UnauthorizedException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTodoDto.html":{"url":"classes/CreateTodoDto.html","title":"class - CreateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseTodoDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                            \n                                    \n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseTodoDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseTodoDto:13\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseTodoDto } from \"./base-todo.dto\";\n\nexport class CreateTodoDto extends BaseTodoDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app-config/database/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getDbConfig } from \"./db.config\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: getDbConfig,\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HashAlgoInterface.html":{"url":"interfaces/HashAlgoInterface.html","title":"interface - HashAlgoInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HashAlgoInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/hash-algo.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        compare\n                                    \n                                \n                                \n                                    \n                                        hash\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/hash-algo.interface.ts:3\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hash\n                        \n                    \n                \n            \n            \n                \nhash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/hash-algo.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface HashAlgoInterface {\n  hash(data: string | Buffer): Promise;\n  compare(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IamModule.html":{"url":"modules/IamModule.html","title":"module - IamModule","body":"\n                   \n\n\n\n\n    Modules\n    IamModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IamModule\n\n\n\ncluster_IamModule_imports\n\n\n\ncluster_IamModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nIamModule\n\nIamModule\n\nIamModule -->\n\nUsersModule->IamModule\n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nIamModule -->\n\nBcryptProvider->IamModule\n\n\n\n\n\nIamService\n\nIamService\n\nIamModule -->\n\nIamService->IamModule\n\n\n\n\n\nJwtTokenProvider\n\nJwtTokenProvider\n\nIamModule -->\n\nJwtTokenProvider->IamModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nIamModule -->\n\nPasswordService->IamModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/iam/iam.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BcryptProvider\n                        \n                        \n                            IamService\n                        \n                        \n                            JwtTokenProvider\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { IamService } from \"./iam.service\";\nimport { BcryptProvider } from \"./password/bcrypt.provider\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"../users/entity/user.entity\";\nimport { AuthenticationController } from \"./authentication/authentication.controller\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport jwtConfig from \"../app-config/jwt/jwt.config\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { AccessTokenGuard } from \"./authentication/guards/access-token.guard\";\nimport { APP_GUARD, Reflector } from \"@nestjs/core\";\nimport { AuthenticationGuard } from \"./authentication/guards/authentication.guard\";\nimport { PasswordService } from \"./password/password.service\";\nimport { JwtTokenProvider } from \"./jwt-token.provider\";\nimport { UsersModule } from \"../users/users.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ConfigModule.forFeature(jwtConfig),\n    UsersModule,\n  ],\n  providers: [\n    JwtTokenProvider,\n    PasswordService,\n    IamService,\n    BcryptProvider,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard,\n    },\n    AccessTokenGuard,\n  ],\n  controllers: [AuthenticationController],\n  exports: [],\n})\nexport class IamModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IamService.html":{"url":"injectables/IamService.html","title":"injectable - IamService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IamService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/iam.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service handling user authentication and registration operations.\nProvides methods for user registration, login, checking email availability,\ncreating new users, and generating JWT access tokens.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                registration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, passwordService: PasswordService, jwtTokenProvider: JwtTokenProvider)\n                    \n                \n                        \n                            \n                                Defined in src/iam/iam.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtTokenProvider\n                                                  \n                                                        \n                                                                        JwtTokenProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(logInDto: LogInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/iam.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Asynchronously logs in a user by verifying the provided login credentials.\nThis method checks if the email exists in the database, then compares the provided password\nwith the stored encrypted password. If the credentials are valid, it returns a success message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                logInDto\n                                            \n                                                            LogInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the user's login information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object with a success message upon successful login.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registration\n                        \n                    \n                \n            \n            \n                \n                        \n                    registration(signUpDto: SignUpDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/iam.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Registers a new user by creating a user entity with the provided sign-up information.\nChecks if the email is already in use, hashes the password, saves the user to the repository,\nand generates a token for the new user. Throws ConflictException if email is in use,\nInternalServerErrorException if hashing fails or saving the user fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the user's sign-up information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object with a token for the newly registered user.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"IAMService\")\n                    \n                \n                    \n                        \n                                Defined in src/iam/iam.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  UnauthorizedException,\n} from \"@nestjs/common\";\n\nimport { SignUpDto } from \"../users/dto/sign-up.dto\";\nimport { LogInDto } from \"../users/dto/log-in.dto\";\nimport { PasswordService } from \"./password/password.service\";\nimport { JwtTokenProvider } from \"./jwt-token.provider\";\nimport { UsersService } from \"../users/users.service\";\n\n/**\n * Service handling user authentication and registration operations.\n *\n * Provides methods for user registration, login, checking email availability,\n * creating new users, and generating JWT access tokens.\n */\n@Injectable()\nexport class IamService {\n  private readonly logger = new Logger(\"IAMService\");\n  constructor(\n    private readonly userService: UsersService,\n    private readonly passwordService: PasswordService,\n    private readonly jwtTokenProvider: JwtTokenProvider\n  ) {}\n\n  /**\n   * Registers a new user by creating a user entity with the provided sign-up information.\n   *\n   * Checks if the email is already in use, hashes the password, saves the user to the repository,\n   * and generates a token for the new user. Throws ConflictException if email is in use,\n   * InternalServerErrorException if hashing fails or saving the user fails.\n   *\n   * @param signUpDto - The data transfer object containing the user's sign-up information.\n   * @returns A promise that resolves to an object with a token for the newly registered user.\n   */\n  async registration(signUpDto: SignUpDto): Promise {\n    const storedUser = await this.userService.ifEmailUsed(signUpDto.email);\n    if (storedUser) {\n      throw new ConflictException();\n    }\n\n    const hashedPassword = await this.passwordService.hasPassword(\n      signUpDto.password\n    );\n    if (!hashedPassword) {\n      this.logger.log(\"IAM Failed with hash Provider\");\n      throw new InternalServerErrorException();\n    }\n\n    const savedUser = await this.userService.createUser(\n      signUpDto,\n      hashedPassword\n    );\n\n    if (!savedUser) {\n      this.logger.log(\"IAM Failed to save new User\");\n      throw new InternalServerErrorException(\"Database error\");\n    }\n\n    return await this.jwtTokenProvider.generateToken(savedUser);\n  }\n\n  /**\n   * Asynchronously logs in a user by verifying the provided login credentials.\n   *\n   * This method checks if the email exists in the database, then compares the provided password\n   * with the stored encrypted password. If the credentials are valid, it returns a success message.\n   *\n   * @param logInDto - The data transfer object containing the user's login information.\n   * @returns A promise that resolves to an object with a success message upon successful login.\n   * @throws UnauthorizedException if the login credentials are invalid.\n   */\n  async login(logInDto: LogInDto): Promise {\n    const storedUser = await this.userService.ifEmailUsed(logInDto.email);\n    if (!storedUser) {\n      this.logger.log(\"IAM-SignUp Failed to signIn\");\n      throw new UnauthorizedException();\n    }\n    const isSamePassword: boolean = await this.passwordService.comparePassword(\n      logInDto.password,\n      storedUser.password\n    );\n    if (!isSamePassword) {\n      this.logger.log(\"IAM-SignUp Failed to signIn\");\n      throw new UnauthorizedException();\n    }\n\n    return await this.jwtTokenProvider.generateToken(storedUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsPositive } from \"class-validator\";\n\nexport class IdDto {\n  @IsPositive()\n  @IsInt()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTokenProvider.html":{"url":"injectables/JwtTokenProvider.html","title":"injectable - JwtTokenProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTokenProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/jwt-token.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/iam/jwt-token.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/jwt-token.provider.ts:34\n                        \n                    \n\n\n            \n                \n                        Asynchronously generates a JWT access token for a given user.\nThis method creates a JSON Web Token (JWT) using the user's ID and email as the payload.\nThe token is signed with the specified secret and includes additional configuration\nsuch as audience, issuer, and expiration time. If token generation fails, an error is logged\nand an InternalServerErrorException is thrown.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user object containing the user's ID and email.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an object containing the generated access token.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"JwtTokenProvider\")\n                    \n                \n                    \n                        \n                                Defined in src/iam/jwt-token.provider.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n} from \"@nestjs/common\";\nimport { User } from \"../users/entity/user.entity\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport jwtConfig from \"../app-config/jwt/jwt.config\";\nimport { ConfigType } from \"@nestjs/config\";\nimport { AuthUserData } from \"./authenticated-user-data.interface\";\n\n@Injectable()\nexport class JwtTokenProvider {\n  private readonly logger = new Logger(\"JwtTokenProvider\");\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType\n  ) {}\n\n  /**\n   * Asynchronously generates a JWT access token for a given user.\n   *\n   * This method creates a JSON Web Token (JWT) using the user's ID and email as the payload.\n   * The token is signed with the specified secret and includes additional configuration\n   * such as audience, issuer, and expiration time. If token generation fails, an error is logged\n   * and an InternalServerErrorException is thrown.\n   *\n   * @param {User} user - The user object containing the user's ID and email.\n   * @returns {Promise} A promise that resolves to an object containing the generated access token.\n   * @throws {InternalServerErrorException} If token generation fails.\n   */\n  async generateToken(user: User): Promise {\n    try {\n      const accessToken = await this.jwtService.signAsync(\n        {\n          sub: user.id,\n          email: user.email,\n        } as AuthUserData,\n        {\n          audience: this.jwtConfiguration.audience,\n          issuer: this.jwtConfiguration.issuer,\n          secret: this.jwtConfiguration.secret,\n          expiresIn: this.jwtConfiguration.accessTokenTtl,\n        }\n      );\n      return { token: accessToken };\n    } catch (error) {\n      this.logger.log(\"Failed to generate token\", error);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/log-in.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(SignUpDto, [\"name\", \"tasks\"])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/mapped-types\";\nimport { SignUpDto } from \"./sign-up.dto\";\n\nexport class LogInDto extends OmitType(SignUpDto, [\"name\", \"tasks\"]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                sortBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : \"ASC\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        sortBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive, IsString } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class PaginationDto {\n  @IsOptional()\n  @Type(() => Number)\n  @IsPositive()\n  page: number = 1; //default page\n  @IsOptional()\n  @Type(() => Number)\n  @IsPositive()\n  limit: number = 10; //default limit per page\n  @IsOptional()\n  @IsString()\n  sortBy?: string;\n  @IsOptional()\n  @IsString()\n  order?: \"ASC\" | \"DESC\" = \"ASC\";\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationResultDto.html":{"url":"classes/PaginationResultDto.html","title":"class - PaginationResultDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationResultDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/generic-pagination-result.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                limit\n                            \n                            \n                                nextPage\n                            \n                            \n                                page\n                            \n                            \n                                previousPage\n                            \n                            \n                                totalCount\n                            \n                            \n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial: Partial>)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        previousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/generic-pagination-result.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class PaginationResultDto {\n  data: T[];\n  page: number;\n  limit: number;\n  totalCount: number;\n  totalPages: number;\n  nextPage: boolean;\n  previousPage: boolean;\n\n  constructor(partial: Partial>) {\n    Object.assign(this, partial);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/iam/password/password.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                hasPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bcryptProvider: BcryptProvider)\n                    \n                \n                        \n                            \n                                Defined in src/iam/password/password.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bcryptProvider\n                                                  \n                                                        \n                                                                        BcryptProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encryptedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/password.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryptedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hasPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/iam/password/password.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PasswordService.name)\n                    \n                \n                    \n                        \n                                Defined in src/iam/password/password.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from \"@nestjs/common\";\nimport { BcryptProvider } from \"./bcrypt.provider\";\n\n@Injectable()\nexport class PasswordService {\n  private readonly logger = new Logger(PasswordService.name);\n  constructor(private readonly bcryptProvider: BcryptProvider) {}\n\n  async hasPassword(data: string | Buffer): Promise {\n    return await this.bcryptProvider.hash(data);\n  }\n  async comparePassword(\n    data: string | Buffer,\n    encryptedPassword: string\n  ): Promise {\n    return await this.bcryptProvider.compare(data, encryptedPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/sign-up.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsStrongPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/sign-up.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseUserDto:14\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseUserDto } from \"./base-user.dto\";\nimport { IsStrongPassword } from \"class-validator\";\n\nexport class SignUpDto extends BaseUserDto {\n  @IsStrongPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Task.html":{"url":"entities/Task.html","title":"entity - Task","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/entity/task.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updateAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entity/task.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from \"../../users/entity/user.entity\";\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\n\n@Entity(\"todos\")\nexport class Task {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  title: string;\n  @Column()\n  description: string;\n  @ManyToOne(() => User, (user) => user.id)\n  user: User;\n\n  @CreateDateColumn()\n  createAt: Date;\n  @UpdateDateColumn()\n  updateAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                deleteTodo\n                            \n                            \n                                    \n                                    Async\n                                getAllTodos\n                            \n                            \n                                    \n                                    Async\n                                getTodos\n                            \n                            \n                                    \n                                    Async\n                                updateTodo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteTodo\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTodo(userPayload: AuthUserData, undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.NO_CONTENT)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:90\n                        \n                    \n\n\n            \n                \n                        Deletes a todo for the authenticated user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userPayload\n                                            \n                                                            AuthUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user's data.\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves once the todo is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllTodos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllTodos(userPayload: AuthUserData, paginationDto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:112\n                        \n                    \n\n\n            \n                \n                        Retrieves and paginates all todos for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userPayload\n                                            \n                                                            AuthUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user's data.\n\n\n                                            \n                                        \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination details for the todos.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A promise that resolves to a paginated result of todos.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getTodos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodos(userPayload: AuthUserData, todo: CreateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Retrieves user information and creates a new task associated with the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userPayload\n                                            \n                                                            AuthUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user's data.\n\n\n                                            \n                                        \n                                        \n                                                todo\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe details of the task to be created.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the created task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateTodo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTodo(userPayload: AuthUserData, undefined: IdDto, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/task.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Updates a task for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userPayload\n                                            \n                                                            AuthUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authenticated user's data.\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the task with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the updated task.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n  Query,\n} from \"@nestjs/common\";\nimport { Auth } from \"../iam/authentication/decorators/auth.decorators\";\nimport { AuthType } from \"../iam/authentication/enum/auth-type.enum\";\nimport { TaskService } from \"./task.service\";\nimport { AuthenticateUser } from \"../iam/decorator/authenticated-user.decorator\";\nimport { AuthUserData } from \"../iam/authenticated-user-data.interface\";\nimport { CreateTodoDto } from \"./dto/create-todo.dto\";\nimport { User } from \"../users/entity/user.entity\";\nimport { Task } from \"./entity/task.entity\";\nimport { UpdateTaskDto } from \"./dto/update-todo.dto\";\nimport { IdDto } from \"../common/dto/id-dto\";\nimport { PaginationDto } from \"../common/pagination/pagination.dto\";\nimport { PaginationResultDto } from \"../common/pagination/generic-pagination-result.dto\";\nimport { Throttle } from \"@nestjs/throttler\";\n\n@Throttle({ default: { limit: 3, ttl: 60000 } })\n@Auth(AuthType.Bearer)\n@Controller(\"todos\")\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  /**\n   * Retrieves user information and creates a new task associated with the user.\n   *\n   * @param {AuthUserData} userPayload - The authenticated user's data.\n   * @param {CreateTodoDto} todo - The details of the task to be created.\n   * @returns {Promise} A promise that resolves to the created task.\n   * @throws {NotFoundException} If the user does not exist.\n   */\n  @Post()\n  async getTodos(\n    @AuthenticateUser() userPayload: AuthUserData,\n    @Body() todo: CreateTodoDto\n  ): Promise {\n    const user: User | null = await this.taskService.getUserEntity(\n      userPayload.sub\n    );\n    if (!user) {\n      throw new NotFoundException(\"User does not exist\");\n    }\n    return await this.taskService.createTask(todo, user);\n  }\n\n  /**\n   * Updates a task for a specific user.\n   *\n   * @param {AuthUserData} userPayload - The authenticated user's data.\n   * @param {IdDto} id - The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto - The data to update the task with.\n   * @returns {Promise} A promise that resolves to the updated task.\n   * @throws {NotFoundException} If the user does not exist.\n   */\n  @Put(\":id\")\n  async updateTodo(\n    @AuthenticateUser() userPayload: AuthUserData,\n    @Param() { id }: IdDto,\n    @Body() updateTaskDto: UpdateTaskDto\n  ): Promise {\n    const user: User | null = await this.taskService.getUserEntity(\n      userPayload.sub\n    );\n    if (!user) {\n      throw new NotFoundException(\"User does not exist\");\n    }\n    return await this.taskService.updateTask(id, updateTaskDto, user);\n  }\n\n  /**\n   * Deletes a todo for the authenticated user.\n   *\n   * @param {AuthUserData} userPayload - The authenticated user's data.\n   * @param {IdDto} id - The ID of the todo to delete.\n   * @returns {Promise} A promise that resolves once the todo is deleted.\n   * @throws {NotFoundException} If the user or todo is not found.\n   */\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete(\":id\")\n  async deleteTodo(\n    @AuthenticateUser() userPayload: AuthUserData,\n    @Param() { id }: IdDto\n  ): Promise {\n    const user: User | null = await this.taskService.getUserEntity(\n      userPayload.sub\n    );\n    if (!user) {\n      throw new NotFoundException(\"User does not exist\");\n    }\n    await this.taskService.deleteTask(id, user);\n  }\n\n  /**\n   * Retrieves and paginates all todos for a specific user.\n   *\n   * @param {AuthUserData} userPayload - The authenticated user's data.\n   * @param {PaginationDto} paginationDto - The pagination details for the todos.\n   * @returns {Promise>} A promise that resolves to a paginated result of todos.\n   * @throws {NotFoundException} If the user or tasks are not found.\n   */\n  @Get()\n  async getAllTodos(\n    @AuthenticateUser() userPayload: AuthUserData,\n    @Query() paginationDto: PaginationDto\n  ): Promise> {\n    const user: User | null = await this.taskService.getUserEntity(\n      userPayload.sub\n    );\n    if (!user) {\n      throw new NotFoundException(`Not found Task for Connected User`);\n    }\n\n    return await this.taskService.paginateTasksForUser(paginationDto, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                getUserEntity\n                            \n                            \n                                    Async\n                                paginateTasksForUser\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/task.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTask(todo: CreateTodoDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Asynchronously creates a new task and saves it to the repository.\nThis function attempts to create a new task using the provided todo details and associates it with the specified user.\nIt then saves the task to the repository. If an error occurs during this process, it logs the error and throws an\nInternalServerErrorException.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                todo\n                                            \n                                                            CreateTodoDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing the details of the task to be created.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user who is creating the task.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the created task.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTask(taskID: number, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Deletes a task based on the task ID and user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskID\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to be deleted.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user requesting the task deletion.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves once the task is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserEntity\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserEntity(userID: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Retrieves a user entity based on the provided user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userID\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the user entity if found, otherwise null.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginateTasksForUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateTasksForUser(paginationDto: PaginationDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Paginates tasks for a specific user based on the provided pagination details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationDto\n                                            \n                                                            PaginationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe pagination details including page and limit.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user for whom tasks are being paginated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated result containing tasks for the user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateTask(taskID: number, updateTaskDto: UpdateTaskDto, user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/task.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Updates a task in the repository based on the provided task ID, update data, and user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                taskID\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the task to update.\n\n\n                                            \n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to update the task with.\n\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user performing the update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the updated task.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"TaskService\")\n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  NotFoundException,\n} from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Task } from \"./entity/task.entity\";\nimport { Repository } from \"typeorm\";\nimport { User } from \"../users/entity/user.entity\";\nimport { CreateTodoDto } from \"./dto/create-todo.dto\";\nimport { UpdateTaskDto } from \"./dto/update-todo.dto\";\nimport { PaginationResultDto } from \"../common/pagination/generic-pagination-result.dto\";\nimport { PaginationDto } from \"../common/pagination/pagination.dto\";\n\n@Injectable()\nexport class TaskService {\n  private readonly logger = new Logger(\"TaskService\");\n  constructor(\n    @InjectRepository(Task) private readonly taskRepository: Repository,\n    @InjectRepository(User) private readonly userRepository: Repository\n  ) {}\n\n  /**\n   * Paginates tasks for a specific user based on the provided pagination details.\n   *\n   * @param {PaginationDto} paginationDto - The pagination details including page and limit.\n   * @param {User} user - The user for whom tasks are being paginated.\n   * @returns {PaginationResultDto} A paginated result containing tasks for the user.\n   * @throws {InternalServerErrorException} If an error occurs during the pagination process.\n   */\n  async paginateTasksForUser(\n    paginationDto: PaginationDto,\n    user: User\n  ): Promise> {\n    const { page, limit } = paginationDto;\n\n    try {\n      const [data, totalCount] = await this.taskRepository.findAndCount({\n        where: { user },\n        skip: (page - 1) * limit,\n        take: limit,\n        order: { createAt: \"DESC\" },\n      });\n\n      const totalPages = Math.ceil(totalCount / limit);\n      return new PaginationResultDto({\n        data,\n        page,\n        limit,\n        totalCount,\n        totalPages,\n        nextPage: page  1,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to getAllTasks\", error);\n      this.logger.error(`Error code : ${error.code}`);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Asynchronously creates a new task and saves it to the repository.\n   *\n   * @param {CreateTodoDto} todo - The data transfer object containing the details of the task to be created.\n   * @param {User} user - The user who is creating the task.\n   * @returns {Promise} A promise that resolves to the created task.\n   * @throws {InternalServerErrorException} If there is an error during the task creation process.\n   *\n   * This function attempts to create a new task using the provided `todo` details and associates it with the specified `user`.\n   * It then saves the task to the repository. If an error occurs during this process, it logs the error and throws an\n   * `InternalServerErrorException`.\n   */\n  async createTask(todo: CreateTodoDto, user: User): Promise {\n    try {\n      const task = this.taskRepository.create({ ...todo, user });\n      return await this.taskRepository.save(task);\n    } catch (error) {\n      this.logger.error(\"Failed to create task\", error);\n      this.logger.error(`Code Error, ${error.code}`);\n      throw new InternalServerErrorException();\n    }\n  }\n\n  /**\n   * Retrieves a user entity based on the provided user ID.\n   *\n   * @param {number} userID - The ID of the user to retrieve.\n   * @returns {Promise} A promise that resolves to the user entity if found, otherwise null.\n   */\n  async getUserEntity(userID: number): Promise {\n    try {\n      return await this.userRepository.findOneBy({ id: userID });\n    } catch (error) {\n      this.logger.log(\"Failed to get user entity\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Updates a task in the repository based on the provided task ID, update data, and user.\n   *\n   * @param {number} taskID - The ID of the task to update.\n   * @param {UpdateTaskDto} updateTaskDto - The data to update the task with.\n   * @param {User} user - The user performing the update.\n   * @returns {Promise} A promise that resolves to the updated task.\n   * @throws {NotFoundException} If the task with the specified ID is not found.\n   * @throws {InternalServerErrorException} If there is an error during the update process.\n   */\n  async updateTask(\n    taskID: number,\n    updateTaskDto: UpdateTaskDto,\n    user: User\n  ): Promise {\n    const updatedTask = await this.taskRepository.preload({\n      id: taskID,\n      ...updateTaskDto,\n      user,\n    });\n\n    if (!updatedTask) {\n      throw new NotFoundException(`Task with ID ${taskID} not found`);\n    }\n\n    try {\n      return await this.taskRepository.save(updatedTask);\n    } catch (error) {\n      this.logger.error(\"Failed to update task\", error.message);\n      this.logger.error(`Error code ${error.code}`);\n      throw new InternalServerErrorException(\"Failed to update task\");\n    }\n  }\n\n  /**\n   * Deletes a task based on the task ID and user.\n   *\n   * @param {number} taskID - The ID of the task to be deleted.\n   * @param {User} user - The user requesting the task deletion.\n   * @returns {Promise} A promise that resolves once the task is deleted.\n   * @throws {NotFoundException} If the task with the specified ID is not found for the user.\n   */\n  async deleteTask(taskID: number, user: User): Promise {\n    const task = await this.taskRepository.findOneBy({\n      id: taskID,\n      user: user,\n    });\n    if (!task) {\n      throw new NotFoundException(\n        `Task with ID ${taskID} not found for the user`\n      );\n    }\n\n    const result = await this.taskRepository.delete(taskID);\n    if (result.affected) {\n      this.logger.log(`Task with ID ${taskID} deleted by User ID ${user.name}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTaskService\n\nTaskService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTaskService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TaskController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Task } from \"./entity/task.entity\";\nimport { User } from \"../users/entity/user.entity\";\nimport { TaskController } from \"./task.controller\";\nimport { TaskService } from \"./task.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task]), TypeOrmModule.forFeature([User])],\n  controllers: [TaskController],\n  providers: [TaskService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-todo.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTodoDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateTodoDto } from \"./create-todo.dto\";\n\nexport class UpdateTaskDto extends PartialType(CreateTodoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                tasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, task => task.user, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\nimport { Task } from \"../../tasks/entity/task.entity\";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  name: string;\n  @Column({ unique: true })\n  email: string;\n  @Column()\n  password: string;\n  @OneToMany(() => Task, (task) => task.user, { onDelete: \"CASCADE\" })\n  tasks: Task[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { UsersService } from \"./users.service\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"./entity/user.entity\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                ifEmailUsed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(signUpDto: SignUpDto, encryptedPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Asynchronously creates a new user in the system.\nThis function takes a sign-up data transfer object (DTO) and an encrypted password,\ncreates a new user entity, and saves it to the user repository. If the operation\nfails, it logs the error and throws an InternalServerErrorException.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signUpDto\n                                            \n                                                            SignUpDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the user's sign-up information.\n\n\n                                            \n                                        \n                                        \n                                                encryptedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user's password, encrypted for security.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the newly created User object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ifEmailUsed\n                        \n                    \n                \n            \n            \n                \n                        \n                    ifEmailUsed(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Check if the provided email is already in use by querying the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email to check for availability.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A Promise that resolves with the User object if the email is found otherwise resolves with null.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(\"UsersService\")\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n} from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"./entity/user.entity\";\nimport { Repository } from \"typeorm\";\nimport { SignUpDto } from \"./dto/sign-up.dto\";\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(\"UsersService\");\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository\n  ) {}\n  /**\n   * Check if the provided email is already in use by querying the database.\n   *\n   * @param email - The email to check for availability.\n   * @returns A Promise that resolves with the User object if the email is found otherwise resolves with null.\n   * @throws Logs a warning if an error occurs during the database query.\n   */\n  async ifEmailUsed(email: string): Promise {\n    try {\n      return await this.userRepository.findOne({ where: { email } });\n    } catch (error) {\n      this.logger.log(\"IAM User Not Found\", email);\n      this.logger.warn(`${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Asynchronously creates a new user in the system.\n   *\n   * This function takes a sign-up data transfer object (DTO) and an encrypted password,\n   * creates a new user entity, and saves it to the user repository. If the operation\n   * fails, it logs the error and throws an InternalServerErrorException.\n   *\n   * @param signUpDto - An object containing the user's sign-up information.\n   * @param encryptedPassword - The user's password, encrypted for security.\n   * @returns A promise that resolves to the newly created User object.\n   * @throws InternalServerErrorException if the user creation fails.\n   */\n  async createUser(\n    signUpDto: SignUpDto,\n    encryptedPassword: string\n  ): Promise {\n    try {\n      const newUser: User = this.userRepository.create({\n        ...signUpDto,\n        password: encryptedPassword,\n      });\n      return await this.userRepository.save(newUser);\n    } catch (error) {\n      this.logger.log(\"IAM Failed to create new user\", error);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidateEnv.html":{"url":"classes/ValidateEnv.html","title":"class - ValidateEnv","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidateEnv\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app-config/environements/validate.env.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                APP_PORT\n                            \n                            \n                                    \n                                    \n                                APP_PREFIX\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_DATABASE\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_HOST\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_PASSWORD\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_PORT\n                            \n                            \n                                    \n                                    \n                                DATASOURCE_USERNAME\n                            \n                            \n                                    \n                                    \n                                JWT_SECRET\n                            \n                            \n                                    \n                                    \n                                JWT_TOKEN_AUDIENCE\n                            \n                            \n                                    \n                                    \n                                JWT_TOKEN_ISSUER\n                            \n                            \n                                    \n                                    \n                                JWT_TOKEN_TTL\n                            \n                            \n                                    \n                                    \n                                SALT_ROUND\n                            \n                            \n                                    \n                                    \n                                THROTTLER_LIMIT\n                            \n                            \n                                    \n                                    \n                                THROTTLER_TTL\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        APP_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_DATABASE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_HOST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_PORT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        DATASOURCE_USERNAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        JWT_TOKEN_AUDIENCE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        JWT_TOKEN_ISSUER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        JWT_TOKEN_TTL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        SALT_ROUND\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        THROTTLER_LIMIT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        THROTTLER_TTL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app-config/environements/validate.env.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { plainToInstance } from \"class-transformer\";\nimport { InternalServerErrorException, Logger } from \"@nestjs/common\";\nimport {\n  IsNotEmpty,\n  IsNumber,\n  IsPositive,\n  IsString,\n  validateSync,\n} from \"class-validator\";\n\nexport class ValidateEnv {\n  @IsNotEmpty()\n  @IsString()\n  DATASOURCE_USERNAME: string;\n  @IsNotEmpty()\n  @IsString()\n  DATASOURCE_PASSWORD: string;\n  @IsNotEmpty()\n  @IsString()\n  DATASOURCE_DATABASE: string;\n  @IsNotEmpty()\n  @IsString()\n  DATASOURCE_HOST: string;\n\n  @IsNumber()\n  @IsPositive()\n  DATASOURCE_PORT: number;\n  @IsNumber()\n  @IsPositive()\n  APP_PORT: number;\n  @IsNumber()\n  @IsPositive()\n  SALT_ROUND: number;\n  @IsNotEmpty()\n  @IsString()\n  APP_PREFIX: string;\n\n  @IsNotEmpty()\n  @IsString()\n  JWT_SECRET: string;\n  @IsNotEmpty()\n  @IsString()\n  JWT_TOKEN_AUDIENCE: string;\n  @IsNotEmpty()\n  @IsString()\n  JWT_TOKEN_ISSUER: string;\n  @IsNumber()\n  @IsPositive()\n  JWT_TOKEN_TTL: number;\n  @IsNumber()\n  @IsPositive()\n  THROTTLER_TTL: number;\n  @IsNumber()\n  @IsPositive()\n  THROTTLER_LIMIT: number;\n}\n\nexport function validateEnv(options: Record) {\n  const logger = new Logger(\"Validate Env\");\n  const validatedEnv = plainToInstance(ValidateEnv, options, {\n    enableImplicitConversion: true,\n  });\n  const errors = validateSync(validatedEnv, {\n    skipMissingProperties: false,\n  });\n  if (errors.length > 0) {\n    logger.log(`${errors.length} are missing proper validation `);\n    logger.debug(`${errors.toString()}`);\n    throw new InternalServerErrorException(\"Validation Error\");\n  }\n  logger.log(\"All Env. validation results are successfully\");\n  return validatedEnv;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app-config/database/db.config.ts\n            \n            variable\n            getDbConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app-config/environements/validate.env.ts\n            \n            class\n            ValidateEnv\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/app-config/environements/validate.env.ts\n            \n            function\n            validateEnv\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dto/id-dto.ts\n            \n            class\n            IdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pagination/generic-pagination-result.dto.ts\n            \n            class\n            PaginationResultDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/pagination/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/iam/authenticated-user-data.interface.ts\n            \n            interface\n            AuthUserData\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/authentication/constants/user.key.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth.decorators.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/decorators/auth.decorators.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/iam/authentication/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/iam/decorator/authenticated-user.decorator.ts\n            \n            variable\n            AuthenticateUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/iam/iam.service.ts\n            \n            injectable\n            IamService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/iam/jwt-token.provider.ts\n            \n            injectable\n            JwtTokenProvider\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/iam/password/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/iam/password/hash-algo.interface.ts\n            \n            interface\n            HashAlgoInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/iam/password/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/base-todo.dto.ts\n            \n            class\n            BaseTodoDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-todo.dto.ts\n            \n            class\n            CreateTodoDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-todo.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/entity/task.entity.ts\n            \n            entity\n            Task\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/task.controller.ts\n            \n            controller\n            TaskController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/tasks/task.service.ts\n            \n            injectable\n            TaskService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/users/dto/base-user.dto.ts\n            \n            class\n            BaseUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/log-in.dto.ts\n            \n            class\n            LogInDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                40 %\n                (2/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/throttler : ^6.2.1\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            fork-ts-checker-webpack-plugin : ^9.0.2\n        \n            pg : ^8.13.0\n        \n            prettier-plugin-organize-imports : ^4.1.0\n        \n            reflect-metadata : ^0.2.2\n        \n            run-script-webpack-plugin : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            webpack-node-externals : ^3.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/enum/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            validateEnv   (src/.../validate.env.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/app-config/environements/validate.env.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateEnv\n                        \n                    \n                \n            \n            \n                \nvalidateEnv(options: Record)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 Jordach Makaya\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IamModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_IamModule\n\n\n\ncluster_IamModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigModule -->\n\nDatabaseModule->AppConfigModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nIamModule\n\nIamModule\n\nAppModule -->\n\nIamModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nIamModule -->\n\nUsersModule->IamModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nBcryptProvider\n\nBcryptProvider\n\nIamModule -->\n\nBcryptProvider->IamModule\n\n\n\n\n\nIamService\n\nIamService\n\nIamModule -->\n\nIamService->IamModule\n\n\n\n\n\nJwtTokenProvider\n\nJwtTokenProvider\n\nIamModule -->\n\nJwtTokenProvider->IamModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nIamModule -->\n\nPasswordService->IamModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTasksModule -->\n\nTaskService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : RESTful API to allow users to manage their to-do list\n        \n            License : MIT\n        \n            Author : Jordach Makaya\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Auth   (src/.../auth.decorators.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.decorators.ts)\n                        \n                        \n                            AuthenticateUser   (src/.../authenticated-user.decorator.ts)\n                        \n                        \n                            getDbConfig   (src/.../db.config.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../user.key.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/iam/authentication/decorators/auth.decorators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"authType\"\n                    \n                \n\n\n        \n    \n\n    src/iam/decorator/authenticated-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthenticateUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof AuthUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: AuthUserData | undefined = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  }\n)\n                    \n                \n\n\n        \n    \n\n    src/app-config/database/db.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDbConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  configService: ConfigService\n): Promise => ({\n  type: \"postgres\",\n  host: configService.getOrThrow(\"DATASOURCE_HOST\"),\n  port: configService.getOrThrow(\"DATASOURCE_PORT\"),\n  database: configService.getOrThrow(\"DATASOURCE_DATABASE\"),\n  username: configService.getOrThrow(\"DATASOURCE_USERNAME\"),\n  password: configService.getOrThrow(\"DATASOURCE_PASSWORD\"),\n  entities: [User, Task],\n  synchronize: true,\n})\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/iam/authentication/constants/user.key.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"user\"\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
